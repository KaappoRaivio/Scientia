{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm06 } from '../../type/matrix/utils/algorithm06';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { nthRootNumber } from '../../plain/number';\nvar name = 'nthRoot';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber'];\nexport var createNthRoot = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      _BigNumber = _ref.BigNumber;\n  var algorithm01 = createAlgorithm01({\n    typed: typed\n  });\n  var algorithm02 = createAlgorithm02({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm06 = createAlgorithm06({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Calculate the nth root of a value.\n   * The principal nth root of a positive real number A, is the positive real\n   * solution of the equation\n   *\n   *     x^root = A\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *     math.nthRoot(a)\n   *     math.nthRoot(a, root)\n   *\n   * Examples:\n   *\n   *     math.nthRoot(9, 2)    // returns 3, as 3^2 == 9\n   *     math.sqrt(9)          // returns 3, as 3^2 == 9\n   *     math.nthRoot(64, 3)   // returns 4, as 4^3 == 64\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param {number | BigNumber | Array | Matrix | Complex} a\n   *              Value for which to calculate the nth root\n   * @param {number | BigNumber} [root=2]    The root.\n   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n   */\n\n  var complexErr = '' + 'Complex number not supported in function nthRoot. ' + 'Use nthRoots instead.';\n  var nthRoot = typed(name, {\n    number: function number(x) {\n      return nthRootNumber(x, 2);\n    },\n    'number, number': nthRootNumber,\n    BigNumber: function BigNumber(x) {\n      return _bigNthRoot(x, new _BigNumber(2));\n    },\n    Complex: function Complex(x) {\n      throw new Error(complexErr);\n    },\n    'Complex, number': function ComplexNumber(x, y) {\n      throw new Error(complexErr);\n    },\n    'BigNumber, BigNumber': _bigNthRoot,\n    'Array | Matrix': function ArrayMatrix(x) {\n      return nthRoot(x, 2);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse + sparse\n        return algorithm06(x, y, nthRoot);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, nthRoot, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // dense + sparse\n        return algorithm01(x, y, nthRoot, false);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, nthRoot);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return nthRoot(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return nthRoot(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return nthRoot(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, nthRoot, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, nthRoot, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse - scalar\n        return algorithm11(y, x, nthRoot, true);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      return algorithm14(y, x, nthRoot, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return nthRoot(matrix(x), y).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return nthRoot(x, matrix(y)).valueOf();\n    }\n  });\n  return nthRoot;\n  /**\n   * Calculate the nth root of a for BigNumbers, solve x^root == a\n   * https://rosettacode.org/wiki/Nth_root#JavaScript\n   * @param {BigNumber} a\n   * @param {BigNumber} root\n   * @private\n   */\n\n  function _bigNthRoot(a, root) {\n    var precision = _BigNumber.precision;\n\n    var Big = _BigNumber.clone({\n      precision: precision + 2\n    });\n\n    var zero = new _BigNumber(0);\n    var one = new Big(1);\n    var inv = root.isNegative();\n\n    if (inv) {\n      root = root.neg();\n    }\n\n    if (root.isZero()) {\n      throw new Error('Root must be non-zero');\n    }\n\n    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n      throw new Error('Root must be odd when a is negative.');\n    } // edge cases zero and infinity\n\n\n    if (a.isZero()) {\n      return inv ? new Big(Infinity) : 0;\n    }\n\n    if (!a.isFinite()) {\n      return inv ? zero : a;\n    }\n\n    var x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n\n    x = a.isNeg() ? x.neg() : x;\n    return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n  }\n});\nexport var createNthRootNumber = /* #__PURE__ */factory(name, ['typed'], function (_ref2) {\n  var typed = _ref2.typed;\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber\n  });\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/arithmetic/nthRoot.js"],"names":["factory","createAlgorithm01","createAlgorithm02","createAlgorithm06","createAlgorithm11","createAlgorithm13","createAlgorithm14","nthRootNumber","name","dependencies","createNthRoot","_ref","typed","matrix","equalScalar","_BigNumber","BigNumber","algorithm01","algorithm02","algorithm06","algorithm11","algorithm13","algorithm14","complexErr","nthRoot","number","x","_bigNthRoot","Complex","Error","ComplexNumber","y","ArrayMatrix","SparseMatrixSparseMatrix","density","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","MatrixArray","SparseMatrixNumberBigNumber","DenseMatrixNumberBigNumber","numberBigNumberSparseMatrix","numberBigNumberDenseMatrix","ArrayNumberBigNumber","numberBigNumberArray","a","root","precision","Big","clone","zero","one","inv","isNegative","neg","isZero","abs","mod","equals","Infinity","isFinite","pow","div","isNeg","toPrecision","createNthRootNumber","_ref2"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm06 } from '../../type/matrix/utils/algorithm06';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { nthRootNumber } from '../../plain/number';\nvar name = 'nthRoot';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber'];\nexport var createNthRoot = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      _BigNumber = _ref.BigNumber;\n  var algorithm01 = createAlgorithm01({\n    typed: typed\n  });\n  var algorithm02 = createAlgorithm02({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm06 = createAlgorithm06({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Calculate the nth root of a value.\n   * The principal nth root of a positive real number A, is the positive real\n   * solution of the equation\n   *\n   *     x^root = A\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *     math.nthRoot(a)\n   *     math.nthRoot(a, root)\n   *\n   * Examples:\n   *\n   *     math.nthRoot(9, 2)    // returns 3, as 3^2 == 9\n   *     math.sqrt(9)          // returns 3, as 3^2 == 9\n   *     math.nthRoot(64, 3)   // returns 4, as 4^3 == 64\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param {number | BigNumber | Array | Matrix | Complex} a\n   *              Value for which to calculate the nth root\n   * @param {number | BigNumber} [root=2]    The root.\n   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n   */\n\n  var complexErr = '' + 'Complex number not supported in function nthRoot. ' + 'Use nthRoots instead.';\n  var nthRoot = typed(name, {\n    number: function number(x) {\n      return nthRootNumber(x, 2);\n    },\n    'number, number': nthRootNumber,\n    BigNumber: function BigNumber(x) {\n      return _bigNthRoot(x, new _BigNumber(2));\n    },\n    Complex: function Complex(x) {\n      throw new Error(complexErr);\n    },\n    'Complex, number': function ComplexNumber(x, y) {\n      throw new Error(complexErr);\n    },\n    'BigNumber, BigNumber': _bigNthRoot,\n    'Array | Matrix': function ArrayMatrix(x) {\n      return nthRoot(x, 2);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse + sparse\n        return algorithm06(x, y, nthRoot);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, nthRoot, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // dense + sparse\n        return algorithm01(x, y, nthRoot, false);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, nthRoot);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return nthRoot(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return nthRoot(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return nthRoot(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, nthRoot, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, nthRoot, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse - scalar\n        return algorithm11(y, x, nthRoot, true);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      return algorithm14(y, x, nthRoot, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return nthRoot(matrix(x), y).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return nthRoot(x, matrix(y)).valueOf();\n    }\n  });\n  return nthRoot;\n  /**\n   * Calculate the nth root of a for BigNumbers, solve x^root == a\n   * https://rosettacode.org/wiki/Nth_root#JavaScript\n   * @param {BigNumber} a\n   * @param {BigNumber} root\n   * @private\n   */\n\n  function _bigNthRoot(a, root) {\n    var precision = _BigNumber.precision;\n\n    var Big = _BigNumber.clone({\n      precision: precision + 2\n    });\n\n    var zero = new _BigNumber(0);\n    var one = new Big(1);\n    var inv = root.isNegative();\n\n    if (inv) {\n      root = root.neg();\n    }\n\n    if (root.isZero()) {\n      throw new Error('Root must be non-zero');\n    }\n\n    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n      throw new Error('Root must be odd when a is negative.');\n    } // edge cases zero and infinity\n\n\n    if (a.isZero()) {\n      return inv ? new Big(Infinity) : 0;\n    }\n\n    if (!a.isFinite()) {\n      return inv ? zero : a;\n    }\n\n    var x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n\n    x = a.isNeg() ? x.neg() : x;\n    return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n  }\n});\nexport var createNthRootNumber = /* #__PURE__ */factory(name, ['typed'], function (_ref2) {\n  var typed = _ref2.typed;\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber\n  });\n});"]},"metadata":{},"sourceType":"module"}