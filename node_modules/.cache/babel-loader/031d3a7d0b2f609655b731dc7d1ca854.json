{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n} // function utils\n\n/**\n * Memoize a given function by caching the computed result.\n * The cache of a memoized function can be cleared by deleting the `cache`\n * property of the function.\n *\n * @param {function} fn                     The function to be memoized.\n *                                          Must be a pure function.\n * @param {function(args: Array)} [hasher]  A custom hash builder.\n *                                          Is JSON.stringify by default.\n * @return {function}                       Returns the memoized function\n */\n\n\nexport function memoize(fn, hasher) {\n  return function memoize() {\n    if (_typeof(memoize.cache) !== 'object') {\n      memoize.cache = {};\n    }\n\n    var args = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    var hash = hasher ? hasher(args) : JSON.stringify(args);\n\n    if (!(hash in memoize.cache)) {\n      memoize.cache[hash] = fn.apply(fn, args);\n    }\n\n    return memoize.cache[hash];\n  };\n}\n/**\n * Memoize a given function by caching all results and the arguments,\n * and comparing against the arguments of previous results before\n * executing again.\n * This is less performant than `memoize` which calculates a hash,\n * which is very fast to compare. Use `memoizeCompare` only when it is\n * not possible to create a unique serializable hash from the function\n * arguments.\n * The isEqual function must compare two sets of arguments\n * and return true when equal (can be a deep equality check for example).\n * @param {function} fn\n * @param {function(a: *, b: *) : boolean} isEqual\n * @returns {function}\n */\n\nexport function memoizeCompare(fn, isEqual) {\n  var memoize = function memoize() {\n    var args = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    for (var c = 0; c < memoize.cache.length; c++) {\n      var cached = memoize.cache[c];\n\n      if (isEqual(args, cached.args)) {\n        // TODO: move this cache entry to the top so recently used entries move up?\n        return cached.res;\n      }\n    }\n\n    var res = fn.apply(fn, args);\n    memoize.cache.unshift({\n      args: args,\n      res: res\n    });\n    return res;\n  };\n\n  memoize.cache = [];\n  return memoize;\n}\n/**\n * Find the maximum number of arguments expected by a typed function.\n * @param {function} fn   A typed function\n * @return {number} Returns the maximum number of expected arguments.\n *                  Returns -1 when no signatures where found on the function.\n */\n\nexport function maxArgumentCount(fn) {\n  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {\n    var count = (signature.match(/,/g) || []).length + 1;\n    return Math.max(args, count);\n  }, -1);\n}","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/utils/function.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","memoize","fn","hasher","cache","args","i","arguments","length","hash","JSON","stringify","apply","memoizeCompare","isEqual","c","cached","res","unshift","maxArgumentCount","Object","keys","signatures","reduce","signature","count","match","Math","max"],"mappings":"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","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// function utils\n\n/**\n * Memoize a given function by caching the computed result.\n * The cache of a memoized function can be cleared by deleting the `cache`\n * property of the function.\n *\n * @param {function} fn                     The function to be memoized.\n *                                          Must be a pure function.\n * @param {function(args: Array)} [hasher]  A custom hash builder.\n *                                          Is JSON.stringify by default.\n * @return {function}                       Returns the memoized function\n */\nexport function memoize(fn, hasher) {\n  return function memoize() {\n    if (_typeof(memoize.cache) !== 'object') {\n      memoize.cache = {};\n    }\n\n    var args = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    var hash = hasher ? hasher(args) : JSON.stringify(args);\n\n    if (!(hash in memoize.cache)) {\n      memoize.cache[hash] = fn.apply(fn, args);\n    }\n\n    return memoize.cache[hash];\n  };\n}\n/**\n * Memoize a given function by caching all results and the arguments,\n * and comparing against the arguments of previous results before\n * executing again.\n * This is less performant than `memoize` which calculates a hash,\n * which is very fast to compare. Use `memoizeCompare` only when it is\n * not possible to create a unique serializable hash from the function\n * arguments.\n * The isEqual function must compare two sets of arguments\n * and return true when equal (can be a deep equality check for example).\n * @param {function} fn\n * @param {function(a: *, b: *) : boolean} isEqual\n * @returns {function}\n */\n\nexport function memoizeCompare(fn, isEqual) {\n  var memoize = function memoize() {\n    var args = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    for (var c = 0; c < memoize.cache.length; c++) {\n      var cached = memoize.cache[c];\n\n      if (isEqual(args, cached.args)) {\n        // TODO: move this cache entry to the top so recently used entries move up?\n        return cached.res;\n      }\n    }\n\n    var res = fn.apply(fn, args);\n    memoize.cache.unshift({\n      args: args,\n      res: res\n    });\n    return res;\n  };\n\n  memoize.cache = [];\n  return memoize;\n}\n/**\n * Find the maximum number of arguments expected by a typed function.\n * @param {function} fn   A typed function\n * @return {number} Returns the maximum number of expected arguments.\n *                  Returns -1 when no signatures where found on the function.\n */\n\nexport function maxArgumentCount(fn) {\n  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {\n    var count = (signature.match(/,/g) || []).length + 1;\n    return Math.max(args, count);\n  }, -1);\n}"]},"metadata":{},"sourceType":"module"}