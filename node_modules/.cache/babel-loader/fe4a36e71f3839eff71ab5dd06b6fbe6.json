{"ast":null,"code":"import { factory } from '../../utils/factory';\nvar name = 'FibonacciHeap';\nvar dependencies = ['smaller', 'larger'];\nexport var createFibonacciHeapClass = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var smaller = _ref.smaller,\n      larger = _ref.larger;\n  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);\n  /**\n   * Fibonacci Heap implementation, used interally for Matrix math.\n   * @class FibonacciHeap\n   * @constructor FibonacciHeap\n   */\n\n  function FibonacciHeap() {\n    if (!(this instanceof FibonacciHeap)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // initialize fields\n\n\n    this._minimum = null;\n    this._size = 0;\n  }\n  /**\n   * Attach type information\n   */\n\n\n  FibonacciHeap.prototype.type = 'FibonacciHeap';\n  FibonacciHeap.prototype.isFibonacciHeap = true;\n  /**\n   * Inserts a new data element into the heap. No heap consolidation is\n   * performed at this time, the new node is simply inserted into the root\n   * list of this heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n\n  FibonacciHeap.prototype.insert = function (key, value) {\n    // create node\n    var node = {\n      key: key,\n      value: value,\n      degree: 0\n    }; // check we have a node in the minimum\n\n    if (this._minimum) {\n      // minimum node\n      var minimum = this._minimum; // update left & right of node\n\n      node.left = minimum;\n      node.right = minimum.right;\n      minimum.right = node;\n      node.right.left = node; // update minimum node in heap if needed\n\n      if (smaller(key, minimum.key)) {\n        // node has a smaller key, use it as minimum\n        this._minimum = node;\n      }\n    } else {\n      // set left & right\n      node.left = node;\n      node.right = node; // this is the first node\n\n      this._minimum = node;\n    } // increment number of nodes in heap\n\n\n    this._size++; // return node\n\n    return node;\n  };\n  /**\n   * Returns the number of nodes in heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n\n\n  FibonacciHeap.prototype.size = function () {\n    return this._size;\n  };\n  /**\n   * Removes all elements from this heap.\n   * @memberof FibonacciHeap\n   */\n\n\n  FibonacciHeap.prototype.clear = function () {\n    this._minimum = null;\n    this._size = 0;\n  };\n  /**\n   * Returns true if the heap is empty, otherwise false.\n   * @memberof FibonacciHeap\n   */\n\n\n  FibonacciHeap.prototype.isEmpty = function () {\n    return this._size === 0;\n  };\n  /**\n   * Extracts the node with minimum key from heap. Amortized running\n   * time: O(log n).\n   * @memberof FibonacciHeap\n   */\n\n\n  FibonacciHeap.prototype.extractMinimum = function () {\n    // node to remove\n    var node = this._minimum; // check we have a minimum\n\n    if (node === null) {\n      return node;\n    } // current minimum\n\n\n    var minimum = this._minimum; // get number of children\n\n    var numberOfChildren = node.degree; // pointer to the first child\n\n    var x = node.child; // for each child of node do...\n\n    while (numberOfChildren > 0) {\n      // store node in right side\n      var tempRight = x.right; // remove x from child list\n\n      x.left.right = x.right;\n      x.right.left = x.left; // add x to root list of heap\n\n      x.left = minimum;\n      x.right = minimum.right;\n      minimum.right = x;\n      x.right.left = x; // set Parent[x] to null\n\n      x.parent = null;\n      x = tempRight;\n      numberOfChildren--;\n    } // remove node from root list of heap\n\n\n    node.left.right = node.right;\n    node.right.left = node.left; // update minimum\n\n    if (node === node.right) {\n      // empty\n      minimum = null;\n    } else {\n      // update minimum\n      minimum = node.right; // we need to update the pointer to the root with minimum key\n\n      minimum = _findMinimumNode(minimum, this._size);\n    } // decrement size of heap\n\n\n    this._size--; // update minimum\n\n    this._minimum = minimum; // return node\n\n    return node;\n  };\n  /**\n   * Removes a node from the heap given the reference to the node. The trees\n   * in the heap will be consolidated, if necessary. This operation may fail\n   * to remove the correct element if there are nodes with key value -Infinity.\n   * Running time: O(log n) amortized.\n   * @memberof FibonacciHeap\n   */\n\n\n  FibonacciHeap.prototype.remove = function (node) {\n    // decrease key value\n    this._minimum = _decreaseKey(this._minimum, node, -1); // remove the smallest\n\n    this.extractMinimum();\n  };\n  /**\n   * Decreases the key value for a heap node, given the new value to take on.\n   * The structure of the heap may be changed and will not be consolidated.\n   * Running time: O(1) amortized.\n   * @memberof FibonacciHeap\n   */\n\n\n  function _decreaseKey(minimum, node, key) {\n    // set node key\n    node.key = key; // get parent node\n\n    var parent = node.parent;\n\n    if (parent && smaller(node.key, parent.key)) {\n      // remove node from parent\n      _cut(minimum, node, parent); // remove all nodes from parent to the root parent\n\n\n      _cascadingCut(minimum, parent);\n    } // update minimum node if needed\n\n\n    if (smaller(node.key, minimum.key)) {\n      minimum = node;\n    } // return minimum\n\n\n    return minimum;\n  }\n  /**\n   * The reverse of the link operation: removes node from the child list of parent.\n   * This method assumes that min is non-null. Running time: O(1).\n   * @memberof FibonacciHeap\n   */\n\n\n  function _cut(minimum, node, parent) {\n    // remove node from parent children and decrement Degree[parent]\n    node.left.right = node.right;\n    node.right.left = node.left;\n    parent.degree--; // reset y.child if necessary\n\n    if (parent.child === node) {\n      parent.child = node.right;\n    } // remove child if degree is 0\n\n\n    if (parent.degree === 0) {\n      parent.child = null;\n    } // add node to root list of heap\n\n\n    node.left = minimum;\n    node.right = minimum.right;\n    minimum.right = node;\n    node.right.left = node; // set parent[node] to null\n\n    node.parent = null; // set mark[node] to false\n\n    node.mark = false;\n  }\n  /**\n   * Performs a cascading cut operation. This cuts node from its parent and then\n   * does the same for its parent, and so on up the tree.\n   * Running time: O(log n); O(1) excluding the recursion.\n   * @memberof FibonacciHeap\n   */\n\n\n  function _cascadingCut(minimum, node) {\n    // store parent node\n    var parent = node.parent; // if there's a parent...\n\n    if (!parent) {\n      return;\n    } // if node is unmarked, set it marked\n\n\n    if (!node.mark) {\n      node.mark = true;\n    } else {\n      // it's marked, cut it from parent\n      _cut(minimum, node, parent); // cut its parent as well\n\n\n      _cascadingCut(parent);\n    }\n  }\n  /**\n   * Make the first node a child of the second one. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n\n\n  var _linkNodes = function _linkNodes(node, parent) {\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left; // make node a Child of parent\n\n    node.parent = parent;\n\n    if (!parent.child) {\n      parent.child = node;\n      node.right = node;\n      node.left = node;\n    } else {\n      node.left = parent.child;\n      node.right = parent.child.right;\n      parent.child.right = node;\n      node.right.left = node;\n    } // increase degree[parent]\n\n\n    parent.degree++; // set mark[node] false\n\n    node.mark = false;\n  };\n\n  function _findMinimumNode(minimum, size) {\n    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree\n    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1; // create list with initial capacity\n\n    var array = new Array(arraySize); // find the number of root nodes.\n\n    var numRoots = 0;\n    var x = minimum;\n\n    if (x) {\n      numRoots++;\n      x = x.right;\n\n      while (x !== minimum) {\n        numRoots++;\n        x = x.right;\n      }\n    } // vars\n\n\n    var y; // For each node in root list do...\n\n    while (numRoots > 0) {\n      // access this node's degree..\n      var d = x.degree; // get next node\n\n      var next = x.right; // check if there is a node already in array with the same degree\n\n      while (true) {\n        // get node with the same degree is any\n        y = array[d];\n\n        if (!y) {\n          break;\n        } // make one node with the same degree a child of the other, do this based on the key value.\n\n\n        if (larger(x.key, y.key)) {\n          var temp = y;\n          y = x;\n          x = temp;\n        } // make y a child of x\n\n\n        _linkNodes(y, x); // we have handled this degree, go to next one.\n\n\n        array[d] = null;\n        d++;\n      } // save this node for later when we might encounter another of the same degree.\n\n\n      array[d] = x; // move forward through list.\n\n      x = next;\n      numRoots--;\n    } // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].\n\n\n    minimum = null; // loop nodes in array\n\n    for (var i = 0; i < arraySize; i++) {\n      // get current node\n      y = array[i];\n\n      if (!y) {\n        continue;\n      } // check if we have a linked list\n\n\n      if (minimum) {\n        // First remove node from root list.\n        y.left.right = y.right;\n        y.right.left = y.left; // now add to root list, again.\n\n        y.left = minimum;\n        y.right = minimum.right;\n        minimum.right = y;\n        y.right.left = y; // check if this is a new min.\n\n        if (smaller(y.key, minimum.key)) {\n          minimum = y;\n        }\n      } else {\n        minimum = y;\n      }\n    }\n\n    return minimum;\n  }\n\n  return FibonacciHeap;\n}, {\n  isClass: true\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/type/matrix/FibonacciHeap.js"],"names":["factory","name","dependencies","createFibonacciHeapClass","_ref","smaller","larger","oneOverLogPhi","Math","log","sqrt","FibonacciHeap","SyntaxError","_minimum","_size","prototype","type","isFibonacciHeap","insert","key","value","node","degree","minimum","left","right","size","clear","isEmpty","extractMinimum","numberOfChildren","x","child","tempRight","parent","_findMinimumNode","remove","_decreaseKey","_cut","_cascadingCut","mark","_linkNodes","arraySize","floor","array","Array","numRoots","y","d","next","temp","i","isClass"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,eAAX;AACA,IAAIC,YAAY,GAAG,CAAC,SAAD,EAAY,QAAZ,CAAnB;AACA,OAAO,IAAIC,wBAAwB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAC/F,MAAIC,OAAO,GAAGD,IAAI,CAACC,OAAnB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAEA,MAAIC,aAAa,GAAG,MAAMC,IAAI,CAACC,GAAL,CAAS,CAAC,MAAMD,IAAI,CAACE,IAAL,CAAU,GAAV,CAAP,IAAyB,GAAlC,CAA1B;AACA;;;;;;AAMA,WAASC,aAAT,GAAyB;AACvB,QAAI,EAAE,gBAAgBA,aAAlB,CAAJ,EAAsC;AACpC,YAAM,IAAIC,WAAJ,CAAgB,kDAAhB,CAAN;AACD,KAHsB,CAGrB;;;AAGF,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,KAAL,GAAa,CAAb;AACD;AACD;;;;;AAKAH,EAAAA,aAAa,CAACI,SAAd,CAAwBC,IAAxB,GAA+B,eAA/B;AACAL,EAAAA,aAAa,CAACI,SAAd,CAAwBE,eAAxB,GAA0C,IAA1C;AACA;;;;;;;AAOAN,EAAAA,aAAa,CAACI,SAAd,CAAwBG,MAAxB,GAAiC,UAAUC,GAAV,EAAeC,KAAf,EAAsB;AACrD;AACA,QAAIC,IAAI,GAAG;AACTF,MAAAA,GAAG,EAAEA,GADI;AAETC,MAAAA,KAAK,EAAEA,KAFE;AAGTE,MAAAA,MAAM,EAAE;AAHC,KAAX,CAFqD,CAMlD;;AAEH,QAAI,KAAKT,QAAT,EAAmB;AACjB;AACA,UAAIU,OAAO,GAAG,KAAKV,QAAnB,CAFiB,CAEY;;AAE7BQ,MAAAA,IAAI,CAACG,IAAL,GAAYD,OAAZ;AACAF,MAAAA,IAAI,CAACI,KAAL,GAAaF,OAAO,CAACE,KAArB;AACAF,MAAAA,OAAO,CAACE,KAAR,GAAgBJ,IAAhB;AACAA,MAAAA,IAAI,CAACI,KAAL,CAAWD,IAAX,GAAkBH,IAAlB,CAPiB,CAOO;;AAExB,UAAIhB,OAAO,CAACc,GAAD,EAAMI,OAAO,CAACJ,GAAd,CAAX,EAA+B;AAC7B;AACA,aAAKN,QAAL,GAAgBQ,IAAhB;AACD;AACF,KAbD,MAaO;AACL;AACAA,MAAAA,IAAI,CAACG,IAAL,GAAYH,IAAZ;AACAA,MAAAA,IAAI,CAACI,KAAL,GAAaJ,IAAb,CAHK,CAGc;;AAEnB,WAAKR,QAAL,GAAgBQ,IAAhB;AACD,KA3BoD,CA2BnD;;;AAGF,SAAKP,KAAL,GA9BqD,CA8BvC;;AAEd,WAAOO,IAAP;AACD,GAjCD;AAkCA;;;;;;AAMAV,EAAAA,aAAa,CAACI,SAAd,CAAwBW,IAAxB,GAA+B,YAAY;AACzC,WAAO,KAAKZ,KAAZ;AACD,GAFD;AAGA;;;;;;AAMAH,EAAAA,aAAa,CAACI,SAAd,CAAwBY,KAAxB,GAAgC,YAAY;AAC1C,SAAKd,QAAL,GAAgB,IAAhB;AACA,SAAKC,KAAL,GAAa,CAAb;AACD,GAHD;AAIA;;;;;;AAMAH,EAAAA,aAAa,CAACI,SAAd,CAAwBa,OAAxB,GAAkC,YAAY;AAC5C,WAAO,KAAKd,KAAL,KAAe,CAAtB;AACD,GAFD;AAGA;;;;;;;AAOAH,EAAAA,aAAa,CAACI,SAAd,CAAwBc,cAAxB,GAAyC,YAAY;AACnD;AACA,QAAIR,IAAI,GAAG,KAAKR,QAAhB,CAFmD,CAEzB;;AAE1B,QAAIQ,IAAI,KAAK,IAAb,EAAmB;AACjB,aAAOA,IAAP;AACD,KANkD,CAMjD;;;AAGF,QAAIE,OAAO,GAAG,KAAKV,QAAnB,CATmD,CAStB;;AAE7B,QAAIiB,gBAAgB,GAAGT,IAAI,CAACC,MAA5B,CAXmD,CAWf;;AAEpC,QAAIS,CAAC,GAAGV,IAAI,CAACW,KAAb,CAbmD,CAa/B;;AAEpB,WAAOF,gBAAgB,GAAG,CAA1B,EAA6B;AAC3B;AACA,UAAIG,SAAS,GAAGF,CAAC,CAACN,KAAlB,CAF2B,CAEF;;AAEzBM,MAAAA,CAAC,CAACP,IAAF,CAAOC,KAAP,GAAeM,CAAC,CAACN,KAAjB;AACAM,MAAAA,CAAC,CAACN,KAAF,CAAQD,IAAR,GAAeO,CAAC,CAACP,IAAjB,CAL2B,CAKJ;;AAEvBO,MAAAA,CAAC,CAACP,IAAF,GAASD,OAAT;AACAQ,MAAAA,CAAC,CAACN,KAAF,GAAUF,OAAO,CAACE,KAAlB;AACAF,MAAAA,OAAO,CAACE,KAAR,GAAgBM,CAAhB;AACAA,MAAAA,CAAC,CAACN,KAAF,CAAQD,IAAR,GAAeO,CAAf,CAV2B,CAUT;;AAElBA,MAAAA,CAAC,CAACG,MAAF,GAAW,IAAX;AACAH,MAAAA,CAAC,GAAGE,SAAJ;AACAH,MAAAA,gBAAgB;AACjB,KA9BkD,CA8BjD;;;AAGFT,IAAAA,IAAI,CAACG,IAAL,CAAUC,KAAV,GAAkBJ,IAAI,CAACI,KAAvB;AACAJ,IAAAA,IAAI,CAACI,KAAL,CAAWD,IAAX,GAAkBH,IAAI,CAACG,IAAvB,CAlCmD,CAkCtB;;AAE7B,QAAIH,IAAI,KAAKA,IAAI,CAACI,KAAlB,EAAyB;AACvB;AACAF,MAAAA,OAAO,GAAG,IAAV;AACD,KAHD,MAGO;AACL;AACAA,MAAAA,OAAO,GAAGF,IAAI,CAACI,KAAf,CAFK,CAEiB;;AAEtBF,MAAAA,OAAO,GAAGY,gBAAgB,CAACZ,OAAD,EAAU,KAAKT,KAAf,CAA1B;AACD,KA5CkD,CA4CjD;;;AAGF,SAAKA,KAAL,GA/CmD,CA+CrC;;AAEd,SAAKD,QAAL,GAAgBU,OAAhB,CAjDmD,CAiD1B;;AAEzB,WAAOF,IAAP;AACD,GApDD;AAqDA;;;;;;;;;AASAV,EAAAA,aAAa,CAACI,SAAd,CAAwBqB,MAAxB,GAAiC,UAAUf,IAAV,EAAgB;AAC/C;AACA,SAAKR,QAAL,GAAgBwB,YAAY,CAAC,KAAKxB,QAAN,EAAgBQ,IAAhB,EAAsB,CAAC,CAAvB,CAA5B,CAF+C,CAEQ;;AAEvD,SAAKQ,cAAL;AACD,GALD;AAMA;;;;;;;;AAQA,WAASQ,YAAT,CAAsBd,OAAtB,EAA+BF,IAA/B,EAAqCF,GAArC,EAA0C;AACxC;AACAE,IAAAA,IAAI,CAACF,GAAL,GAAWA,GAAX,CAFwC,CAExB;;AAEhB,QAAIe,MAAM,GAAGb,IAAI,CAACa,MAAlB;;AAEA,QAAIA,MAAM,IAAI7B,OAAO,CAACgB,IAAI,CAACF,GAAN,EAAWe,MAAM,CAACf,GAAlB,CAArB,EAA6C;AAC3C;AACAmB,MAAAA,IAAI,CAACf,OAAD,EAAUF,IAAV,EAAgBa,MAAhB,CAAJ,CAF2C,CAEd;;;AAG7BK,MAAAA,aAAa,CAAChB,OAAD,EAAUW,MAAV,CAAb;AACD,KAZuC,CAYtC;;;AAGF,QAAI7B,OAAO,CAACgB,IAAI,CAACF,GAAN,EAAWI,OAAO,CAACJ,GAAnB,CAAX,EAAoC;AAClCI,MAAAA,OAAO,GAAGF,IAAV;AACD,KAjBuC,CAiBtC;;;AAGF,WAAOE,OAAP;AACD;AACD;;;;;;;AAOA,WAASe,IAAT,CAAcf,OAAd,EAAuBF,IAAvB,EAA6Ba,MAA7B,EAAqC;AACnC;AACAb,IAAAA,IAAI,CAACG,IAAL,CAAUC,KAAV,GAAkBJ,IAAI,CAACI,KAAvB;AACAJ,IAAAA,IAAI,CAACI,KAAL,CAAWD,IAAX,GAAkBH,IAAI,CAACG,IAAvB;AACAU,IAAAA,MAAM,CAACZ,MAAP,GAJmC,CAIlB;;AAEjB,QAAIY,MAAM,CAACF,KAAP,KAAiBX,IAArB,EAA2B;AACzBa,MAAAA,MAAM,CAACF,KAAP,GAAeX,IAAI,CAACI,KAApB;AACD,KARkC,CAQjC;;;AAGF,QAAIS,MAAM,CAACZ,MAAP,KAAkB,CAAtB,EAAyB;AACvBY,MAAAA,MAAM,CAACF,KAAP,GAAe,IAAf;AACD,KAbkC,CAajC;;;AAGFX,IAAAA,IAAI,CAACG,IAAL,GAAYD,OAAZ;AACAF,IAAAA,IAAI,CAACI,KAAL,GAAaF,OAAO,CAACE,KAArB;AACAF,IAAAA,OAAO,CAACE,KAAR,GAAgBJ,IAAhB;AACAA,IAAAA,IAAI,CAACI,KAAL,CAAWD,IAAX,GAAkBH,IAAlB,CAnBmC,CAmBX;;AAExBA,IAAAA,IAAI,CAACa,MAAL,GAAc,IAAd,CArBmC,CAqBf;;AAEpBb,IAAAA,IAAI,CAACmB,IAAL,GAAY,KAAZ;AACD;AACD;;;;;;;;AAQA,WAASD,aAAT,CAAuBhB,OAAvB,EAAgCF,IAAhC,EAAsC;AACpC;AACA,QAAIa,MAAM,GAAGb,IAAI,CAACa,MAAlB,CAFoC,CAEV;;AAE1B,QAAI,CAACA,MAAL,EAAa;AACX;AACD,KANmC,CAMlC;;;AAGF,QAAI,CAACb,IAAI,CAACmB,IAAV,EAAgB;AACdnB,MAAAA,IAAI,CAACmB,IAAL,GAAY,IAAZ;AACD,KAFD,MAEO;AACL;AACAF,MAAAA,IAAI,CAACf,OAAD,EAAUF,IAAV,EAAgBa,MAAhB,CAAJ,CAFK,CAEwB;;;AAG7BK,MAAAA,aAAa,CAACL,MAAD,CAAb;AACD;AACF;AACD;;;;;;AAMA,MAAIO,UAAU,GAAG,SAASA,UAAT,CAAoBpB,IAApB,EAA0Ba,MAA1B,EAAkC;AACjD;AACAb,IAAAA,IAAI,CAACG,IAAL,CAAUC,KAAV,GAAkBJ,IAAI,CAACI,KAAvB;AACAJ,IAAAA,IAAI,CAACI,KAAL,CAAWD,IAAX,GAAkBH,IAAI,CAACG,IAAvB,CAHiD,CAGpB;;AAE7BH,IAAAA,IAAI,CAACa,MAAL,GAAcA,MAAd;;AAEA,QAAI,CAACA,MAAM,CAACF,KAAZ,EAAmB;AACjBE,MAAAA,MAAM,CAACF,KAAP,GAAeX,IAAf;AACAA,MAAAA,IAAI,CAACI,KAAL,GAAaJ,IAAb;AACAA,MAAAA,IAAI,CAACG,IAAL,GAAYH,IAAZ;AACD,KAJD,MAIO;AACLA,MAAAA,IAAI,CAACG,IAAL,GAAYU,MAAM,CAACF,KAAnB;AACAX,MAAAA,IAAI,CAACI,KAAL,GAAaS,MAAM,CAACF,KAAP,CAAaP,KAA1B;AACAS,MAAAA,MAAM,CAACF,KAAP,CAAaP,KAAb,GAAqBJ,IAArB;AACAA,MAAAA,IAAI,CAACI,KAAL,CAAWD,IAAX,GAAkBH,IAAlB;AACD,KAhBgD,CAgB/C;;;AAGFa,IAAAA,MAAM,CAACZ,MAAP,GAnBiD,CAmBhC;;AAEjBD,IAAAA,IAAI,CAACmB,IAAL,GAAY,KAAZ;AACD,GAtBD;;AAwBA,WAASL,gBAAT,CAA0BZ,OAA1B,EAAmCG,IAAnC,EAAyC;AACvC;AACA,QAAIgB,SAAS,GAAGlC,IAAI,CAACmC,KAAL,CAAWnC,IAAI,CAACC,GAAL,CAASiB,IAAT,IAAiBnB,aAA5B,IAA6C,CAA7D,CAFuC,CAEyB;;AAEhE,QAAIqC,KAAK,GAAG,IAAIC,KAAJ,CAAUH,SAAV,CAAZ,CAJuC,CAIL;;AAElC,QAAII,QAAQ,GAAG,CAAf;AACA,QAAIf,CAAC,GAAGR,OAAR;;AAEA,QAAIQ,CAAJ,EAAO;AACLe,MAAAA,QAAQ;AACRf,MAAAA,CAAC,GAAGA,CAAC,CAACN,KAAN;;AAEA,aAAOM,CAAC,KAAKR,OAAb,EAAsB;AACpBuB,QAAAA,QAAQ;AACRf,QAAAA,CAAC,GAAGA,CAAC,CAACN,KAAN;AACD;AACF,KAjBsC,CAiBrC;;;AAGF,QAAIsB,CAAJ,CApBuC,CAoBhC;;AAEP,WAAOD,QAAQ,GAAG,CAAlB,EAAqB;AACnB;AACA,UAAIE,CAAC,GAAGjB,CAAC,CAACT,MAAV,CAFmB,CAED;;AAElB,UAAI2B,IAAI,GAAGlB,CAAC,CAACN,KAAb,CAJmB,CAIC;;AAEpB,aAAO,IAAP,EAAa;AACX;AACAsB,QAAAA,CAAC,GAAGH,KAAK,CAACI,CAAD,CAAT;;AAEA,YAAI,CAACD,CAAL,EAAQ;AACN;AACD,SANU,CAMT;;;AAGF,YAAIzC,MAAM,CAACyB,CAAC,CAACZ,GAAH,EAAQ4B,CAAC,CAAC5B,GAAV,CAAV,EAA0B;AACxB,cAAI+B,IAAI,GAAGH,CAAX;AACAA,UAAAA,CAAC,GAAGhB,CAAJ;AACAA,UAAAA,CAAC,GAAGmB,IAAJ;AACD,SAbU,CAaT;;;AAGFT,QAAAA,UAAU,CAACM,CAAD,EAAIhB,CAAJ,CAAV,CAhBW,CAgBO;;;AAGlBa,QAAAA,KAAK,CAACI,CAAD,CAAL,GAAW,IAAX;AACAA,QAAAA,CAAC;AACF,OA3BkB,CA2BjB;;;AAGFJ,MAAAA,KAAK,CAACI,CAAD,CAAL,GAAWjB,CAAX,CA9BmB,CA8BL;;AAEdA,MAAAA,CAAC,GAAGkB,IAAJ;AACAH,MAAAA,QAAQ;AACT,KAxDsC,CAwDrC;;;AAGFvB,IAAAA,OAAO,GAAG,IAAV,CA3DuC,CA2DvB;;AAEhB,SAAK,IAAI4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,SAApB,EAA+BS,CAAC,EAAhC,EAAoC;AAClC;AACAJ,MAAAA,CAAC,GAAGH,KAAK,CAACO,CAAD,CAAT;;AAEA,UAAI,CAACJ,CAAL,EAAQ;AACN;AACD,OANiC,CAMhC;;;AAGF,UAAIxB,OAAJ,EAAa;AACX;AACAwB,QAAAA,CAAC,CAACvB,IAAF,CAAOC,KAAP,GAAesB,CAAC,CAACtB,KAAjB;AACAsB,QAAAA,CAAC,CAACtB,KAAF,CAAQD,IAAR,GAAeuB,CAAC,CAACvB,IAAjB,CAHW,CAGY;;AAEvBuB,QAAAA,CAAC,CAACvB,IAAF,GAASD,OAAT;AACAwB,QAAAA,CAAC,CAACtB,KAAF,GAAUF,OAAO,CAACE,KAAlB;AACAF,QAAAA,OAAO,CAACE,KAAR,GAAgBsB,CAAhB;AACAA,QAAAA,CAAC,CAACtB,KAAF,CAAQD,IAAR,GAAeuB,CAAf,CARW,CAQO;;AAElB,YAAI1C,OAAO,CAAC0C,CAAC,CAAC5B,GAAH,EAAQI,OAAO,CAACJ,GAAhB,CAAX,EAAiC;AAC/BI,UAAAA,OAAO,GAAGwB,CAAV;AACD;AACF,OAbD,MAaO;AACLxB,QAAAA,OAAO,GAAGwB,CAAV;AACD;AACF;;AAED,WAAOxB,OAAP;AACD;;AAED,SAAOZ,aAAP;AACD,CA7X2D,EA6XzD;AACDyC,EAAAA,OAAO,EAAE;AADR,CA7XyD,CAArD","sourcesContent":["import { factory } from '../../utils/factory';\nvar name = 'FibonacciHeap';\nvar dependencies = ['smaller', 'larger'];\nexport var createFibonacciHeapClass = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var smaller = _ref.smaller,\n      larger = _ref.larger;\n  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);\n  /**\n   * Fibonacci Heap implementation, used interally for Matrix math.\n   * @class FibonacciHeap\n   * @constructor FibonacciHeap\n   */\n\n  function FibonacciHeap() {\n    if (!(this instanceof FibonacciHeap)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // initialize fields\n\n\n    this._minimum = null;\n    this._size = 0;\n  }\n  /**\n   * Attach type information\n   */\n\n\n  FibonacciHeap.prototype.type = 'FibonacciHeap';\n  FibonacciHeap.prototype.isFibonacciHeap = true;\n  /**\n   * Inserts a new data element into the heap. No heap consolidation is\n   * performed at this time, the new node is simply inserted into the root\n   * list of this heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n\n  FibonacciHeap.prototype.insert = function (key, value) {\n    // create node\n    var node = {\n      key: key,\n      value: value,\n      degree: 0\n    }; // check we have a node in the minimum\n\n    if (this._minimum) {\n      // minimum node\n      var minimum = this._minimum; // update left & right of node\n\n      node.left = minimum;\n      node.right = minimum.right;\n      minimum.right = node;\n      node.right.left = node; // update minimum node in heap if needed\n\n      if (smaller(key, minimum.key)) {\n        // node has a smaller key, use it as minimum\n        this._minimum = node;\n      }\n    } else {\n      // set left & right\n      node.left = node;\n      node.right = node; // this is the first node\n\n      this._minimum = node;\n    } // increment number of nodes in heap\n\n\n    this._size++; // return node\n\n    return node;\n  };\n  /**\n   * Returns the number of nodes in heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n\n\n  FibonacciHeap.prototype.size = function () {\n    return this._size;\n  };\n  /**\n   * Removes all elements from this heap.\n   * @memberof FibonacciHeap\n   */\n\n\n  FibonacciHeap.prototype.clear = function () {\n    this._minimum = null;\n    this._size = 0;\n  };\n  /**\n   * Returns true if the heap is empty, otherwise false.\n   * @memberof FibonacciHeap\n   */\n\n\n  FibonacciHeap.prototype.isEmpty = function () {\n    return this._size === 0;\n  };\n  /**\n   * Extracts the node with minimum key from heap. Amortized running\n   * time: O(log n).\n   * @memberof FibonacciHeap\n   */\n\n\n  FibonacciHeap.prototype.extractMinimum = function () {\n    // node to remove\n    var node = this._minimum; // check we have a minimum\n\n    if (node === null) {\n      return node;\n    } // current minimum\n\n\n    var minimum = this._minimum; // get number of children\n\n    var numberOfChildren = node.degree; // pointer to the first child\n\n    var x = node.child; // for each child of node do...\n\n    while (numberOfChildren > 0) {\n      // store node in right side\n      var tempRight = x.right; // remove x from child list\n\n      x.left.right = x.right;\n      x.right.left = x.left; // add x to root list of heap\n\n      x.left = minimum;\n      x.right = minimum.right;\n      minimum.right = x;\n      x.right.left = x; // set Parent[x] to null\n\n      x.parent = null;\n      x = tempRight;\n      numberOfChildren--;\n    } // remove node from root list of heap\n\n\n    node.left.right = node.right;\n    node.right.left = node.left; // update minimum\n\n    if (node === node.right) {\n      // empty\n      minimum = null;\n    } else {\n      // update minimum\n      minimum = node.right; // we need to update the pointer to the root with minimum key\n\n      minimum = _findMinimumNode(minimum, this._size);\n    } // decrement size of heap\n\n\n    this._size--; // update minimum\n\n    this._minimum = minimum; // return node\n\n    return node;\n  };\n  /**\n   * Removes a node from the heap given the reference to the node. The trees\n   * in the heap will be consolidated, if necessary. This operation may fail\n   * to remove the correct element if there are nodes with key value -Infinity.\n   * Running time: O(log n) amortized.\n   * @memberof FibonacciHeap\n   */\n\n\n  FibonacciHeap.prototype.remove = function (node) {\n    // decrease key value\n    this._minimum = _decreaseKey(this._minimum, node, -1); // remove the smallest\n\n    this.extractMinimum();\n  };\n  /**\n   * Decreases the key value for a heap node, given the new value to take on.\n   * The structure of the heap may be changed and will not be consolidated.\n   * Running time: O(1) amortized.\n   * @memberof FibonacciHeap\n   */\n\n\n  function _decreaseKey(minimum, node, key) {\n    // set node key\n    node.key = key; // get parent node\n\n    var parent = node.parent;\n\n    if (parent && smaller(node.key, parent.key)) {\n      // remove node from parent\n      _cut(minimum, node, parent); // remove all nodes from parent to the root parent\n\n\n      _cascadingCut(minimum, parent);\n    } // update minimum node if needed\n\n\n    if (smaller(node.key, minimum.key)) {\n      minimum = node;\n    } // return minimum\n\n\n    return minimum;\n  }\n  /**\n   * The reverse of the link operation: removes node from the child list of parent.\n   * This method assumes that min is non-null. Running time: O(1).\n   * @memberof FibonacciHeap\n   */\n\n\n  function _cut(minimum, node, parent) {\n    // remove node from parent children and decrement Degree[parent]\n    node.left.right = node.right;\n    node.right.left = node.left;\n    parent.degree--; // reset y.child if necessary\n\n    if (parent.child === node) {\n      parent.child = node.right;\n    } // remove child if degree is 0\n\n\n    if (parent.degree === 0) {\n      parent.child = null;\n    } // add node to root list of heap\n\n\n    node.left = minimum;\n    node.right = minimum.right;\n    minimum.right = node;\n    node.right.left = node; // set parent[node] to null\n\n    node.parent = null; // set mark[node] to false\n\n    node.mark = false;\n  }\n  /**\n   * Performs a cascading cut operation. This cuts node from its parent and then\n   * does the same for its parent, and so on up the tree.\n   * Running time: O(log n); O(1) excluding the recursion.\n   * @memberof FibonacciHeap\n   */\n\n\n  function _cascadingCut(minimum, node) {\n    // store parent node\n    var parent = node.parent; // if there's a parent...\n\n    if (!parent) {\n      return;\n    } // if node is unmarked, set it marked\n\n\n    if (!node.mark) {\n      node.mark = true;\n    } else {\n      // it's marked, cut it from parent\n      _cut(minimum, node, parent); // cut its parent as well\n\n\n      _cascadingCut(parent);\n    }\n  }\n  /**\n   * Make the first node a child of the second one. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n\n\n  var _linkNodes = function _linkNodes(node, parent) {\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left; // make node a Child of parent\n\n    node.parent = parent;\n\n    if (!parent.child) {\n      parent.child = node;\n      node.right = node;\n      node.left = node;\n    } else {\n      node.left = parent.child;\n      node.right = parent.child.right;\n      parent.child.right = node;\n      node.right.left = node;\n    } // increase degree[parent]\n\n\n    parent.degree++; // set mark[node] false\n\n    node.mark = false;\n  };\n\n  function _findMinimumNode(minimum, size) {\n    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree\n    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1; // create list with initial capacity\n\n    var array = new Array(arraySize); // find the number of root nodes.\n\n    var numRoots = 0;\n    var x = minimum;\n\n    if (x) {\n      numRoots++;\n      x = x.right;\n\n      while (x !== minimum) {\n        numRoots++;\n        x = x.right;\n      }\n    } // vars\n\n\n    var y; // For each node in root list do...\n\n    while (numRoots > 0) {\n      // access this node's degree..\n      var d = x.degree; // get next node\n\n      var next = x.right; // check if there is a node already in array with the same degree\n\n      while (true) {\n        // get node with the same degree is any\n        y = array[d];\n\n        if (!y) {\n          break;\n        } // make one node with the same degree a child of the other, do this based on the key value.\n\n\n        if (larger(x.key, y.key)) {\n          var temp = y;\n          y = x;\n          x = temp;\n        } // make y a child of x\n\n\n        _linkNodes(y, x); // we have handled this degree, go to next one.\n\n\n        array[d] = null;\n        d++;\n      } // save this node for later when we might encounter another of the same degree.\n\n\n      array[d] = x; // move forward through list.\n\n      x = next;\n      numRoots--;\n    } // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].\n\n\n    minimum = null; // loop nodes in array\n\n    for (var i = 0; i < arraySize; i++) {\n      // get current node\n      y = array[i];\n\n      if (!y) {\n        continue;\n      } // check if we have a linked list\n\n\n      if (minimum) {\n        // First remove node from root list.\n        y.left.right = y.right;\n        y.right.left = y.left; // now add to root list, again.\n\n        y.left = minimum;\n        y.right = minimum.right;\n        minimum.right = y;\n        y.right.left = y; // check if this is a new min.\n\n        if (smaller(y.key, minimum.key)) {\n          minimum = y;\n        }\n      } else {\n        minimum = y;\n      }\n    }\n\n    return minimum;\n  }\n\n  return FibonacciHeap;\n}, {\n  isClass: true\n});"]},"metadata":{},"sourceType":"module"}