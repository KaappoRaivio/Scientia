{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { isInteger } from '../../utils/number';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { roundNumber } from '../../plain/number';\nvar NO_INT = 'Number of decimals in function round must be an integer';\nvar name = 'round';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];\nexport var createRound = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      zeros = _ref.zeros,\n      BigNumber = _ref.BigNumber,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm12 = createAlgorithm12({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Round a value towards the nearest integer.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *\n   * Examples:\n   *\n   *    math.round(3.2)              // returns number 3\n   *    math.round(3.8)              // returns number 4\n   *    math.round(-4.2)             // returns number -4\n   *    math.round(-4.7)             // returns number -5\n   *    math.round(math.pi, 3)       // returns number 3.142\n   *    math.round(123.45678, 2)     // returns number 123.46\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.round(c)                // returns Complex 3 - 3i\n   *\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  var round = typed(name, _objectSpread({}, roundNumberSignatures, {\n    Complex: function Complex(x) {\n      return x.round();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      var _n = n.toNumber();\n\n      return x.round(_n);\n    },\n    'number, BigNumber': function numberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return new BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.toDecimalPlaces(n.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return x.round();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since round(0) = 0\n      return deepMap(x, round, true);\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, round, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, round, false);\n    },\n    'number | Complex | BigNumber, SparseMatrix': function numberComplexBigNumberSparseMatrix(x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm12(y, x, round, true);\n    },\n    'number | Complex | BigNumber, DenseMatrix': function numberComplexBigNumberDenseMatrix(x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm14(y, x, round, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, round, false).valueOf();\n    },\n    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, round, true).valueOf();\n    }\n  }));\n  return round;\n});\nvar roundNumberSignatures = {\n  number: roundNumber,\n  'number, number': function numberNumber(x, n) {\n    if (!isInteger(n)) {\n      throw new TypeError(NO_INT);\n    }\n\n    if (n < 0 || n > 15) {\n      throw new Error('Number of decimals in function round must be in te range of 0-15');\n    }\n\n    return roundNumber(x, n);\n  }\n};\nexport var createRoundNumber = /* #__PURE__ */factory(name, ['typed'], function (_ref2) {\n  var typed = _ref2.typed;\n  return typed(name, roundNumberSignatures);\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/arithmetic/round.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","factory","deepMap","isInteger","createAlgorithm11","createAlgorithm12","createAlgorithm14","roundNumber","NO_INT","name","dependencies","createRound","_ref","typed","matrix","equalScalar","zeros","BigNumber","DenseMatrix","algorithm11","algorithm12","algorithm14","round","roundNumberSignatures","Complex","x","ComplexNumber","n","TypeError","ComplexBigNumber","_n","toNumber","numberBigNumber","toDecimalPlaces","BigNumberBigNumber","Fraction","FractionNumber","ArrayMatrix","SparseMatrixNumberBigNumber","y","DenseMatrixNumberBigNumber","numberComplexBigNumberSparseMatrix","size","storage","numberComplexBigNumberDenseMatrix","ArrayNumberBigNumber","valueOf","numberComplexBigNumberArray","number","numberNumber","Error","createRoundNumber","_ref2"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { isInteger } from '../../utils/number';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { roundNumber } from '../../plain/number';\nvar NO_INT = 'Number of decimals in function round must be an integer';\nvar name = 'round';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];\nexport var createRound = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      zeros = _ref.zeros,\n      BigNumber = _ref.BigNumber,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm12 = createAlgorithm12({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Round a value towards the nearest integer.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *\n   * Examples:\n   *\n   *    math.round(3.2)              // returns number 3\n   *    math.round(3.8)              // returns number 4\n   *    math.round(-4.2)             // returns number -4\n   *    math.round(-4.7)             // returns number -5\n   *    math.round(math.pi, 3)       // returns number 3.142\n   *    math.round(123.45678, 2)     // returns number 123.46\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.round(c)                // returns Complex 3 - 3i\n   *\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  var round = typed(name, _objectSpread({}, roundNumberSignatures, {\n    Complex: function Complex(x) {\n      return x.round();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      var _n = n.toNumber();\n\n      return x.round(_n);\n    },\n    'number, BigNumber': function numberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return new BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.toDecimalPlaces(n.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return x.round();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since round(0) = 0\n      return deepMap(x, round, true);\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, round, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, round, false);\n    },\n    'number | Complex | BigNumber, SparseMatrix': function numberComplexBigNumberSparseMatrix(x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm12(y, x, round, true);\n    },\n    'number | Complex | BigNumber, DenseMatrix': function numberComplexBigNumberDenseMatrix(x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm14(y, x, round, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, round, false).valueOf();\n    },\n    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, round, true).valueOf();\n    }\n  }));\n  return round;\n});\nvar roundNumberSignatures = {\n  number: roundNumber,\n  'number, number': function numberNumber(x, n) {\n    if (!isInteger(n)) {\n      throw new TypeError(NO_INT);\n    }\n\n    if (n < 0 || n > 15) {\n      throw new Error('Number of decimals in function round must be in te range of 0-15');\n    }\n\n    return roundNumber(x, n);\n  }\n};\nexport var createRoundNumber = /* #__PURE__ */factory(name, ['typed'], function (_ref2) {\n  var typed = _ref2.typed;\n  return typed(name, roundNumberSignatures);\n});"]},"metadata":{},"sourceType":"module"}