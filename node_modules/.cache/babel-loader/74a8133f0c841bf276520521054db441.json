{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport { errorTransform } from '../../transform/utils/errorTransform';\nimport { setSafeProperty } from '../../../utils/customs';\nexport function assignFactory(_ref) {\n  var subset = _ref.subset,\n      matrix = _ref.matrix;\n  /**\n   * Replace part of an object:\n   *\n   * - Assign a property to an object\n   * - Replace a part of a string\n   * - Replace a matrix subset\n   *\n   * @param {Object | Array | Matrix | string} object\n   * @param {Index} index\n   * @param {*} value\n   * @return {Object | Array | Matrix | string} Returns the original object\n   *                                            except in case of a string\n   */\n  // TODO: change assign to return the value instead of the object\n\n  return function assign(object, index, value) {\n    try {\n      if (Array.isArray(object)) {\n        // we use matrix.subset here instead of the function subset because we must not clone the contents\n        return matrix(object).subset(index, value).valueOf();\n      } else if (object && typeof object.subset === 'function') {\n        // Matrix\n        return object.subset(index, value);\n      } else if (typeof object === 'string') {\n        // TODO: move setStringSubset into a separate util file, use that\n        return subset(object, index, value);\n      } else if (_typeof(object) === 'object') {\n        if (!index.isObjectProperty()) {\n          throw TypeError('Cannot apply a numeric index as object property');\n        }\n\n        setSafeProperty(object, index.getObjectProperty(), value);\n        return object;\n      } else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    } catch (err) {\n      throw errorTransform(err);\n    }\n  };\n}","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/expression/node/utils/assign.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","errorTransform","setSafeProperty","assignFactory","_ref","subset","matrix","assign","object","index","value","Array","isArray","valueOf","isObjectProperty","TypeError","getObjectProperty","err"],"mappings":"AAAA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE;;AAA2B,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA/D,EAAyE;AAAEH,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAO,OAAOA,GAAd;AAAoB,KAAtD;AAAyD,GAApI,MAA0I;AAAED,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;AAA+H,KAAjK;AAAoK;;AAAC,SAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;;AAE1X,SAASK,cAAT,QAA+B,sCAA/B;AACA,SAASC,eAAT,QAAgC,wBAAhC;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAClC,MAAIC,MAAM,GAAGD,IAAI,CAACC,MAAlB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAGA;;;;;;;;;;;;;AAaA;;AACA,SAAO,SAASC,MAAT,CAAgBC,MAAhB,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAsC;AAC3C,QAAI;AACF,UAAIC,KAAK,CAACC,OAAN,CAAcJ,MAAd,CAAJ,EAA2B;AACzB;AACA,eAAOF,MAAM,CAACE,MAAD,CAAN,CAAeH,MAAf,CAAsBI,KAAtB,EAA6BC,KAA7B,EAAoCG,OAApC,EAAP;AACD,OAHD,MAGO,IAAIL,MAAM,IAAI,OAAOA,MAAM,CAACH,MAAd,KAAyB,UAAvC,EAAmD;AACxD;AACA,eAAOG,MAAM,CAACH,MAAP,CAAcI,KAAd,EAAqBC,KAArB,CAAP;AACD,OAHM,MAGA,IAAI,OAAOF,MAAP,KAAkB,QAAtB,EAAgC;AACrC;AACA,eAAOH,MAAM,CAACG,MAAD,EAASC,KAAT,EAAgBC,KAAhB,CAAb;AACD,OAHM,MAGA,IAAIf,OAAO,CAACa,MAAD,CAAP,KAAoB,QAAxB,EAAkC;AACvC,YAAI,CAACC,KAAK,CAACK,gBAAN,EAAL,EAA+B;AAC7B,gBAAMC,SAAS,CAAC,iDAAD,CAAf;AACD;;AAEDb,QAAAA,eAAe,CAACM,MAAD,EAASC,KAAK,CAACO,iBAAN,EAAT,EAAoCN,KAApC,CAAf;AACA,eAAOF,MAAP;AACD,OAPM,MAOA;AACL,cAAM,IAAIO,SAAJ,CAAc,gDAAd,CAAN;AACD;AACF,KApBD,CAoBE,OAAOE,GAAP,EAAY;AACZ,YAAMhB,cAAc,CAACgB,GAAD,CAApB;AACD;AACF,GAxBD;AAyBD","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { errorTransform } from '../../transform/utils/errorTransform';\nimport { setSafeProperty } from '../../../utils/customs';\nexport function assignFactory(_ref) {\n  var subset = _ref.subset,\n      matrix = _ref.matrix;\n\n  /**\n   * Replace part of an object:\n   *\n   * - Assign a property to an object\n   * - Replace a part of a string\n   * - Replace a matrix subset\n   *\n   * @param {Object | Array | Matrix | string} object\n   * @param {Index} index\n   * @param {*} value\n   * @return {Object | Array | Matrix | string} Returns the original object\n   *                                            except in case of a string\n   */\n  // TODO: change assign to return the value instead of the object\n  return function assign(object, index, value) {\n    try {\n      if (Array.isArray(object)) {\n        // we use matrix.subset here instead of the function subset because we must not clone the contents\n        return matrix(object).subset(index, value).valueOf();\n      } else if (object && typeof object.subset === 'function') {\n        // Matrix\n        return object.subset(index, value);\n      } else if (typeof object === 'string') {\n        // TODO: move setStringSubset into a separate util file, use that\n        return subset(object, index, value);\n      } else if (_typeof(object) === 'object') {\n        if (!index.isObjectProperty()) {\n          throw TypeError('Cannot apply a numeric index as object property');\n        }\n\n        setSafeProperty(object, index.getObjectProperty(), value);\n        return object;\n      } else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    } catch (err) {\n      throw errorTransform(err);\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}