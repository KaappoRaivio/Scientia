{"ast":null,"code":"import { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm07 } from '../../type/matrix/utils/algorithm07';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { factory } from '../../utils/factory';\nimport { xorNumber } from '../../plain/number';\nvar name = 'xor';\nvar dependencies = ['typed', 'matrix', 'DenseMatrix'];\nexport var createXor = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm03 = createAlgorithm03({\n    typed: typed\n  });\n  var algorithm07 = createAlgorithm07({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm12 = createAlgorithm12({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.xor(x, y)\n   *\n   * Examples:\n   *\n   *    math.xor(2, 4)   // returns false\n   *\n   *    a = [2, 0, 0]\n   *    b = [2, 7, 0]\n   *    c = 0\n   *\n   *    math.xor(a, b)   // returns [false, true, false]\n   *    math.xor(a, c)   // returns [true, false, false]\n   *\n   * See also:\n   *\n   *    and, not, or\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one and only one input is defined with a nonzero/nonempty value.\n   */\n\n  var xor = typed(name, {\n    'number, number': xorNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return xor(x.value || 0, y.value || 0);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, xor);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, xor, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, xor, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, xor);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return xor(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return xor(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return xor(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, xor, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, xor, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, xor, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, xor, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, xor, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, xor, true).valueOf();\n    }\n  });\n  return xor;\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/logical/xor.js"],"names":["createAlgorithm03","createAlgorithm07","createAlgorithm12","createAlgorithm13","createAlgorithm14","factory","xorNumber","name","dependencies","createXor","_ref","typed","matrix","DenseMatrix","algorithm03","algorithm07","algorithm12","algorithm13","algorithm14","xor","ComplexComplex","x","y","re","im","BigNumberBigNumber","isZero","isNaN","UnitUnit","value","SparseMatrixSparseMatrix","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixAny","DenseMatrixAny","anySparseMatrix","anyDenseMatrix","ArrayAny","anyArray"],"mappings":"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","sourcesContent":["import { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm07 } from '../../type/matrix/utils/algorithm07';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { factory } from '../../utils/factory';\nimport { xorNumber } from '../../plain/number';\nvar name = 'xor';\nvar dependencies = ['typed', 'matrix', 'DenseMatrix'];\nexport var createXor = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm03 = createAlgorithm03({\n    typed: typed\n  });\n  var algorithm07 = createAlgorithm07({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm12 = createAlgorithm12({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.xor(x, y)\n   *\n   * Examples:\n   *\n   *    math.xor(2, 4)   // returns false\n   *\n   *    a = [2, 0, 0]\n   *    b = [2, 7, 0]\n   *    c = 0\n   *\n   *    math.xor(a, b)   // returns [false, true, false]\n   *    math.xor(a, c)   // returns [true, false, false]\n   *\n   * See also:\n   *\n   *    and, not, or\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one and only one input is defined with a nonzero/nonempty value.\n   */\n\n  var xor = typed(name, {\n    'number, number': xorNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return xor(x.value || 0, y.value || 0);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, xor);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, xor, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, xor, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, xor);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return xor(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return xor(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return xor(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, xor, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, xor, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, xor, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, xor, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, xor, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, xor, true).valueOf();\n    }\n  });\n  return xor;\n});"]},"metadata":{},"sourceType":"module"}