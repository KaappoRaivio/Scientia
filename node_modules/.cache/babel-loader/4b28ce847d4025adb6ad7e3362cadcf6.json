{"ast":null,"code":"import { factory } from '../../utils/factory';\nvar name = 'deepEqual';\nvar dependencies = ['typed', 'equal'];\nexport var createDeepEqual = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equal = _ref.equal;\n  /**\n   * Test element wise whether two matrices are equal.\n   * The function accepts both matrices and scalar values.\n   *\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.deepEqual(x, y)\n   *\n   * Examples:\n   *\n   *    math.deepEqual(2, 4)   // returns false\n   *\n   *    a = [2, 5, 1]\n   *    b = [2, 7, 1]\n   *\n   *    math.deepEqual(a, b)   // returns false\n   *    math.equal(a, b)       // returns [true, false, true]\n   *\n   * See also:\n   *\n   *    equal, unequal\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns true when the input matrices have the same size and each of their elements is equal.\n   */\n\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      return _deepEqual(x.valueOf(), y.valueOf());\n    }\n  });\n  /**\n   * Test whether two arrays have the same size and all elements are equal\n   * @param {Array | *} x\n   * @param {Array | *} y\n   * @return {boolean} Returns true if both arrays are deep equal\n   */\n\n  function _deepEqual(x, y) {\n    if (Array.isArray(x)) {\n      if (Array.isArray(y)) {\n        var len = x.length;\n\n        if (len !== y.length) {\n          return false;\n        }\n\n        for (var i = 0; i < len; i++) {\n          if (!_deepEqual(x[i], y[i])) {\n            return false;\n          }\n        }\n\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      if (Array.isArray(y)) {\n        return false;\n      } else {\n        return equal(x, y);\n      }\n    }\n  }\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/relational/deepEqual.js"],"names":["factory","name","dependencies","createDeepEqual","_ref","typed","equal","anyAny","x","y","_deepEqual","valueOf","Array","isArray","len","length","i"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,OAAV,CAAnB;AACA,OAAO,IAAIC,eAAe,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACtF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,KAAK,GAAGF,IAAI,CAACE,KADjB;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAAOD,KAAK,CAACJ,IAAD,EAAO;AACjB,gBAAY,SAASM,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AAChC,aAAOC,UAAU,CAACF,CAAC,CAACG,OAAF,EAAD,EAAcF,CAAC,CAACE,OAAF,EAAd,CAAjB;AACD;AAHgB,GAAP,CAAZ;AAKA;;;;;;;AAOA,WAASD,UAAT,CAAoBF,CAApB,EAAuBC,CAAvB,EAA0B;AACxB,QAAIG,KAAK,CAACC,OAAN,CAAcL,CAAd,CAAJ,EAAsB;AACpB,UAAII,KAAK,CAACC,OAAN,CAAcJ,CAAd,CAAJ,EAAsB;AACpB,YAAIK,GAAG,GAAGN,CAAC,CAACO,MAAZ;;AAEA,YAAID,GAAG,KAAKL,CAAC,CAACM,MAAd,EAAsB;AACpB,iBAAO,KAAP;AACD;;AAED,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;AAC5B,cAAI,CAACN,UAAU,CAACF,CAAC,CAACQ,CAAD,CAAF,EAAOP,CAAC,CAACO,CAAD,CAAR,CAAf,EAA6B;AAC3B,mBAAO,KAAP;AACD;AACF;;AAED,eAAO,IAAP;AACD,OAdD,MAcO;AACL,eAAO,KAAP;AACD;AACF,KAlBD,MAkBO;AACL,UAAIJ,KAAK,CAACC,OAAN,CAAcJ,CAAd,CAAJ,EAAsB;AACpB,eAAO,KAAP;AACD,OAFD,MAEO;AACL,eAAOH,KAAK,CAACE,CAAD,EAAIC,CAAJ,CAAZ;AACD;AACF;AACF;AACF,CAxEkD,CAA5C","sourcesContent":["import { factory } from '../../utils/factory';\nvar name = 'deepEqual';\nvar dependencies = ['typed', 'equal'];\nexport var createDeepEqual = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equal = _ref.equal;\n\n  /**\n   * Test element wise whether two matrices are equal.\n   * The function accepts both matrices and scalar values.\n   *\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.deepEqual(x, y)\n   *\n   * Examples:\n   *\n   *    math.deepEqual(2, 4)   // returns false\n   *\n   *    a = [2, 5, 1]\n   *    b = [2, 7, 1]\n   *\n   *    math.deepEqual(a, b)   // returns false\n   *    math.equal(a, b)       // returns [true, false, true]\n   *\n   * See also:\n   *\n   *    equal, unequal\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns true when the input matrices have the same size and each of their elements is equal.\n   */\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      return _deepEqual(x.valueOf(), y.valueOf());\n    }\n  });\n  /**\n   * Test whether two arrays have the same size and all elements are equal\n   * @param {Array | *} x\n   * @param {Array | *} y\n   * @return {boolean} Returns true if both arrays are deep equal\n   */\n\n  function _deepEqual(x, y) {\n    if (Array.isArray(x)) {\n      if (Array.isArray(y)) {\n        var len = x.length;\n\n        if (len !== y.length) {\n          return false;\n        }\n\n        for (var i = 0; i < len; i++) {\n          if (!_deepEqual(x[i], y[i])) {\n            return false;\n          }\n        }\n\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      if (Array.isArray(y)) {\n        return false;\n      } else {\n        return equal(x, y);\n      }\n    }\n  }\n});"]},"metadata":{},"sourceType":"module"}