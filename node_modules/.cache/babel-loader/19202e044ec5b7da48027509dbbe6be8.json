{"ast":null,"code":"import { flatten, generalize, identify } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nvar name = 'setDifference';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetDifference = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index,\n      DenseMatrix = _ref.DenseMatrix;\n  /**\n   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setDifference(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]\n   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setSymDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The difference of two (multi)sets\n   */\n\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      var result;\n\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty-anything=empty\n        result = [];\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything-empty=anything\n        return flatten(a1.toArray());\n      } else {\n        var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n        var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n        result = [];\n        var inb2;\n\n        for (var i = 0; i < b1.length; i++) {\n          inb2 = false;\n\n          for (var j = 0; j < b2.length; j++) {\n            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n              // the identifier is always a decimal int\n              inb2 = true;\n              break;\n            }\n          }\n\n          if (!inb2) {\n            result.push(b1[i]);\n          }\n        }\n      } // return an array, if both inputs were arrays\n\n\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return generalize(result);\n      } // return a matrix otherwise\n\n\n      return new DenseMatrix(generalize(result));\n    }\n  });\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/set/setDifference.js"],"names":["flatten","generalize","identify","factory","name","dependencies","createSetDifference","_ref","typed","size","subset","compareNatural","Index","DenseMatrix","ArrayMatrixArrayMatrix","a1","a2","result","toArray","b1","Array","isArray","sort","b2","inb2","i","length","j","value","identifier","push"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,UAAlB,EAA8BC,QAA9B,QAA8C,mBAA9C;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,eAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,EAA4B,gBAA5B,EAA8C,OAA9C,EAAuD,aAAvD,CAAnB;AACA,OAAO,IAAIC,mBAAmB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAC1F,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,IAAI,GAAGF,IAAI,CAACE,IADhB;AAAA,MAEIC,MAAM,GAAGH,IAAI,CAACG,MAFlB;AAAA,MAGIC,cAAc,GAAGJ,IAAI,CAACI,cAH1B;AAAA,MAIIC,KAAK,GAAGL,IAAI,CAACK,KAJjB;AAAA,MAKIC,WAAW,GAAGN,IAAI,CAACM,WALvB;AAOA;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAAOL,KAAK,CAACJ,IAAD,EAAO;AACjB,sCAAkC,SAASU,sBAAT,CAAgCC,EAAhC,EAAoCC,EAApC,EAAwC;AACxE,UAAIC,MAAJ;;AAEA,UAAIP,MAAM,CAACD,IAAI,CAACM,EAAD,CAAL,EAAW,IAAIH,KAAJ,CAAU,CAAV,CAAX,CAAN,KAAmC,CAAvC,EAA0C;AACxC;AACAK,QAAAA,MAAM,GAAG,EAAT;AACD,OAHD,MAGO,IAAIP,MAAM,CAACD,IAAI,CAACO,EAAD,CAAL,EAAW,IAAIJ,KAAJ,CAAU,CAAV,CAAX,CAAN,KAAmC,CAAvC,EAA0C;AAC/C;AACA,eAAOZ,OAAO,CAACe,EAAE,CAACG,OAAH,EAAD,CAAd;AACD,OAHM,MAGA;AACL,YAAIC,EAAE,GAAGjB,QAAQ,CAACF,OAAO,CAACoB,KAAK,CAACC,OAAN,CAAcN,EAAd,IAAoBA,EAApB,GAAyBA,EAAE,CAACG,OAAH,EAA1B,CAAP,CAA+CI,IAA/C,CAAoDX,cAApD,CAAD,CAAjB;AACA,YAAIY,EAAE,GAAGrB,QAAQ,CAACF,OAAO,CAACoB,KAAK,CAACC,OAAN,CAAcL,EAAd,IAAoBA,EAApB,GAAyBA,EAAE,CAACE,OAAH,EAA1B,CAAP,CAA+CI,IAA/C,CAAoDX,cAApD,CAAD,CAAjB;AACAM,QAAAA,MAAM,GAAG,EAAT;AACA,YAAIO,IAAJ;;AAEA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,EAAE,CAACO,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAClCD,UAAAA,IAAI,GAAG,KAAP;;AAEA,eAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,EAAE,CAACG,MAAvB,EAA+BC,CAAC,EAAhC,EAAoC;AAClC,gBAAIhB,cAAc,CAACQ,EAAE,CAACM,CAAD,CAAF,CAAMG,KAAP,EAAcL,EAAE,CAACI,CAAD,CAAF,CAAMC,KAApB,CAAd,KAA6C,CAA7C,IAAkDT,EAAE,CAACM,CAAD,CAAF,CAAMI,UAAN,KAAqBN,EAAE,CAACI,CAAD,CAAF,CAAME,UAAjF,EAA6F;AAC3F;AACAL,cAAAA,IAAI,GAAG,IAAP;AACA;AACD;AACF;;AAED,cAAI,CAACA,IAAL,EAAW;AACTP,YAAAA,MAAM,CAACa,IAAP,CAAYX,EAAE,CAACM,CAAD,CAAd;AACD;AACF;AACF,OA9BuE,CA8BtE;;;AAGF,UAAIL,KAAK,CAACC,OAAN,CAAcN,EAAd,KAAqBK,KAAK,CAACC,OAAN,CAAcL,EAAd,CAAzB,EAA4C;AAC1C,eAAOf,UAAU,CAACgB,MAAD,CAAjB;AACD,OAnCuE,CAmCtE;;;AAGF,aAAO,IAAIJ,WAAJ,CAAgBZ,UAAU,CAACgB,MAAD,CAA1B,CAAP;AACD;AAxCgB,GAAP,CAAZ;AA0CD,CAvEsD,CAAhD","sourcesContent":["import { flatten, generalize, identify } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nvar name = 'setDifference';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];\nexport var createSetDifference = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index,\n      DenseMatrix = _ref.DenseMatrix;\n\n  /**\n   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setDifference(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]\n   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setSymDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {Array | Matrix}    The difference of two (multi)sets\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      var result;\n\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty-anything=empty\n        result = [];\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything-empty=anything\n        return flatten(a1.toArray());\n      } else {\n        var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n        var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n        result = [];\n        var inb2;\n\n        for (var i = 0; i < b1.length; i++) {\n          inb2 = false;\n\n          for (var j = 0; j < b2.length; j++) {\n            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n              // the identifier is always a decimal int\n              inb2 = true;\n              break;\n            }\n          }\n\n          if (!inb2) {\n            result.push(b1[i]);\n          }\n        }\n      } // return an array, if both inputs were arrays\n\n\n      if (Array.isArray(a1) && Array.isArray(a2)) {\n        return generalize(result);\n      } // return a matrix otherwise\n\n\n      return new DenseMatrix(generalize(result));\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}