{"ast":null,"code":"import { isChain } from '../../utils/is';\nimport { format } from '../../utils/string';\nimport { hasOwnProperty, lazy } from '../../utils/object';\nimport { factory } from '../../utils/factory';\nvar name = 'Chain';\nvar dependencies = ['?on', 'math'];\nexport var createChainClass = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var on = _ref.on,\n      math = _ref.math;\n  /**\n   * @constructor Chain\n   * Wrap any value in a chain, allowing to perform chained operations on\n   * the value.\n   *\n   * All methods available in the math.js library can be called upon the chain,\n   * and then will be evaluated with the value itself as first argument.\n   * The chain can be closed by executing chain.done(), which will return\n   * the final value.\n   *\n   * The Chain has a number of special functions:\n   * - done()             Finalize the chained operation and return the\n   *                      chain's value.\n   * - valueOf()          The same as done()\n   * - toString()         Returns a string representation of the chain's value.\n   *\n   * @param {*} [value]\n   */\n\n  function Chain(value) {\n    if (!(this instanceof Chain)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (isChain(value)) {\n      this.value = value.value;\n    } else {\n      this.value = value;\n    }\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Chain.prototype.type = 'Chain';\n  Chain.prototype.isChain = true;\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method valueOf()\n   * @returns {*} value\n   */\n\n  Chain.prototype.done = function () {\n    return this.value;\n  };\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method done()\n   * @returns {*} value\n   */\n\n\n  Chain.prototype.valueOf = function () {\n    return this.value;\n  };\n  /**\n   * Get a string representation of the value in the chain\n   * @returns {string}\n   */\n\n\n  Chain.prototype.toString = function () {\n    return format(this.value);\n  };\n  /**\n   * Get a JSON representation of the chain\n   * @returns {Object}\n   */\n\n\n  Chain.prototype.toJSON = function () {\n    return {\n      mathjs: 'Chain',\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate a Chain from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"Chain\", value: ...}`,\n   *                       where mathjs is optional\n   * @returns {Chain}\n   */\n\n\n  Chain.fromJSON = function (json) {\n    return new Chain(json.value);\n  };\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {Function} fn      The function to be proxied\n   *                           If fn is no function, it is silently ignored.\n   * @private\n   */\n\n\n  function createProxy(name, fn) {\n    if (typeof fn === 'function') {\n      Chain.prototype[name] = chainify(fn);\n    }\n  }\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {function} resolver   The function resolving with the\n   *                              function to be proxied\n   * @private\n   */\n\n\n  function createLazyProxy(name, resolver) {\n    lazy(Chain.prototype, name, function outerResolver() {\n      var fn = resolver();\n\n      if (typeof fn === 'function') {\n        return chainify(fn);\n      }\n\n      return undefined; // if not a function, ignore\n    });\n  }\n  /**\n   * Make a function chainable\n   * @param {function} fn\n   * @return {Function} chain function\n   * @private\n   */\n\n\n  function chainify(fn) {\n    return function () {\n      var args = [this.value]; // `this` will be the context of a Chain instance\n\n      for (var i = 0; i < arguments.length; i++) {\n        args[i + 1] = arguments[i];\n      }\n\n      return new Chain(fn.apply(fn, args));\n    };\n  }\n  /**\n   * Create a proxy for a single method, or an object with multiple methods.\n   * Example usage:\n   *\n   *   Chain.createProxy('add', function add (x, y) {...})\n   *   Chain.createProxy({\n   *     add:      function add (x, y) {...},\n   *     subtract: function subtract (x, y) {...}\n   *   }\n   *\n   * @param {string | Object} arg0   A name (string), or an object with\n   *                                 functions\n   * @param {*} [arg1]               A function, when arg0 is a name\n   */\n\n\n  Chain.createProxy = function (arg0, arg1) {\n    if (typeof arg0 === 'string') {\n      // createProxy(name, value)\n      createProxy(arg0, arg1);\n    } else {\n      var _loop = function _loop(_name) {\n        if (hasOwnProperty(arg0, _name) && excludedNames[_name] === undefined) {\n          createLazyProxy(_name, function () {\n            return arg0[_name];\n          });\n        }\n      }; // createProxy(values)\n\n\n      for (var _name in arg0) {\n        _loop(_name);\n      }\n    }\n  };\n\n  var excludedNames = {\n    expression: true,\n    docs: true,\n    type: true,\n    classes: true,\n    json: true,\n    error: true,\n    isChain: true // conflicts with the property isChain of a Chain instance\n\n  }; // create proxy for everything that is in math.js\n\n  Chain.createProxy(math); // register on the import event, automatically add a proxy for every imported function.\n\n  if (on) {\n    on('import', function (name, resolver, path) {\n      if (!path) {\n        // an imported function (not a data type or something special)\n        createLazyProxy(name, resolver);\n      }\n    });\n  }\n\n  return Chain;\n}, {\n  isClass: true\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/type/chain/Chain.js"],"names":["isChain","format","hasOwnProperty","lazy","factory","name","dependencies","createChainClass","_ref","on","math","Chain","value","SyntaxError","prototype","type","done","valueOf","toString","toJSON","mathjs","fromJSON","json","createProxy","fn","chainify","createLazyProxy","resolver","outerResolver","undefined","args","i","arguments","length","apply","arg0","arg1","_loop","_name","excludedNames","expression","docs","classes","error","path","isClass"],"mappings":"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","sourcesContent":["import { isChain } from '../../utils/is';\nimport { format } from '../../utils/string';\nimport { hasOwnProperty, lazy } from '../../utils/object';\nimport { factory } from '../../utils/factory';\nvar name = 'Chain';\nvar dependencies = ['?on', 'math'];\nexport var createChainClass = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var on = _ref.on,\n      math = _ref.math;\n\n  /**\n   * @constructor Chain\n   * Wrap any value in a chain, allowing to perform chained operations on\n   * the value.\n   *\n   * All methods available in the math.js library can be called upon the chain,\n   * and then will be evaluated with the value itself as first argument.\n   * The chain can be closed by executing chain.done(), which will return\n   * the final value.\n   *\n   * The Chain has a number of special functions:\n   * - done()             Finalize the chained operation and return the\n   *                      chain's value.\n   * - valueOf()          The same as done()\n   * - toString()         Returns a string representation of the chain's value.\n   *\n   * @param {*} [value]\n   */\n  function Chain(value) {\n    if (!(this instanceof Chain)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (isChain(value)) {\n      this.value = value.value;\n    } else {\n      this.value = value;\n    }\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Chain.prototype.type = 'Chain';\n  Chain.prototype.isChain = true;\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method valueOf()\n   * @returns {*} value\n   */\n\n  Chain.prototype.done = function () {\n    return this.value;\n  };\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method done()\n   * @returns {*} value\n   */\n\n\n  Chain.prototype.valueOf = function () {\n    return this.value;\n  };\n  /**\n   * Get a string representation of the value in the chain\n   * @returns {string}\n   */\n\n\n  Chain.prototype.toString = function () {\n    return format(this.value);\n  };\n  /**\n   * Get a JSON representation of the chain\n   * @returns {Object}\n   */\n\n\n  Chain.prototype.toJSON = function () {\n    return {\n      mathjs: 'Chain',\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate a Chain from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"Chain\", value: ...}`,\n   *                       where mathjs is optional\n   * @returns {Chain}\n   */\n\n\n  Chain.fromJSON = function (json) {\n    return new Chain(json.value);\n  };\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {Function} fn      The function to be proxied\n   *                           If fn is no function, it is silently ignored.\n   * @private\n   */\n\n\n  function createProxy(name, fn) {\n    if (typeof fn === 'function') {\n      Chain.prototype[name] = chainify(fn);\n    }\n  }\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {function} resolver   The function resolving with the\n   *                              function to be proxied\n   * @private\n   */\n\n\n  function createLazyProxy(name, resolver) {\n    lazy(Chain.prototype, name, function outerResolver() {\n      var fn = resolver();\n\n      if (typeof fn === 'function') {\n        return chainify(fn);\n      }\n\n      return undefined; // if not a function, ignore\n    });\n  }\n  /**\n   * Make a function chainable\n   * @param {function} fn\n   * @return {Function} chain function\n   * @private\n   */\n\n\n  function chainify(fn) {\n    return function () {\n      var args = [this.value]; // `this` will be the context of a Chain instance\n\n      for (var i = 0; i < arguments.length; i++) {\n        args[i + 1] = arguments[i];\n      }\n\n      return new Chain(fn.apply(fn, args));\n    };\n  }\n  /**\n   * Create a proxy for a single method, or an object with multiple methods.\n   * Example usage:\n   *\n   *   Chain.createProxy('add', function add (x, y) {...})\n   *   Chain.createProxy({\n   *     add:      function add (x, y) {...},\n   *     subtract: function subtract (x, y) {...}\n   *   }\n   *\n   * @param {string | Object} arg0   A name (string), or an object with\n   *                                 functions\n   * @param {*} [arg1]               A function, when arg0 is a name\n   */\n\n\n  Chain.createProxy = function (arg0, arg1) {\n    if (typeof arg0 === 'string') {\n      // createProxy(name, value)\n      createProxy(arg0, arg1);\n    } else {\n      var _loop = function _loop(_name) {\n        if (hasOwnProperty(arg0, _name) && excludedNames[_name] === undefined) {\n          createLazyProxy(_name, function () {\n            return arg0[_name];\n          });\n        }\n      };\n\n      // createProxy(values)\n      for (var _name in arg0) {\n        _loop(_name);\n      }\n    }\n  };\n\n  var excludedNames = {\n    expression: true,\n    docs: true,\n    type: true,\n    classes: true,\n    json: true,\n    error: true,\n    isChain: true // conflicts with the property isChain of a Chain instance\n\n  }; // create proxy for everything that is in math.js\n\n  Chain.createProxy(math); // register on the import event, automatically add a proxy for every imported function.\n\n  if (on) {\n    on('import', function (name, resolver, path) {\n      if (!path) {\n        // an imported function (not a data type or something special)\n        createLazyProxy(name, resolver);\n      }\n    });\n  }\n\n  return Chain;\n}, {\n  isClass: true\n});"]},"metadata":{},"sourceType":"module"}