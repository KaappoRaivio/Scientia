{"ast":null,"code":"import { isInteger } from '../../utils/number';\nimport { product } from '../../utils/product';\nimport { factory } from '../../utils/factory';\nvar name = 'permutations';\nvar dependencies = ['typed', 'factorial'];\nexport var createPermutations = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      factorial = _ref.factorial;\n  /**\n   * Compute the number of ways of obtaining an ordered subset of `k` elements\n   * from a set of `n` elements.\n   *\n   * Permutations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.permutations(n)\n   *     math.permutations(n, k)\n   *\n   * Examples:\n   *\n   *    math.permutations(5)     // 120\n   *    math.permutations(5, 3)  // 60\n   *\n   * See also:\n   *\n   *    combinations, combinationsWithRep, factorial\n   *\n   * @param {number | BigNumber} n   The number of objects in total\n   * @param {number | BigNumber} [k] The number of objects in the subset\n   * @return {number | BigNumber}    The number of permutations\n   */\n\n  return typed(name, {\n    'number | BigNumber': factorial,\n    'number, number': function numberNumber(n, k) {\n      if (!isInteger(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n\n      if (!isInteger(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n\n      if (k > n) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      } // Permute n objects, k at a time\n\n\n      return product(n - k + 1, n);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var result, i;\n\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n\n      if (k.gt(n)) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      }\n\n      var one = n.mul(0).add(1);\n      result = one;\n\n      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {\n        result = result.times(i);\n      }\n\n      return result;\n    } // TODO: implement support for collection in permutations\n\n  });\n});\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\n\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/probability/permutations.js"],"names":["isInteger","product","factory","name","dependencies","createPermutations","_ref","typed","factorial","numberNumber","n","k","TypeError","BigNumberBigNumber","result","i","isPositiveInteger","gt","one","mul","add","minus","plus","lte","times","gte"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,cAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,CAAnB;AACA,OAAO,IAAIC,kBAAkB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACzF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,SAAS,GAAGF,IAAI,CAACE,SADrB;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAAOD,KAAK,CAACJ,IAAD,EAAO;AACjB,0BAAsBK,SADL;AAEjB,sBAAkB,SAASC,YAAT,CAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AAC5C,UAAI,CAACX,SAAS,CAACU,CAAD,CAAV,IAAiBA,CAAC,GAAG,CAAzB,EAA4B;AAC1B,cAAM,IAAIE,SAAJ,CAAc,0DAAd,CAAN;AACD;;AAED,UAAI,CAACZ,SAAS,CAACW,CAAD,CAAV,IAAiBA,CAAC,GAAG,CAAzB,EAA4B;AAC1B,cAAM,IAAIC,SAAJ,CAAc,0DAAd,CAAN;AACD;;AAED,UAAID,CAAC,GAAGD,CAAR,EAAW;AACT,cAAM,IAAIE,SAAJ,CAAc,kEAAd,CAAN;AACD,OAX2C,CAW1C;;;AAGF,aAAOX,OAAO,CAACS,CAAC,GAAGC,CAAJ,GAAQ,CAAT,EAAYD,CAAZ,CAAd;AACD,KAjBgB;AAkBjB,4BAAwB,SAASG,kBAAT,CAA4BH,CAA5B,EAA+BC,CAA/B,EAAkC;AACxD,UAAIG,MAAJ,EAAYC,CAAZ;;AAEA,UAAI,CAACC,iBAAiB,CAACN,CAAD,CAAlB,IAAyB,CAACM,iBAAiB,CAACL,CAAD,CAA/C,EAAoD;AAClD,cAAM,IAAIC,SAAJ,CAAc,0DAAd,CAAN;AACD;;AAED,UAAID,CAAC,CAACM,EAAF,CAAKP,CAAL,CAAJ,EAAa;AACX,cAAM,IAAIE,SAAJ,CAAc,kEAAd,CAAN;AACD;;AAED,UAAIM,GAAG,GAAGR,CAAC,CAACS,GAAF,CAAM,CAAN,EAASC,GAAT,CAAa,CAAb,CAAV;AACAN,MAAAA,MAAM,GAAGI,GAAT;;AAEA,WAAKH,CAAC,GAAGL,CAAC,CAACW,KAAF,CAAQV,CAAR,EAAWW,IAAX,CAAgB,CAAhB,CAAT,EAA6BP,CAAC,CAACQ,GAAF,CAAMb,CAAN,CAA7B,EAAuCK,CAAC,GAAGA,CAAC,CAACO,IAAF,CAAO,CAAP,CAA3C,EAAsD;AACpDR,QAAAA,MAAM,GAAGA,MAAM,CAACU,KAAP,CAAaT,CAAb,CAAT;AACD;;AAED,aAAOD,MAAP;AACD,KArCgB,CAqCf;;AArCe,GAAP,CAAZ;AAwCD,CArEqD,CAA/C;AAsEP;;;;;;AAMA,SAASE,iBAAT,CAA2BN,CAA3B,EAA8B;AAC5B,SAAOA,CAAC,CAACV,SAAF,MAAiBU,CAAC,CAACe,GAAF,CAAM,CAAN,CAAxB;AACD","sourcesContent":["import { isInteger } from '../../utils/number';\nimport { product } from '../../utils/product';\nimport { factory } from '../../utils/factory';\nvar name = 'permutations';\nvar dependencies = ['typed', 'factorial'];\nexport var createPermutations = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      factorial = _ref.factorial;\n\n  /**\n   * Compute the number of ways of obtaining an ordered subset of `k` elements\n   * from a set of `n` elements.\n   *\n   * Permutations only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *     math.permutations(n)\n   *     math.permutations(n, k)\n   *\n   * Examples:\n   *\n   *    math.permutations(5)     // 120\n   *    math.permutations(5, 3)  // 60\n   *\n   * See also:\n   *\n   *    combinations, combinationsWithRep, factorial\n   *\n   * @param {number | BigNumber} n   The number of objects in total\n   * @param {number | BigNumber} [k] The number of objects in the subset\n   * @return {number | BigNumber}    The number of permutations\n   */\n  return typed(name, {\n    'number | BigNumber': factorial,\n    'number, number': function numberNumber(n, k) {\n      if (!isInteger(n) || n < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n\n      if (!isInteger(k) || k < 0) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n\n      if (k > n) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      } // Permute n objects, k at a time\n\n\n      return product(n - k + 1, n);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {\n      var result, i;\n\n      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {\n        throw new TypeError('Positive integer value expected in function permutations');\n      }\n\n      if (k.gt(n)) {\n        throw new TypeError('second argument k must be less than or equal to first argument n');\n      }\n\n      var one = n.mul(0).add(1);\n      result = one;\n\n      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {\n        result = result.times(i);\n      }\n\n      return result;\n    } // TODO: implement support for collection in permutations\n\n  });\n});\n/**\n * Test whether BigNumber n is a positive integer\n * @param {BigNumber} n\n * @returns {boolean} isPositiveInteger\n */\n\nfunction isPositiveInteger(n) {\n  return n.isInteger() && n.gte(0);\n}"]},"metadata":{},"sourceType":"module"}