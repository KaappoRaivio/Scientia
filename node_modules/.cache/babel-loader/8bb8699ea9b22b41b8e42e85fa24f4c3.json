{"ast":null,"code":"import { factory } from '../../utils/factory';\nvar name = 'composition';\nvar dependencies = ['typed', 'addScalar', 'combinations', 'isNegative', 'isPositive', 'isInteger', 'larger'];\nexport var createComposition = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      addScalar = _ref.addScalar,\n      combinations = _ref.combinations,\n      isPositive = _ref.isPositive,\n      isNegative = _ref.isNegative,\n      isInteger = _ref.isInteger,\n      larger = _ref.larger;\n  /**\n   * The composition counts of n into k parts.\n   *\n   * composition only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *   math.composition(n, k)\n   *\n   * Examples:\n   *\n   *    math.composition(5, 3) // returns 6\n   *\n   * See also:\n   *\n   *    combinations\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.\n   */\n\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {\n        throw new TypeError('Positive integer value expected in function composition');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function composition');\n      }\n\n      return combinations(addScalar(n, -1), addScalar(k, -1));\n    }\n  });\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/combinatorics/composition.js"],"names":["factory","name","dependencies","createComposition","_ref","typed","addScalar","combinations","isPositive","isNegative","isInteger","larger","numberBigNumberNumberBigNumber","n","k","TypeError"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,aAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,EAAuB,cAAvB,EAAuC,YAAvC,EAAqD,YAArD,EAAmE,WAAnE,EAAgF,QAAhF,CAAnB;AACA,OAAO,IAAIC,iBAAiB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACxF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,SAAS,GAAGF,IAAI,CAACE,SADrB;AAAA,MAEIC,YAAY,GAAGH,IAAI,CAACG,YAFxB;AAAA,MAGIC,UAAU,GAAGJ,IAAI,CAACI,UAHtB;AAAA,MAIIC,UAAU,GAAGL,IAAI,CAACK,UAJtB;AAAA,MAKIC,SAAS,GAAGN,IAAI,CAACM,SALrB;AAAA,MAMIC,MAAM,GAAGP,IAAI,CAACO,MANlB;AAQA;;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAAON,KAAK,CAACJ,IAAD,EAAO;AACjB,8CAA0C,SAASW,8BAAT,CAAwCC,CAAxC,EAA2CC,CAA3C,EAA8C;AACtF,UAAI,CAACJ,SAAS,CAACG,CAAD,CAAV,IAAiB,CAACL,UAAU,CAACK,CAAD,CAA5B,IAAmC,CAACH,SAAS,CAACI,CAAD,CAA7C,IAAoD,CAACN,UAAU,CAACM,CAAD,CAAnE,EAAwE;AACtE,cAAM,IAAIC,SAAJ,CAAc,yDAAd,CAAN;AACD,OAFD,MAEO,IAAIJ,MAAM,CAACG,CAAD,EAAID,CAAJ,CAAV,EAAkB;AACvB,cAAM,IAAIE,SAAJ,CAAc,2DAAd,CAAN;AACD;;AAED,aAAOR,YAAY,CAACD,SAAS,CAACO,CAAD,EAAI,CAAC,CAAL,CAAV,EAAmBP,SAAS,CAACQ,CAAD,EAAI,CAAC,CAAL,CAA5B,CAAnB;AACD;AATgB,GAAP,CAAZ;AAWD,CA1CoD,CAA9C","sourcesContent":["import { factory } from '../../utils/factory';\nvar name = 'composition';\nvar dependencies = ['typed', 'addScalar', 'combinations', 'isNegative', 'isPositive', 'isInteger', 'larger'];\nexport var createComposition = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      addScalar = _ref.addScalar,\n      combinations = _ref.combinations,\n      isPositive = _ref.isPositive,\n      isNegative = _ref.isNegative,\n      isInteger = _ref.isInteger,\n      larger = _ref.larger;\n\n  /**\n   * The composition counts of n into k parts.\n   *\n   * composition only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   * Syntax:\n   *\n   *   math.composition(n, k)\n   *\n   * Examples:\n   *\n   *    math.composition(5, 3) // returns 6\n   *\n   * See also:\n   *\n   *    combinations\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.\n   */\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {\n        throw new TypeError('Positive integer value expected in function composition');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function composition');\n      }\n\n      return combinations(addScalar(n, -1), addScalar(k, -1));\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}