{"ast":null,"code":"import { factory } from '../../../utils/factory';\nimport { DimensionError } from '../../../error/DimensionError';\nvar name = 'algorithm13';\nvar dependencies = ['typed'];\nexport var createAlgorithm13 = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, Bij..z)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Matrix}   b                 The DenseMatrix instance (B)\n   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658\n   */\n\n  return function algorithm13(a, b, callback) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b arrays\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // c arrays\n\n    var csize = []; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // validate each one of the dimension sizes\n\n\n    for (var s = 0; s < asize.length; s++) {\n      // must match\n      if (asize[s] !== bsize[s]) {\n        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n      } // update dimension in c\n\n\n      csize[s] = asize[s];\n    } // datatype\n\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // populate cdata, iterate through dimensions\n\n\n    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : []; // c matrix\n\n    return a.createDenseMatrix({\n      data: cdata,\n      size: csize,\n      datatype: dt\n    });\n  }; // recursive function\n\n  function _iterate(f, level, s, n, av, bv) {\n    // initialize array for this level\n    var cv = []; // check we reach the last level\n\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = f(av[i], bv[i]);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);\n      }\n    }\n\n    return cv;\n  }\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/type/matrix/utils/algorithm13.js"],"names":["factory","DimensionError","name","dependencies","createAlgorithm13","_ref","typed","algorithm13","a","b","callback","adata","_data","asize","_size","adt","_datatype","bdata","bsize","bdt","csize","length","s","RangeError","dt","cf","find","cdata","_iterate","createDenseMatrix","data","size","datatype","f","level","n","av","bv","cv","i","j"],"mappings":"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","sourcesContent":["import { factory } from '../../../utils/factory';\nimport { DimensionError } from '../../../error/DimensionError';\nvar name = 'algorithm13';\nvar dependencies = ['typed'];\nexport var createAlgorithm13 = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, Bij..z)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Matrix}   b                 The DenseMatrix instance (B)\n   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658\n   */\n  return function algorithm13(a, b, callback) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b arrays\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // c arrays\n\n    var csize = []; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // validate each one of the dimension sizes\n\n\n    for (var s = 0; s < asize.length; s++) {\n      // must match\n      if (asize[s] !== bsize[s]) {\n        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n      } // update dimension in c\n\n\n      csize[s] = asize[s];\n    } // datatype\n\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // populate cdata, iterate through dimensions\n\n\n    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : []; // c matrix\n\n    return a.createDenseMatrix({\n      data: cdata,\n      size: csize,\n      datatype: dt\n    });\n  }; // recursive function\n\n  function _iterate(f, level, s, n, av, bv) {\n    // initialize array for this level\n    var cv = []; // check we reach the last level\n\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = f(av[i], bv[i]);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);\n      }\n    }\n\n    return cv;\n  }\n});"]},"metadata":{},"sourceType":"module"}