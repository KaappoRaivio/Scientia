{"ast":null,"code":"var _jsxFileName = \"/home/kaappo/testit/canvas/src/components/wind.js\";\nimport React from 'react';\nimport { mod } from \"mathjs\";\nimport NumberDisplay from \"/home/kaappo/testit/canvas/src/components/numberdisplay.js\";\nimport DrawHelper from './helpers';\n\nclass Wind extends React.Component {\n  componentDidMount() {\n    this.canvas = this.refs.canvas;\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.drawHelper = new DrawHelper(this.canvas, this.ctx);\n    this.origin = [this.canvas.width / 2, this.canvas.height / 2];\n    this.radius = this.canvas.width / 2.1;\n    const ctx = this.ctx;\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    ctx.beginPath();\n    ctx.arc(this.canvas.width / 2, this.canvas.height / 2, this.radius, 0, 2 * Math.PI);\n    const divisions = [[24, 10], [72, 5]];\n\n    for (const division of divisions) {\n      this.drawDivision(division[0], division[1], division[0] === 24);\n    }\n\n    ctx.closePath();\n    ctx.stroke();\n    this.drawCloseHaulMarks();\n    this.componentDidUpdate();\n  }\n\n  componentDidUpdate() {// const ctx = this.ctx;\n    // let divisions = [12, 36, 72];\n    // ctx.font = \"20px Courier\";\n    // for (let index = 0; index < divisions.length; index++) {\n    //     let division = divisions[index]\n    //     this.drawDivision(division, ((divisions.length - index + 1) / divisions.length) ** 2 * 15, index === 0);\n    // }\n  }\n\n  drawDivision(division, length, drawNumbers) {\n    for (let i = 0; i < division; i++) {\n      let baseAngle = 2 * Math.PI / division * i; // let angleOffset = this.props.heading * Math.PI / 180;\n\n      let angleOffset = 0;\n      console.log(this.origin, baseAngle + angleOffset, this.radius, length);\n      this.drawHelper.drawCompassLine(this.origin, baseAngle + angleOffset, this.radius, length);\n\n      if (drawNumbers) {\n        let angleText = baseAngle / Math.PI * 180 <= 180 ? mod(baseAngle / Math.PI * 180, 360) : mod(360 - baseAngle / Math.PI * 180, 360);\n        this.drawHelper.drawAngleText(this.origin, baseAngle + angleOffset, this.radius - length - 10, angleText.toFixed(0), false);\n      }\n    }\n  }\n\n  drawCloseHaulMarks() {\n    const ctx = this.ctx;\n    this.beginPath();\n    ctx.fillStyle = \"rgba(0, 255, 0, 0.5)\";\n    ctx.fillarc(this.canvas.width / 2, this.canvas.height / 2, this.radius - 2, -Math.PI / 2, -Math.PI / 4, false);\n    ctx.closePath(); // ctx.fill();\n  } // drawDivision(division, length, drawNumbers) {\n  //     for (let i = 0; i < division; i++) {\n  //         let baseAngle = 2 * Math.PI / division * i;\n  //         let angleOffset = -this.props.heading * Math.PI / 180;\n  //         this.drawHelper.drawCompassLine(this.origin, baseAngle + angleOffset, this.radius, length)\n  //         if (drawNumbers) {\n  //             let angleText = mod(baseAngle / Math.PI * 180, 360);\n  //             this.drawHelper.drawAngleText(this.origin, baseAngle + angleOffset, this.radius - length, angleText.toFixed(0))\n  //         }\n  //     }\n  // }\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      style: {\n        width: this.props.width + \"px\",\n        height: this.props.height + \"px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      className: \"compassRose\",\n      width: this.props.width,\n      height: this.props.height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default Wind;","map":{"version":3,"sources":["/home/kaappo/testit/canvas/src/components/wind.js"],"names":["React","mod","NumberDisplay","DrawHelper","Wind","Component","componentDidMount","canvas","refs","ctx","getContext","drawHelper","origin","width","height","radius","clearRect","beginPath","arc","Math","PI","divisions","division","drawDivision","closePath","stroke","drawCloseHaulMarks","componentDidUpdate","length","drawNumbers","i","baseAngle","angleOffset","console","log","drawCompassLine","angleText","drawAngleText","toFixed","fillStyle","fillarc","render","props"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,GAAT,QAAoB,QAApB;AACA,OAAOC,aAAP,MAA0B,4DAA1B;AACA,OAAOC,UAAP,MAAuB,WAAvB;;AAGA,MAAMC,IAAN,SAAmBJ,KAAK,CAACK,SAAzB,CAAmC;AAE/BC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,MAAL,GAAc,KAAKC,IAAL,CAAUD,MAAxB;AACA,SAAKE,GAAL,GAAW,KAAKF,MAAL,CAAYG,UAAZ,CAAuB,IAAvB,CAAX;AACA,SAAKC,UAAL,GAAkB,IAAIR,UAAJ,CAAe,KAAKI,MAApB,EAA4B,KAAKE,GAAjC,CAAlB;AAEA,SAAKG,MAAL,GAAc,CAAC,KAAKL,MAAL,CAAYM,KAAZ,GAAoB,CAArB,EAAwB,KAAKN,MAAL,CAAYO,MAAZ,GAAqB,CAA7C,CAAd;AACA,SAAKC,MAAL,GAAc,KAAKR,MAAL,CAAYM,KAAZ,GAAoB,GAAlC;AAEA,UAAMJ,GAAG,GAAG,KAAKA,GAAjB;AAEAA,IAAAA,GAAG,CAACO,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,KAAKT,MAAL,CAAYM,KAAhC,EAAuC,KAAKN,MAAL,CAAYO,MAAnD;AACAL,IAAAA,GAAG,CAACQ,SAAJ;AACAR,IAAAA,GAAG,CAACS,GAAJ,CAAQ,KAAKX,MAAL,CAAYM,KAAZ,GAAoB,CAA5B,EAA+B,KAAKN,MAAL,CAAYO,MAAZ,GAAqB,CAApD,EAAuD,KAAKC,MAA5D,EAAoE,CAApE,EAAuE,IAAII,IAAI,CAACC,EAAhF;AAEA,UAAMC,SAAS,GAAG,CAAC,CAAC,EAAD,EAAK,EAAL,CAAD,EAAW,CAAC,EAAD,EAAK,CAAL,CAAX,CAAlB;;AACA,SAAK,MAAMC,QAAX,IAAuBD,SAAvB,EAAkC;AAC9B,WAAKE,YAAL,CAAkBD,QAAQ,CAAC,CAAD,CAA1B,EAA+BA,QAAQ,CAAC,CAAD,CAAvC,EAA4CA,QAAQ,CAAC,CAAD,CAAR,KAAgB,EAA5D;AACH;;AAGDb,IAAAA,GAAG,CAACe,SAAJ;AACAf,IAAAA,GAAG,CAACgB,MAAJ;AAEA,SAAKC,kBAAL;AAEA,SAAKC,kBAAL;AACH;;AAGDA,EAAAA,kBAAkB,GAAG,CACjB;AAKA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDJ,EAAAA,YAAY,CAACD,QAAD,EAAWM,MAAX,EAAmBC,WAAnB,EAAgC;AACxC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,QAApB,EAA8BQ,CAAC,EAA/B,EAAmC;AAC/B,UAAIC,SAAS,GAAG,IAAIZ,IAAI,CAACC,EAAT,GAAcE,QAAd,GAAyBQ,CAAzC,CAD+B,CAE/B;;AACA,UAAIE,WAAW,GAAG,CAAlB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKtB,MAAjB,EAAyBmB,SAAS,GAAGC,WAArC,EAAkD,KAAKjB,MAAvD,EAA+Da,MAA/D;AACA,WAAKjB,UAAL,CAAgBwB,eAAhB,CAAgC,KAAKvB,MAArC,EAA6CmB,SAAS,GAAGC,WAAzD,EAAsE,KAAKjB,MAA3E,EAAmFa,MAAnF;;AACA,UAAIC,WAAJ,EAAiB;AACb,YAAIO,SAAS,GAAGL,SAAS,GAAGZ,IAAI,CAACC,EAAjB,GAAsB,GAAtB,IAA6B,GAA7B,GAAmCnB,GAAG,CAAC8B,SAAS,GAAGZ,IAAI,CAACC,EAAjB,GAAsB,GAAvB,EAA4B,GAA5B,CAAtC,GAAyEnB,GAAG,CAAC,MAAM8B,SAAS,GAAGZ,IAAI,CAACC,EAAjB,GAAsB,GAA7B,EAAkC,GAAlC,CAA5F;AACA,aAAKT,UAAL,CAAgB0B,aAAhB,CAA8B,KAAKzB,MAAnC,EAA2CmB,SAAS,GAAGC,WAAvD,EAAoE,KAAKjB,MAAL,GAAca,MAAd,GAAuB,EAA3F,EAA+FQ,SAAS,CAACE,OAAV,CAAkB,CAAlB,CAA/F,EAAqH,KAArH;AACH;AACJ;AACJ;;AAEDZ,EAAAA,kBAAkB,GAAI;AAClB,UAAMjB,GAAG,GAAG,KAAKA,GAAjB;AACA,SAAKQ,SAAL;AACAR,IAAAA,GAAG,CAAC8B,SAAJ,GAAgB,sBAAhB;AACA9B,IAAAA,GAAG,CAAC+B,OAAJ,CAAY,KAAKjC,MAAL,CAAYM,KAAZ,GAAoB,CAAhC,EAAmC,KAAKN,MAAL,CAAYO,MAAZ,GAAqB,CAAxD,EAA2D,KAAKC,MAAL,GAAc,CAAzE,EAA4E,CAACI,IAAI,CAACC,EAAN,GAAW,CAAvF,EAA0F,CAACD,IAAI,CAACC,EAAN,GAAW,CAArG,EAAwG,KAAxG;AACAX,IAAAA,GAAG,CAACe,SAAJ,GALkB,CAOlB;AAGH,GAtE8B,CAyE/B;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAiB,EAAAA,MAAM,GAAG;AACL,wBAAO;AAAK,MAAA,SAAS,EAAC,WAAf;AAA2B,MAAA,KAAK,EAAE;AAAE5B,QAAAA,KAAK,EAAE,KAAK6B,KAAL,CAAW7B,KAAX,GAAmB,IAA5B;AAAkCC,QAAAA,MAAM,EAAE,KAAK4B,KAAL,CAAW5B,MAAX,GAAoB;AAA9D,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAYH;AAAQ,MAAA,GAAG,EAAC,QAAZ;AAAqB,MAAA,SAAS,EAAC,aAA/B;AAA6C,MAAA,KAAK,EAAE,KAAK4B,KAAL,CAAW7B,KAA/D;AAAsE,MAAA,MAAM,EAAE,KAAK6B,KAAL,CAAW5B,MAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZG,CAAP;AAcH;;AArG8B;;AAwGnC,eAAeV,IAAf","sourcesContent":["import React from 'react';\n\nimport { mod } from \"mathjs\";\nimport NumberDisplay from \"/home/kaappo/testit/canvas/src/components/numberdisplay.js\"\nimport DrawHelper from './helpers';\n\n\nclass Wind extends React.Component {\n\n    componentDidMount() {\n        this.canvas = this.refs.canvas;\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.drawHelper = new DrawHelper(this.canvas, this.ctx);\n\n        this.origin = [this.canvas.width / 2, this.canvas.height / 2];\n        this.radius = this.canvas.width / 2.1;\n\n        const ctx = this.ctx;\n\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        ctx.beginPath();\n        ctx.arc(this.canvas.width / 2, this.canvas.height / 2, this.radius, 0, 2 * Math.PI);\n\n        const divisions = [[24, 10], [72, 5]];\n        for (const division of divisions) {\n            this.drawDivision(division[0], division[1], division[0] === 24);\n        }\n            \n        \n        ctx.closePath();\n        ctx.stroke();\n        \n        this.drawCloseHaulMarks();\n\n        this.componentDidUpdate();\n    }\n\n\n    componentDidUpdate() {\n        // const ctx = this.ctx;\n\n\n        \n\n        // let divisions = [12, 36, 72];\n        // ctx.font = \"20px Courier\";\n        // for (let index = 0; index < divisions.length; index++) {\n        //     let division = divisions[index]\n        //     this.drawDivision(division, ((divisions.length - index + 1) / divisions.length) ** 2 * 15, index === 0);\n        // }\n    }\n\n    drawDivision(division, length, drawNumbers) {\n        for (let i = 0; i < division; i++) {\n            let baseAngle = 2 * Math.PI / division * i;\n            // let angleOffset = this.props.heading * Math.PI / 180;\n            let angleOffset = 0;\n\n            console.log(this.origin, baseAngle + angleOffset, this.radius, length)\n            this.drawHelper.drawCompassLine(this.origin, baseAngle + angleOffset, this.radius, length)\n            if (drawNumbers) {\n                let angleText = baseAngle / Math.PI * 180 <= 180 ? mod(baseAngle / Math.PI * 180, 360) : mod(360 - baseAngle / Math.PI * 180, 360);\n                this.drawHelper.drawAngleText(this.origin, baseAngle + angleOffset, this.radius - length - 10, angleText.toFixed(0), false)\n            }\n        }\n    }\n\n    drawCloseHaulMarks () {\n        const ctx = this.ctx;\n        this.beginPath();\n        ctx.fillStyle = \"rgba(0, 255, 0, 0.5)\"\n        ctx.fillarc(this.canvas.width / 2, this.canvas.height / 2, this.radius - 2, -Math.PI / 2, -Math.PI / 4, false);\n        ctx.closePath();\n        \n        // ctx.fill();\n\n\n    }\n\n\n    // drawDivision(division, length, drawNumbers) {\n    //     for (let i = 0; i < division; i++) {\n    //         let baseAngle = 2 * Math.PI / division * i;\n    //         let angleOffset = -this.props.heading * Math.PI / 180;\n\n\n    //         this.drawHelper.drawCompassLine(this.origin, baseAngle + angleOffset, this.radius, length)\n    //         if (drawNumbers) {\n    //             let angleText = mod(baseAngle / Math.PI * 180, 360);\n    //             this.drawHelper.drawAngleText(this.origin, baseAngle + angleOffset, this.radius - length, angleText.toFixed(0))\n    //         }\n    //     }\n    // }\n    render() {\n        return <div className=\"container\" style={{ width: this.props.width + \"px\", height: this.props.height + \"px\" }}>\n            {/* <NumberDisplay\n                className=\"number\"\n                value={this.props.heading}\n                suffix=\"°\"\n                unit=\"T\"\n                width={this.props.width}\n                height={this.props.height / 3 * 2}\n                upperBound={360}\n                decimalPlaces={1}\n                fontSize={this.props.width / 4}\n            /> */}\n            <canvas ref=\"canvas\" className=\"compassRose\" width={this.props.width} height={this.props.height} />\n        </div>\n    }\n}\n\nexport default Wind"]},"metadata":{},"sourceType":"module"}