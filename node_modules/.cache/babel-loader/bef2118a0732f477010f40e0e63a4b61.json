{"ast":null,"code":"import { factory } from '../../../utils/factory';\nimport { deepMap } from '../../../utils/collection';\nvar name = 'bignumber';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createBignumber = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      BigNumber = _ref.BigNumber;\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500                                    // returns number Infinity\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n\n  var bignumber = typed('bignumber', {\n    '': function _() {\n      return new BigNumber(0);\n    },\n    number: function number(x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new BigNumber(x + '');\n    },\n    string: function string(x) {\n      return new BigNumber(x);\n    },\n    BigNumber: function BigNumber(x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n    Fraction: function Fraction(x) {\n      return new BigNumber(x.n).div(x.d).times(x.s);\n    },\n    \"null\": function _null(x) {\n      return new BigNumber(0);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, bignumber);\n    }\n  });\n  return bignumber;\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/type/bignumber/function/bignumber.js"],"names":["factory","deepMap","name","dependencies","createBignumber","_ref","typed","BigNumber","bignumber","_","number","x","string","Fraction","n","div","d","times","s","_null","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,CAAnB;AACA,OAAO,IAAIC,eAAe,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACtF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,SAAS,GAAGF,IAAI,CAACE,SADrB;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,MAAIC,SAAS,GAAGF,KAAK,CAAC,WAAD,EAAc;AACjC,QAAI,SAASG,CAAT,GAAa;AACf,aAAO,IAAIF,SAAJ,CAAc,CAAd,CAAP;AACD,KAHgC;AAIjCG,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB;AACA,aAAO,IAAIJ,SAAJ,CAAcI,CAAC,GAAG,EAAlB,CAAP;AACD,KAPgC;AAQjCC,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBD,CAAhB,EAAmB;AACzB,aAAO,IAAIJ,SAAJ,CAAcI,CAAd,CAAP;AACD,KAVgC;AAWjCJ,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBI,CAAnB,EAAsB;AAC/B;AACA,aAAOA,CAAP;AACD,KAdgC;AAejCE,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBF,CAAlB,EAAqB;AAC7B,aAAO,IAAIJ,SAAJ,CAAcI,CAAC,CAACG,CAAhB,EAAmBC,GAAnB,CAAuBJ,CAAC,CAACK,CAAzB,EAA4BC,KAA5B,CAAkCN,CAAC,CAACO,CAApC,CAAP;AACD,KAjBgC;AAkBjC,YAAQ,SAASC,KAAT,CAAeR,CAAf,EAAkB;AACxB,aAAO,IAAIJ,SAAJ,CAAc,CAAd,CAAP;AACD,KApBgC;AAqBjC,sBAAkB,SAASa,WAAT,CAAqBT,CAArB,EAAwB;AACxC,aAAOV,OAAO,CAACU,CAAD,EAAIH,SAAJ,CAAd;AACD;AAvBgC,GAAd,CAArB;AAyBA,SAAOA,SAAP;AACD,CAvDkD,CAA5C","sourcesContent":["import { factory } from '../../../utils/factory';\nimport { deepMap } from '../../../utils/collection';\nvar name = 'bignumber';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createBignumber = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      BigNumber = _ref.BigNumber;\n\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500                                    // returns number Infinity\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n  var bignumber = typed('bignumber', {\n    '': function _() {\n      return new BigNumber(0);\n    },\n    number: function number(x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new BigNumber(x + '');\n    },\n    string: function string(x) {\n      return new BigNumber(x);\n    },\n    BigNumber: function BigNumber(x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n    Fraction: function Fraction(x) {\n      return new BigNumber(x.n).div(x.d).times(x.s);\n    },\n    \"null\": function _null(x) {\n      return new BigNumber(0);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, bignumber);\n    }\n  });\n  return bignumber;\n});"]},"metadata":{},"sourceType":"module"}