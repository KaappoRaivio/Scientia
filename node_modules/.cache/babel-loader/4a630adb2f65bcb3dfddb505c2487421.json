{"ast":null,"code":"class DrawHelper {\n  constructor(canvas, ctx) {\n    this.canvas = canvas;\n    this.ctx = ctx; // this.radius = radius;\n    // this.arcCenterOffsetY = arcCenterOffsetY;\n  }\n\n  drawAngleText(origin, angle, radius, text) {\n    console.log(origin, angle, radius, text);\n    let pos = this.getPosFromAngle(origin, angle, radius);\n    let x = pos[0];\n    let y = pos[1];\n    this.ctx.save();\n    this.ctx.translate(x + 40 * Math.sin(angle - Math.PI), y + 40 * Math.cos(angle - Math.PI));\n    this.ctx.rotate(-angle + Math.PI);\n    this.ctx.textAlign = 'center';\n    this.ctx.fillText(text, 0, 10);\n    this.ctx.restore();\n  }\n\n  getPosFromAngle(origin, angle, radius) {\n    console.log(origin, angle, radius);\n    let x = origin[0];\n    let y = origin[1]; //this.canvas.height + this.arcCenterOffsetY\n\n    return [x + Math.sin(angle) * radius, y + Math.cos(angle) * radius];\n  }\n\n  drawCompassLine(origin, angle, radius, length) {\n    console.log(origin, angle, radius, length);\n    let end = this.getPosFromAngle(origin, angle, radius);\n    let start = this.getPosFromAngle(origin, angle, radius - length);\n    this.ctx.moveTo(start[0], start[1]);\n    this.ctx.lineTo(end[0], end[1]);\n  }\n\n}\n\nexport default DrawHelper;","map":{"version":3,"sources":["/home/kaappo/testit/canvas/src/components/helpers.js"],"names":["DrawHelper","constructor","canvas","ctx","drawAngleText","origin","angle","radius","text","console","log","pos","getPosFromAngle","x","y","save","translate","Math","sin","PI","cos","rotate","textAlign","fillText","restore","drawCompassLine","length","end","start","moveTo","lineTo"],"mappings":"AAAA,MAAMA,UAAN,CAAiB;AACbC,EAAAA,WAAW,CAAEC,MAAF,EAAUC,GAAV,EAAe;AACtB,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,GAAL,GAAWA,GAAX,CAFsB,CAGtB;AACA;AACH;;AAEDC,EAAAA,aAAa,CAAEC,MAAF,EAAUC,KAAV,EAAiBC,MAAjB,EAAyBC,IAAzB,EAA+B;AACxCC,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ,EAAoBC,KAApB,EAA2BC,MAA3B,EAAmCC,IAAnC;AACA,QAAIG,GAAG,GAAG,KAAKC,eAAL,CAAqBP,MAArB,EAA6BC,KAA7B,EAAoCC,MAApC,CAAV;AACA,QAAIM,CAAC,GAAGF,GAAG,CAAC,CAAD,CAAX;AACA,QAAIG,CAAC,GAAGH,GAAG,CAAC,CAAD,CAAX;AAEA,SAAKR,GAAL,CAASY,IAAT;AACA,SAAKZ,GAAL,CAASa,SAAT,CAAmBH,CAAC,GAAG,KAAKI,IAAI,CAACC,GAAL,CAASZ,KAAK,GAAGW,IAAI,CAACE,EAAtB,CAA5B,EAAuDL,CAAC,GAAG,KAAKG,IAAI,CAACG,GAAL,CAASd,KAAK,GAAGW,IAAI,CAACE,EAAtB,CAAhE;AACA,SAAKhB,GAAL,CAASkB,MAAT,CAAgB,CAACf,KAAD,GAASW,IAAI,CAACE,EAA9B;AAEA,SAAKhB,GAAL,CAASmB,SAAT,GAAqB,QAArB;AACA,SAAKnB,GAAL,CAASoB,QAAT,CAAkBf,IAAlB,EAAwB,CAAxB,EAA2B,EAA3B;AAEA,SAAKL,GAAL,CAASqB,OAAT;AAEH;;AAEDZ,EAAAA,eAAe,CAACP,MAAD,EAASC,KAAT,EAAgBC,MAAhB,EAAwB;AACnCE,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ,EAAoBC,KAApB,EAA2BC,MAA3B;AACA,QAAIM,CAAC,GAAGR,MAAM,CAAC,CAAD,CAAd;AACA,QAAIS,CAAC,GAAGT,MAAM,CAAC,CAAD,CAAd,CAHmC,CAInC;;AACA,WAAO,CAACQ,CAAC,GAAGI,IAAI,CAACC,GAAL,CAASZ,KAAT,IAAkBC,MAAvB,EAA+BO,CAAC,GAAGG,IAAI,CAACG,GAAL,CAASd,KAAT,IAAkBC,MAArD,CAAP;AACH;;AAEDkB,EAAAA,eAAe,CAACpB,MAAD,EAASC,KAAT,EAAgBC,MAAhB,EAAwBmB,MAAxB,EAAgC;AAC3CjB,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ,EAAoBC,KAApB,EAA2BC,MAA3B,EAAmCmB,MAAnC;AACA,QAAIC,GAAG,GAAG,KAAKf,eAAL,CAAqBP,MAArB,EAA6BC,KAA7B,EAAoCC,MAApC,CAAV;AACA,QAAIqB,KAAK,GAAG,KAAKhB,eAAL,CAAqBP,MAArB,EAA6BC,KAA7B,EAAoCC,MAAM,GAAGmB,MAA7C,CAAZ;AAEA,SAAKvB,GAAL,CAAS0B,MAAT,CAAgBD,KAAK,CAAC,CAAD,CAArB,EAA0BA,KAAK,CAAC,CAAD,CAA/B;AACA,SAAKzB,GAAL,CAAS2B,MAAT,CAAgBH,GAAG,CAAC,CAAD,CAAnB,EAAwBA,GAAG,CAAC,CAAD,CAA3B;AACH;;AAxCY;;AA4CjB,eAAe3B,UAAf","sourcesContent":["class DrawHelper {\n    constructor (canvas, ctx) {\n        this.canvas = canvas;\n        this.ctx = ctx;\n        // this.radius = radius;\n        // this.arcCenterOffsetY = arcCenterOffsetY;\n    }\n    \n    drawAngleText (origin, angle, radius, text) {\n        console.log(origin, angle, radius, text)\n        let pos = this.getPosFromAngle(origin, angle, radius)\n        let x = pos[0];\n        let y = pos[1];\n    \n        this.ctx.save();\n        this.ctx.translate(x + 40 * Math.sin(angle - Math.PI), y + 40 * Math.cos(angle - Math.PI));\n        this.ctx.rotate(-angle + Math.PI);\n    \n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(text, 0, 10);\n    \n        this.ctx.restore();\n    \n    }\n    \n    getPosFromAngle(origin, angle, radius) {\n        console.log(origin, angle, radius)\n        let x = origin[0]\n        let y = origin[1]\n        //this.canvas.height + this.arcCenterOffsetY\n        return [x + Math.sin(angle) * radius, y + Math.cos(angle) * radius]\n    }\n\n    drawCompassLine(origin, angle, radius, length) {\n        console.log(origin, angle, radius, length)\n        let end = this.getPosFromAngle(origin, angle, radius)\n        let start = this.getPosFromAngle(origin, angle, radius - length)\n\n        this.ctx.moveTo(start[0], start[1]);\n        this.ctx.lineTo(end[0], end[1]);\n    }\n}\n\n\nexport default DrawHelper"]},"metadata":{},"sourceType":"module"}