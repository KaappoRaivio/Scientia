{"ast":null,"code":"import { factory } from '../../utils/factory'; // Source: https://en.wikipedia.org/wiki/Physical_constant\n// Universal constants\n\nexport var createSpeedOfLight = /* #__PURE__ */unitFactory('speedOfLight', '299792458', 'm s^-1');\nexport var createGravitationConstant = /* #__PURE__ */unitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');\nexport var createPlanckConstant = /* #__PURE__ */unitFactory('planckConstant', '6.62607015e-34', 'J s');\nexport var createReducedPlanckConstant = /* #__PURE__ */unitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s'); // Electromagnetic constants\n\nexport var createMagneticConstant = /* #__PURE__ */unitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');\nexport var createElectricConstant = /* #__PURE__ */unitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');\nexport var createVacuumImpedance = /* #__PURE__ */unitFactory('vacuumImpedance', '376.730313667', 'ohm');\nexport var createCoulomb = /* #__PURE__ */unitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2');\nexport var createElementaryCharge = /* #__PURE__ */unitFactory('elementaryCharge', '1.602176634e-19', 'C');\nexport var createBohrMagneton = /* #__PURE__ */unitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');\nexport var createConductanceQuantum = /* #__PURE__ */unitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');\nexport var createInverseConductanceQuantum = /* #__PURE__ */unitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');\nexport var createMagneticFluxQuantum = /* #__PURE__ */unitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');\nexport var createNuclearMagneton = /* #__PURE__ */unitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');\nexport var createKlitzing = /* #__PURE__ */unitFactory('klitzing', '25812.807459304513', 'ohm');\nexport var createJosephson = /* #__PURE__ */unitFactory('josephson', '4.835978484169836e14 Hz V', 'Hz V^-1'); // TODO: support for Hz needed\n// Atomic and nuclear constants\n\nexport var createBohrRadius = /* #__PURE__ */unitFactory('bohrRadius', '5.29177210903e-11', 'm');\nexport var createClassicalElectronRadius = /* #__PURE__ */unitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');\nexport var createElectronMass = /* #__PURE__ */unitFactory('electronMass', '9.1093837015e-31', 'kg');\nexport var createFermiCoupling = /* #__PURE__ */unitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');\nexport var createFineStructure = numberFactory('fineStructure', 7.2973525693e-3);\nexport var createHartreeEnergy = /* #__PURE__ */unitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');\nexport var createProtonMass = /* #__PURE__ */unitFactory('protonMass', '1.67262192369e-27', 'kg');\nexport var createDeuteronMass = /* #__PURE__ */unitFactory('deuteronMass', '3.3435830926e-27', 'kg');\nexport var createNeutronMass = /* #__PURE__ */unitFactory('neutronMass', '1.6749271613e-27', 'kg');\nexport var createQuantumOfCirculation = /* #__PURE__ */unitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');\nexport var createRydberg = /* #__PURE__ */unitFactory('rydberg', '10973731.568160', 'm^-1');\nexport var createThomsonCrossSection = /* #__PURE__ */unitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');\nexport var createWeakMixingAngle = numberFactory('weakMixingAngle', 0.22290);\nexport var createEfimovFactor = numberFactory('efimovFactor', 22.7); // Physico-chemical constants\n\nexport var createAtomicMass = /* #__PURE__ */unitFactory('atomicMass', '1.66053906660e-27', 'kg');\nexport var createAvogadro = /* #__PURE__ */unitFactory('avogadro', '6.02214076e23', 'mol^-1');\nexport var createBoltzmann = /* #__PURE__ */unitFactory('boltzmann', '1.380649e-23', 'J K^-1');\nexport var createFaraday = /* #__PURE__ */unitFactory('faraday', '96485.33212331001', 'C mol^-1');\nexport var createFirstRadiation = /* #__PURE__ */unitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2'); // export const createSpectralRadiance = /* #__PURE__ */ unitFactory('spectralRadiance', '1.1910429723971881e-16', 'W m^2 sr^-1') // TODO spectralRadiance\n\nexport var createLoschmidt = /* #__PURE__ */unitFactory('loschmidt', '2.686780111798444e25', 'm^-3');\nexport var createGasConstant = /* #__PURE__ */unitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');\nexport var createMolarPlanckConstant = /* #__PURE__ */unitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');\nexport var createMolarVolume = /* #__PURE__ */unitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');\nexport var createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);\nexport var createSecondRadiation = /* #__PURE__ */unitFactory('secondRadiation', '0.014387768775039337', 'm K');\nexport var createStefanBoltzmann = /* #__PURE__ */unitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');\nexport var createWienDisplacement = /* #__PURE__ */unitFactory('wienDisplacement', '2.897771955e-3', 'm K'); // Adopted values\n\nexport var createMolarMass = /* #__PURE__ */unitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');\nexport var createMolarMassC12 = /* #__PURE__ */unitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');\nexport var createGravity = /* #__PURE__ */unitFactory('gravity', '9.80665', 'm s^-2'); // atm is defined in Unit.js\n// Natural units\n\nexport var createPlanckLength = /* #__PURE__ */unitFactory('planckLength', '1.616255e-35', 'm');\nexport var createPlanckMass = /* #__PURE__ */unitFactory('planckMass', '2.176435e-8', 'kg');\nexport var createPlanckTime = /* #__PURE__ */unitFactory('planckTime', '5.391245e-44', 's');\nexport var createPlanckCharge = /* #__PURE__ */unitFactory('planckCharge', '1.87554603778e-18', 'C');\nexport var createPlanckTemperature = /* #__PURE__ */unitFactory('planckTemperature', '1.416785e+32', 'K'); // helper function to create a factory function which creates a physical constant,\n// a Unit with either a number value or a BigNumber value depending on the configuration\n\nfunction unitFactory(name, valueStr, unitStr) {\n  var dependencies = ['config', 'Unit', 'BigNumber'];\n  return factory(name, dependencies, function (_ref) {\n    var config = _ref.config,\n        Unit = _ref.Unit,\n        BigNumber = _ref.BigNumber; // Note that we can parse into number or BigNumber.\n    // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values\n    // Therefore we dont use Unit.parse()\n\n    var value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);\n    var unit = new Unit(value, unitStr);\n    unit.fixPrefix = true;\n    return unit;\n  });\n} // helper function to create a factory function which creates a numeric constant,\n// either a number or BigNumber depending on the configuration\n\n\nfunction numberFactory(name, value) {\n  var dependencies = ['config', 'BigNumber'];\n  return factory(name, dependencies, function (_ref2) {\n    var config = _ref2.config,\n        BigNumber = _ref2.BigNumber;\n    return config.number === 'BigNumber' ? new BigNumber(value) : value;\n  });\n}","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/type/unit/physicalConstants.js"],"names":["factory","createSpeedOfLight","unitFactory","createGravitationConstant","createPlanckConstant","createReducedPlanckConstant","createMagneticConstant","createElectricConstant","createVacuumImpedance","createCoulomb","createElementaryCharge","createBohrMagneton","createConductanceQuantum","createInverseConductanceQuantum","createMagneticFluxQuantum","createNuclearMagneton","createKlitzing","createJosephson","createBohrRadius","createClassicalElectronRadius","createElectronMass","createFermiCoupling","createFineStructure","numberFactory","createHartreeEnergy","createProtonMass","createDeuteronMass","createNeutronMass","createQuantumOfCirculation","createRydberg","createThomsonCrossSection","createWeakMixingAngle","createEfimovFactor","createAtomicMass","createAvogadro","createBoltzmann","createFaraday","createFirstRadiation","createLoschmidt","createGasConstant","createMolarPlanckConstant","createMolarVolume","createSackurTetrode","createSecondRadiation","createStefanBoltzmann","createWienDisplacement","createMolarMass","createMolarMassC12","createGravity","createPlanckLength","createPlanckMass","createPlanckTime","createPlanckCharge","createPlanckTemperature","name","valueStr","unitStr","dependencies","_ref","config","Unit","BigNumber","value","number","parseFloat","unit","fixPrefix","_ref2"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory'; // Source: https://en.wikipedia.org/wiki/Physical_constant\n// Universal constants\n\nexport var createSpeedOfLight = /* #__PURE__ */unitFactory('speedOfLight', '299792458', 'm s^-1');\nexport var createGravitationConstant = /* #__PURE__ */unitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');\nexport var createPlanckConstant = /* #__PURE__ */unitFactory('planckConstant', '6.62607015e-34', 'J s');\nexport var createReducedPlanckConstant = /* #__PURE__ */unitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s'); // Electromagnetic constants\n\nexport var createMagneticConstant = /* #__PURE__ */unitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');\nexport var createElectricConstant = /* #__PURE__ */unitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');\nexport var createVacuumImpedance = /* #__PURE__ */unitFactory('vacuumImpedance', '376.730313667', 'ohm');\nexport var createCoulomb = /* #__PURE__ */unitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2');\nexport var createElementaryCharge = /* #__PURE__ */unitFactory('elementaryCharge', '1.602176634e-19', 'C');\nexport var createBohrMagneton = /* #__PURE__ */unitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');\nexport var createConductanceQuantum = /* #__PURE__ */unitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');\nexport var createInverseConductanceQuantum = /* #__PURE__ */unitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');\nexport var createMagneticFluxQuantum = /* #__PURE__ */unitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');\nexport var createNuclearMagneton = /* #__PURE__ */unitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');\nexport var createKlitzing = /* #__PURE__ */unitFactory('klitzing', '25812.807459304513', 'ohm');\nexport var createJosephson = /* #__PURE__ */unitFactory('josephson', '4.835978484169836e14 Hz V', 'Hz V^-1'); // TODO: support for Hz needed\n// Atomic and nuclear constants\n\nexport var createBohrRadius = /* #__PURE__ */unitFactory('bohrRadius', '5.29177210903e-11', 'm');\nexport var createClassicalElectronRadius = /* #__PURE__ */unitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');\nexport var createElectronMass = /* #__PURE__ */unitFactory('electronMass', '9.1093837015e-31', 'kg');\nexport var createFermiCoupling = /* #__PURE__ */unitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');\nexport var createFineStructure = numberFactory('fineStructure', 7.2973525693e-3);\nexport var createHartreeEnergy = /* #__PURE__ */unitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');\nexport var createProtonMass = /* #__PURE__ */unitFactory('protonMass', '1.67262192369e-27', 'kg');\nexport var createDeuteronMass = /* #__PURE__ */unitFactory('deuteronMass', '3.3435830926e-27', 'kg');\nexport var createNeutronMass = /* #__PURE__ */unitFactory('neutronMass', '1.6749271613e-27', 'kg');\nexport var createQuantumOfCirculation = /* #__PURE__ */unitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');\nexport var createRydberg = /* #__PURE__ */unitFactory('rydberg', '10973731.568160', 'm^-1');\nexport var createThomsonCrossSection = /* #__PURE__ */unitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');\nexport var createWeakMixingAngle = numberFactory('weakMixingAngle', 0.22290);\nexport var createEfimovFactor = numberFactory('efimovFactor', 22.7); // Physico-chemical constants\n\nexport var createAtomicMass = /* #__PURE__ */unitFactory('atomicMass', '1.66053906660e-27', 'kg');\nexport var createAvogadro = /* #__PURE__ */unitFactory('avogadro', '6.02214076e23', 'mol^-1');\nexport var createBoltzmann = /* #__PURE__ */unitFactory('boltzmann', '1.380649e-23', 'J K^-1');\nexport var createFaraday = /* #__PURE__ */unitFactory('faraday', '96485.33212331001', 'C mol^-1');\nexport var createFirstRadiation = /* #__PURE__ */unitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2'); // export const createSpectralRadiance = /* #__PURE__ */ unitFactory('spectralRadiance', '1.1910429723971881e-16', 'W m^2 sr^-1') // TODO spectralRadiance\n\nexport var createLoschmidt = /* #__PURE__ */unitFactory('loschmidt', '2.686780111798444e25', 'm^-3');\nexport var createGasConstant = /* #__PURE__ */unitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');\nexport var createMolarPlanckConstant = /* #__PURE__ */unitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');\nexport var createMolarVolume = /* #__PURE__ */unitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');\nexport var createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);\nexport var createSecondRadiation = /* #__PURE__ */unitFactory('secondRadiation', '0.014387768775039337', 'm K');\nexport var createStefanBoltzmann = /* #__PURE__ */unitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');\nexport var createWienDisplacement = /* #__PURE__ */unitFactory('wienDisplacement', '2.897771955e-3', 'm K'); // Adopted values\n\nexport var createMolarMass = /* #__PURE__ */unitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');\nexport var createMolarMassC12 = /* #__PURE__ */unitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');\nexport var createGravity = /* #__PURE__ */unitFactory('gravity', '9.80665', 'm s^-2'); // atm is defined in Unit.js\n// Natural units\n\nexport var createPlanckLength = /* #__PURE__ */unitFactory('planckLength', '1.616255e-35', 'm');\nexport var createPlanckMass = /* #__PURE__ */unitFactory('planckMass', '2.176435e-8', 'kg');\nexport var createPlanckTime = /* #__PURE__ */unitFactory('planckTime', '5.391245e-44', 's');\nexport var createPlanckCharge = /* #__PURE__ */unitFactory('planckCharge', '1.87554603778e-18', 'C');\nexport var createPlanckTemperature = /* #__PURE__ */unitFactory('planckTemperature', '1.416785e+32', 'K'); // helper function to create a factory function which creates a physical constant,\n// a Unit with either a number value or a BigNumber value depending on the configuration\n\nfunction unitFactory(name, valueStr, unitStr) {\n  var dependencies = ['config', 'Unit', 'BigNumber'];\n  return factory(name, dependencies, function (_ref) {\n    var config = _ref.config,\n        Unit = _ref.Unit,\n        BigNumber = _ref.BigNumber;\n    // Note that we can parse into number or BigNumber.\n    // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values\n    // Therefore we dont use Unit.parse()\n    var value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);\n    var unit = new Unit(value, unitStr);\n    unit.fixPrefix = true;\n    return unit;\n  });\n} // helper function to create a factory function which creates a numeric constant,\n// either a number or BigNumber depending on the configuration\n\n\nfunction numberFactory(name, value) {\n  var dependencies = ['config', 'BigNumber'];\n  return factory(name, dependencies, function (_ref2) {\n    var config = _ref2.config,\n        BigNumber = _ref2.BigNumber;\n    return config.number === 'BigNumber' ? new BigNumber(value) : value;\n  });\n}"]},"metadata":{},"sourceType":"module"}