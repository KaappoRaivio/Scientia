{"ast":null,"code":"import { isArray, isMatrix, isString, typeOf } from '../../utils/is';\nimport { clone } from '../../utils/object';\nimport { factory } from '../../utils/factory';\nvar name = 'ImmutableDenseMatrix';\nvar dependencies = ['smaller', 'DenseMatrix'];\nexport var createImmutableDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var smaller = _ref.smaller,\n      DenseMatrix = _ref.DenseMatrix;\n\n  function ImmutableDenseMatrix(data, datatype) {\n    if (!(this instanceof ImmutableDenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n\n    if (isMatrix(data) || isArray(data)) {\n      // use DenseMatrix implementation\n      var matrix = new DenseMatrix(data, datatype); // internal structures\n\n      this._data = matrix._data;\n      this._size = matrix._size;\n      this._datatype = matrix._datatype;\n      this._min = null;\n      this._max = null;\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      this._datatype = data.datatype;\n      this._min = typeof data.min !== 'undefined' ? data.min : null;\n      this._max = typeof data.max !== 'undefined' ? data.max : null;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n      this._min = null;\n      this._max = null;\n    }\n  }\n\n  ImmutableDenseMatrix.prototype = new DenseMatrix();\n  /**\n   * Attach type information\n   */\n\n  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';\n  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | ImmutableDenseMatrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n  ImmutableDenseMatrix.prototype.subset = function (index) {\n    switch (arguments.length) {\n      case 1:\n        {\n          // use base implementation\n          var m = DenseMatrix.prototype.subset.call(this, index); // check result is a matrix\n\n          if (isMatrix(m)) {\n            // return immutable matrix\n            return new ImmutableDenseMatrix({\n              data: m._data,\n              size: m._size,\n              datatype: m._datatype\n            });\n          }\n\n          return m;\n        }\n      // intentional fall through\n\n      case 2:\n      case 3:\n        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @param {Number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {ImmutableDenseMatrix} self\n   */\n\n\n  ImmutableDenseMatrix.prototype.set = function () {\n    throw new Error('Cannot invoke set on an Immutable Matrix instance');\n  };\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {Number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  ImmutableDenseMatrix.prototype.resize = function () {\n    throw new Error('Cannot invoke resize on an Immutable Matrix instance');\n  };\n  /**\n   * Disallows reshaping in favor of immutability.\n   *\n   * @throws {Error} Operation not allowed\n   */\n\n\n  ImmutableDenseMatrix.prototype.reshape = function () {\n    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');\n  };\n  /**\n   * Create a clone of the matrix\n   * @return {ImmutableDenseMatrix} clone\n   */\n\n\n  ImmutableDenseMatrix.prototype.clone = function () {\n    return new ImmutableDenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n  };\n  /**\n   * Get a JSON representation of the matrix\n   * @returns {Object}\n   */\n\n\n  ImmutableDenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'ImmutableDenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n  /**\n   * Generate a matrix from a JSON object\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ImmutableDenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {ImmutableDenseMatrix}\n   */\n\n\n  ImmutableDenseMatrix.fromJSON = function (json) {\n    return new ImmutableDenseMatrix(json);\n  };\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @param {Number} i       Matrix row index 1\n   * @param {Number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n\n\n  ImmutableDenseMatrix.prototype.swapRows = function () {\n    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');\n  };\n  /**\n   * Calculate the minimum value in the set\n   * @return {Number | undefined} min\n   */\n\n\n  ImmutableDenseMatrix.prototype.min = function () {\n    // check min has been calculated before\n    if (this._min === null) {\n      // minimum\n      var m = null; // compute min\n\n      this.forEach(function (v) {\n        if (m === null || smaller(v, m)) {\n          m = v;\n        }\n      });\n      this._min = m !== null ? m : undefined;\n    }\n\n    return this._min;\n  };\n  /**\n   * Calculate the maximum value in the set\n   * @return {Number | undefined} max\n   */\n\n\n  ImmutableDenseMatrix.prototype.max = function () {\n    // check max has been calculated before\n    if (this._max === null) {\n      // maximum\n      var m = null; // compute max\n\n      this.forEach(function (v) {\n        if (m === null || smaller(m, v)) {\n          m = v;\n        }\n      });\n      this._max = m !== null ? m : undefined;\n    }\n\n    return this._max;\n  };\n\n  return ImmutableDenseMatrix;\n}, {\n  isClass: true\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/type/matrix/ImmutableDenseMatrix.js"],"names":["isArray","isMatrix","isString","typeOf","clone","factory","name","dependencies","createImmutableDenseMatrixClass","_ref","smaller","DenseMatrix","ImmutableDenseMatrix","data","datatype","SyntaxError","Error","matrix","_data","_size","_datatype","_min","_max","size","min","max","TypeError","prototype","type","isImmutableDenseMatrix","subset","index","arguments","length","m","call","set","resize","reshape","toJSON","mathjs","fromJSON","json","swapRows","forEach","v","undefined","isClass"],"mappings":"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","sourcesContent":["import { isArray, isMatrix, isString, typeOf } from '../../utils/is';\nimport { clone } from '../../utils/object';\nimport { factory } from '../../utils/factory';\nvar name = 'ImmutableDenseMatrix';\nvar dependencies = ['smaller', 'DenseMatrix'];\nexport var createImmutableDenseMatrixClass = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var smaller = _ref.smaller,\n      DenseMatrix = _ref.DenseMatrix;\n\n  function ImmutableDenseMatrix(data, datatype) {\n    if (!(this instanceof ImmutableDenseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n\n    if (isMatrix(data) || isArray(data)) {\n      // use DenseMatrix implementation\n      var matrix = new DenseMatrix(data, datatype); // internal structures\n\n      this._data = matrix._data;\n      this._size = matrix._size;\n      this._datatype = matrix._datatype;\n      this._min = null;\n      this._max = null;\n    } else if (data && isArray(data.data) && isArray(data.size)) {\n      // initialize fields from JSON representation\n      this._data = data.data;\n      this._size = data.size;\n      this._datatype = data.datatype;\n      this._min = typeof data.min !== 'undefined' ? data.min : null;\n      this._max = typeof data.max !== 'undefined' ? data.max : null;\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._data = [];\n      this._size = [0];\n      this._datatype = datatype;\n      this._min = null;\n      this._max = null;\n    }\n  }\n\n  ImmutableDenseMatrix.prototype = new DenseMatrix();\n  /**\n   * Attach type information\n   */\n\n  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';\n  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @param {Index} index\n   * @param {Array | ImmutableDenseMatrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n  ImmutableDenseMatrix.prototype.subset = function (index) {\n    switch (arguments.length) {\n      case 1:\n        {\n          // use base implementation\n          var m = DenseMatrix.prototype.subset.call(this, index); // check result is a matrix\n\n          if (isMatrix(m)) {\n            // return immutable matrix\n            return new ImmutableDenseMatrix({\n              data: m._data,\n              size: m._size,\n              datatype: m._datatype\n            });\n          }\n\n          return m;\n        }\n      // intentional fall through\n\n      case 2:\n      case 3:\n        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @param {Number[]} index   Zero-based index\n   * @param {*} value\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be left undefined.\n   * @return {ImmutableDenseMatrix} self\n   */\n\n\n  ImmutableDenseMatrix.prototype.set = function () {\n    throw new Error('Cannot invoke set on an Immutable Matrix instance');\n  };\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @param {Number[]} size           The new size the matrix should have.\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  ImmutableDenseMatrix.prototype.resize = function () {\n    throw new Error('Cannot invoke resize on an Immutable Matrix instance');\n  };\n  /**\n   * Disallows reshaping in favor of immutability.\n   *\n   * @throws {Error} Operation not allowed\n   */\n\n\n  ImmutableDenseMatrix.prototype.reshape = function () {\n    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');\n  };\n  /**\n   * Create a clone of the matrix\n   * @return {ImmutableDenseMatrix} clone\n   */\n\n\n  ImmutableDenseMatrix.prototype.clone = function () {\n    return new ImmutableDenseMatrix({\n      data: clone(this._data),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n  };\n  /**\n   * Get a JSON representation of the matrix\n   * @returns {Object}\n   */\n\n\n  ImmutableDenseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'ImmutableDenseMatrix',\n      data: this._data,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n  /**\n   * Generate a matrix from a JSON object\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ImmutableDenseMatrix\", data: [], size: []}`,\n   *                       where mathjs is optional\n   * @returns {ImmutableDenseMatrix}\n   */\n\n\n  ImmutableDenseMatrix.fromJSON = function (json) {\n    return new ImmutableDenseMatrix(json);\n  };\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @param {Number} i       Matrix row index 1\n   * @param {Number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n\n\n  ImmutableDenseMatrix.prototype.swapRows = function () {\n    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');\n  };\n  /**\n   * Calculate the minimum value in the set\n   * @return {Number | undefined} min\n   */\n\n\n  ImmutableDenseMatrix.prototype.min = function () {\n    // check min has been calculated before\n    if (this._min === null) {\n      // minimum\n      var m = null; // compute min\n\n      this.forEach(function (v) {\n        if (m === null || smaller(v, m)) {\n          m = v;\n        }\n      });\n      this._min = m !== null ? m : undefined;\n    }\n\n    return this._min;\n  };\n  /**\n   * Calculate the maximum value in the set\n   * @return {Number | undefined} max\n   */\n\n\n  ImmutableDenseMatrix.prototype.max = function () {\n    // check max has been calculated before\n    if (this._max === null) {\n      // maximum\n      var m = null; // compute max\n\n      this.forEach(function (v) {\n        if (m === null || smaller(m, v)) {\n          m = v;\n        }\n      });\n      this._max = m !== null ? m : undefined;\n    }\n\n    return this._max;\n  };\n\n  return ImmutableDenseMatrix;\n}, {\n  isClass: true\n});"]},"metadata":{},"sourceType":"module"}