{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { cothNumber } from '../../plain/number';\nvar name = 'coth';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCoth = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      _BigNumber = _ref.BigNumber;\n  /**\n   * Calculate the hyperbolic cotangent of a value,\n   * defined as `coth(x) = 1 / tanh(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.coth(x)\n   *\n   * Examples:\n   *\n   *    // coth(x) = 1 / tanh(x)\n   *    math.coth(2)         // returns 1.0373147207275482\n   *    1 / math.tanh(2)     // returns 1.0373147207275482\n   *\n   * See also:\n   *\n   *    sinh, tanh, cosh\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x\n   */\n\n  var coth = typed(name, {\n    number: cothNumber,\n    Complex: function Complex(x) {\n      return x.coth();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x.tanh());\n    },\n    Unit: function Unit(x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function coth is no angle');\n      }\n\n      return coth(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, coth);\n    }\n  });\n  return coth;\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/trigonometry/coth.js"],"names":["factory","deepMap","cothNumber","name","dependencies","createCoth","_ref","typed","_BigNumber","BigNumber","coth","number","Complex","x","div","tanh","Unit","hasBase","constructor","BASE_UNITS","ANGLE","TypeError","value","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACjF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,UAAU,GAAGF,IAAI,CAACG,SADtB;AAGA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,MAAIC,IAAI,GAAGH,KAAK,CAACJ,IAAD,EAAO;AACrBQ,IAAAA,MAAM,EAAET,UADa;AAErBU,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACH,IAAF,EAAP;AACD,KAJoB;AAKrBD,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBI,CAAnB,EAAsB;AAC/B,aAAO,IAAIL,UAAJ,CAAe,CAAf,EAAkBM,GAAlB,CAAsBD,CAAC,CAACE,IAAF,EAAtB,CAAP;AACD,KAPoB;AAQrBC,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAcH,CAAd,EAAiB;AACrB,UAAI,CAACA,CAAC,CAACI,OAAF,CAAUJ,CAAC,CAACK,WAAF,CAAcC,UAAd,CAAyBC,KAAnC,CAAL,EAAgD;AAC9C,cAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AACD;;AAED,aAAOX,IAAI,CAACG,CAAC,CAACS,KAAH,CAAX;AACD,KAdoB;AAerB,sBAAkB,SAASC,WAAT,CAAqBV,CAArB,EAAwB;AACxC,aAAOZ,OAAO,CAACY,CAAD,EAAIH,IAAJ,CAAd;AACD;AAjBoB,GAAP,CAAhB;AAmBA,SAAOA,IAAP;AACD,CA/C6C,CAAvC","sourcesContent":["import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { cothNumber } from '../../plain/number';\nvar name = 'coth';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCoth = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      _BigNumber = _ref.BigNumber;\n\n  /**\n   * Calculate the hyperbolic cotangent of a value,\n   * defined as `coth(x) = 1 / tanh(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.coth(x)\n   *\n   * Examples:\n   *\n   *    // coth(x) = 1 / tanh(x)\n   *    math.coth(2)         // returns 1.0373147207275482\n   *    1 / math.tanh(2)     // returns 1.0373147207275482\n   *\n   * See also:\n   *\n   *    sinh, tanh, cosh\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x\n   */\n  var coth = typed(name, {\n    number: cothNumber,\n    Complex: function Complex(x) {\n      return x.coth();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x.tanh());\n    },\n    Unit: function Unit(x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function coth is no angle');\n      }\n\n      return coth(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, coth);\n    }\n  });\n  return coth;\n});"]},"metadata":{},"sourceType":"module"}