{"ast":null,"code":"import { mod } from \"mathjs\";\n\nclass DrawHelper {\n  constructor(canvas, ctx) {\n    this.canvas = canvas;\n    this.ctx = ctx; // this.radius = radius;\n    // this.arcCenterOffsetY = arcCenterOffsetY;\n  }\n\n  drawAngleText(origin, angle, radius, text, dontRotateText) {\n    if (dontRotateText === undefined) {\n      dontRotateText = false;\n    }\n\n    this.ctx.save();\n\n    if (dontRotateText) {\n      // radius -= angle / Math.PI * 50\n      radius -= 10; // TODO change magic number - 20200505\n    }\n\n    let pos = this.getPosFromAngle(origin, angle, radius);\n    let x = pos[0];\n    let y = pos[1];\n    this.ctx.translate(x, y);\n\n    if (!dontRotateText) {\n      this.ctx.rotate(angle);\n    }\n\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = \"middle\";\n    this.ctx.fillText(text, 0, 0); // * Math.sin((angle - Math.PI) / 2));\n    // this.ctx.fillText(angle.toFixed(2), 0, 10);\n\n    this.ctx.restore();\n  }\n\n  getPosFromAngle(origin, angle, radius) {\n    let x = origin[0];\n    let y = origin[1];\n    return [x + Math.sin(Math.PI - angle) * radius, y + Math.cos(Math.PI - angle) * radius];\n  }\n\n  drawDivision(origin, radius, division, length, drawNumbers) {\n    for (let i = 0; i < division; i++) {\n      let baseAngle = 2 * Math.PI / division * i; // let angleOffset = this.props.heading * Math.PI / 180;\n\n      let angleOffset = 0;\n      this.drawCompassLine(origin, baseAngle + angleOffset, radius, length);\n\n      if (drawNumbers) {\n        let angleText = baseAngle / Math.PI * 180 <= 180 ? mod(baseAngle / Math.PI * 180, 360) : mod(360 - baseAngle / Math.PI * 180, 360);\n        this.drawAngleText(this.data.origin, baseAngle + angleOffset, radius - length, angleText.toFixed(0), true);\n      }\n    }\n  }\n\n  drawCompassLine(origin, angle, radius, length) {\n    let end = this.getPosFromAngle(origin, angle, radius);\n    let start = this.getPosFromAngle(origin, angle, radius - length);\n\n    if (radius === 0) {// start = [250, 250]\n      // end = [207, 277]\n      // console.log(start[0])\n      // console.log(end[1])\n    }\n\n    this.ctx.moveTo(start[0], start[1]);\n    this.ctx.lineTo(end[0], end[1]); // this.ctx.moveTo(250, 250);\n    // this.ctx.lineTo(207, 277);\n  }\n\n}\n\nexport default DrawHelper;","map":{"version":3,"sources":["/home/kaappo/testit/canvas/src/components/helpers.js"],"names":["mod","DrawHelper","constructor","canvas","ctx","drawAngleText","origin","angle","radius","text","dontRotateText","undefined","save","pos","getPosFromAngle","x","y","translate","rotate","textAlign","textBaseline","fillText","restore","Math","sin","PI","cos","drawDivision","division","length","drawNumbers","i","baseAngle","angleOffset","drawCompassLine","angleText","data","toFixed","end","start","moveTo","lineTo"],"mappings":"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","sourcesContent":["import { mod } from \"mathjs\";\n\n\nclass DrawHelper {\n    constructor (canvas, ctx) {\n        this.canvas = canvas;\n        this.ctx = ctx;\n        // this.radius = radius;\n        // this.arcCenterOffsetY = arcCenterOffsetY;\n    }\n    \n    drawAngleText (origin, angle, radius, text, dontRotateText) {\n        if (dontRotateText === undefined) {\n            dontRotateText = false;\n        }\n        \n        this.ctx.save();\n\n        if (dontRotateText) {\n            // radius -= angle / Math.PI * 50\n            radius -= 10;  // TODO change magic number - 20200505\n        }\n\n        let pos = this.getPosFromAngle(origin, angle, radius)\n        let x = pos[0];\n        let y = pos[1];\n\n        this.ctx.translate(x, y);\n        if (!dontRotateText) {\n            this.ctx.rotate(angle);\n        }\n    \n        this.ctx.textAlign = 'center';\n        this.ctx.textBaseline = \"middle\";\n        this.ctx.fillText(text, 0, 0)// * Math.sin((angle - Math.PI) / 2));\n        // this.ctx.fillText(angle.toFixed(2), 0, 10);\n    \n        this.ctx.restore();\n    \n    }\n    \n    getPosFromAngle(origin, angle, radius) {\n        let x = origin[0]\n        let y = origin[1]\n        return [x + Math.sin(Math.PI - angle) * radius, y + Math.cos(Math.PI - angle) * radius]\n    }\n\n    drawDivision(origin, radius, division, length, drawNumbers) {\n\n        for (let i = 0; i < division; i++) {\n            let baseAngle = 2 * Math.PI / division * i;\n            // let angleOffset = this.props.heading * Math.PI / 180;\n            let angleOffset = 0;\n\n            this.drawCompassLine(origin, baseAngle + angleOffset, radius, length)\n            if (drawNumbers) {\n                let angleText = baseAngle / Math.PI * 180 <= 180 ? mod(baseAngle / Math.PI * 180, 360) : mod(360 - baseAngle / Math.PI * 180, 360);\n                this.drawAngleText(this.data.origin, baseAngle + angleOffset, radius - length, angleText.toFixed(0), true)\n            }\n        }\n    }\n\n    drawCompassLine(origin, angle, radius, length) {\n        let end = this.getPosFromAngle(origin, angle, radius)\n        let start = this.getPosFromAngle(origin, angle, radius - length)\n        if (radius === 0) {\n            // start = [250, 250]\n            // end = [207, 277]\n            // console.log(start[0])\n            // console.log(end[1])\n        }\n        this.ctx.moveTo(start[0], start[1]);\n        this.ctx.lineTo(end[0], end[1]);\n        // this.ctx.moveTo(250, 250);\n        // this.ctx.lineTo(207, 277);\n    }\n}\n\n\nexport default DrawHelper"]},"metadata":{},"sourceType":"module"}