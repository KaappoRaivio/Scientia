{"ast":null,"code":"class DrawHelper {\n  constructor(canvas, ctx) {\n    this.canvas = canvas;\n    this.ctx = ctx; // this.radius = radius;\n    // this.arcCenterOffsetY = arcCenterOffsetY;\n  }\n\n  drawAngleText(origin, angle, radius, text, dontRotateText) {\n    if (dontRotateText === undefined) {\n      dontRotateText = false;\n    }\n\n    this.ctx.save();\n\n    if (dontRotateText) {\n      // radius -= angle / Math.PI * 50\n      radius -= 10; // TODO change magic number - 20200505\n    }\n\n    let pos = this.getPosFromAngle(origin, angle, radius);\n    let x = pos[0];\n    let y = pos[1];\n    this.ctx.translate(x, y);\n\n    if (!dontRotateText) {\n      this.ctx.rotate(angle);\n    }\n\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = \"middle\";\n    this.ctx.fillText(text, 0, 0); // * Math.sin((angle - Math.PI) / 2));\n    // this.ctx.fillText(angle.toFixed(2), 0, 10);\n\n    this.ctx.restore();\n  }\n\n  getPosFromAngle(origin, angle, radius) {\n    let x = origin[0];\n    let y = origin[1];\n    return [x + Math.sin(Math.PI - angle) * radius, y + Math.cos(Math.PI - angle) * radius];\n  }\n\n  drawCompassLine(origin, angle, radius, length) {\n    let end = this.getPosFromAngle(origin, angle, radius);\n    let start = this.getPosFromAngle(origin, angle, radius - length);\n\n    if (radius === 50) {} // console.log(start)\n    // console.log(end)\n    // this.ctx.moveTo(start[0], start[1]);\n    // this.ctx.lineTo(end[0], end[1]);\n\n\n    this.ctx.moveTo(250, 250);\n    this.ctx.lineTo(300, 300);\n  }\n\n}\n\nexport default DrawHelper;","map":{"version":3,"sources":["/home/kaappo/testit/canvas/src/components/helpers.js"],"names":["DrawHelper","constructor","canvas","ctx","drawAngleText","origin","angle","radius","text","dontRotateText","undefined","save","pos","getPosFromAngle","x","y","translate","rotate","textAlign","textBaseline","fillText","restore","Math","sin","PI","cos","drawCompassLine","length","end","start","moveTo","lineTo"],"mappings":"AAAA,MAAMA,UAAN,CAAiB;AACbC,EAAAA,WAAW,CAAEC,MAAF,EAAUC,GAAV,EAAe;AACtB,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,GAAL,GAAWA,GAAX,CAFsB,CAGtB;AACA;AACH;;AAEDC,EAAAA,aAAa,CAAEC,MAAF,EAAUC,KAAV,EAAiBC,MAAjB,EAAyBC,IAAzB,EAA+BC,cAA/B,EAA+C;AACxD,QAAIA,cAAc,KAAKC,SAAvB,EAAkC;AAC9BD,MAAAA,cAAc,GAAG,KAAjB;AACH;;AAED,SAAKN,GAAL,CAASQ,IAAT;;AAEA,QAAIF,cAAJ,EAAoB;AAChB;AACAF,MAAAA,MAAM,IAAI,EAAV,CAFgB,CAED;AAClB;;AAED,QAAIK,GAAG,GAAG,KAAKC,eAAL,CAAqBR,MAArB,EAA6BC,KAA7B,EAAoCC,MAApC,CAAV;AACA,QAAIO,CAAC,GAAGF,GAAG,CAAC,CAAD,CAAX;AACA,QAAIG,CAAC,GAAGH,GAAG,CAAC,CAAD,CAAX;AAEA,SAAKT,GAAL,CAASa,SAAT,CAAmBF,CAAnB,EAAsBC,CAAtB;;AACA,QAAI,CAACN,cAAL,EAAqB;AACjB,WAAKN,GAAL,CAASc,MAAT,CAAgBX,KAAhB;AACH;;AAED,SAAKH,GAAL,CAASe,SAAT,GAAqB,QAArB;AACA,SAAKf,GAAL,CAASgB,YAAT,GAAwB,QAAxB;AACA,SAAKhB,GAAL,CAASiB,QAAT,CAAkBZ,IAAlB,EAAwB,CAAxB,EAA2B,CAA3B,EAvBwD,CAuB3B;AAC7B;;AAEA,SAAKL,GAAL,CAASkB,OAAT;AAEH;;AAEDR,EAAAA,eAAe,CAACR,MAAD,EAASC,KAAT,EAAgBC,MAAhB,EAAwB;AACnC,QAAIO,CAAC,GAAGT,MAAM,CAAC,CAAD,CAAd;AACA,QAAIU,CAAC,GAAGV,MAAM,CAAC,CAAD,CAAd;AACA,WAAO,CAACS,CAAC,GAAGQ,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,EAAL,GAAUlB,KAAnB,IAA4BC,MAAjC,EAAyCQ,CAAC,GAAGO,IAAI,CAACG,GAAL,CAASH,IAAI,CAACE,EAAL,GAAUlB,KAAnB,IAA4BC,MAAzE,CAAP;AACH;;AAEDmB,EAAAA,eAAe,CAACrB,MAAD,EAASC,KAAT,EAAgBC,MAAhB,EAAwBoB,MAAxB,EAAgC;AAC3C,QAAIC,GAAG,GAAG,KAAKf,eAAL,CAAqBR,MAArB,EAA6BC,KAA7B,EAAoCC,MAApC,CAAV;AACA,QAAIsB,KAAK,GAAG,KAAKhB,eAAL,CAAqBR,MAArB,EAA6BC,KAA7B,EAAoCC,MAAM,GAAGoB,MAA7C,CAAZ;;AACA,QAAIpB,MAAM,KAAK,EAAf,EAAmB,CAGlB,CAHD,CACI;AACA;AAEJ;AACA;;;AACA,SAAKJ,GAAL,CAAS2B,MAAT,CAAgB,GAAhB,EAAqB,GAArB;AACA,SAAK3B,GAAL,CAAS4B,MAAT,CAAgB,GAAhB,EAAqB,GAArB;AACH;;AAvDY;;AA2DjB,eAAe/B,UAAf","sourcesContent":["class DrawHelper {\n    constructor (canvas, ctx) {\n        this.canvas = canvas;\n        this.ctx = ctx;\n        // this.radius = radius;\n        // this.arcCenterOffsetY = arcCenterOffsetY;\n    }\n    \n    drawAngleText (origin, angle, radius, text, dontRotateText) {\n        if (dontRotateText === undefined) {\n            dontRotateText = false;\n        }\n        \n        this.ctx.save();\n\n        if (dontRotateText) {\n            // radius -= angle / Math.PI * 50\n            radius -= 10;  // TODO change magic number - 20200505\n        }\n\n        let pos = this.getPosFromAngle(origin, angle, radius)\n        let x = pos[0];\n        let y = pos[1];\n\n        this.ctx.translate(x, y);\n        if (!dontRotateText) {\n            this.ctx.rotate(angle);\n        }\n    \n        this.ctx.textAlign = 'center';\n        this.ctx.textBaseline = \"middle\";\n        this.ctx.fillText(text, 0, 0)// * Math.sin((angle - Math.PI) / 2));\n        // this.ctx.fillText(angle.toFixed(2), 0, 10);\n    \n        this.ctx.restore();\n    \n    }\n    \n    getPosFromAngle(origin, angle, radius) {\n        let x = origin[0]\n        let y = origin[1]\n        return [x + Math.sin(Math.PI - angle) * radius, y + Math.cos(Math.PI - angle) * radius]\n    }\n\n    drawCompassLine(origin, angle, radius, length) {\n        let end = this.getPosFromAngle(origin, angle, radius)\n        let start = this.getPosFromAngle(origin, angle, radius - length)\n        if (radius === 50) {\n            // console.log(start)\n            // console.log(end)\n        }\n        // this.ctx.moveTo(start[0], start[1]);\n        // this.ctx.lineTo(end[0], end[1]);\n        this.ctx.moveTo(250, 250);\n        this.ctx.lineTo(300, 300);\n    }\n}\n\n\nexport default DrawHelper"]},"metadata":{},"sourceType":"module"}