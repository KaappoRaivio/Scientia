{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { expm1Number } from '../../plain/number';\nvar name = 'expm1';\nvar dependencies = ['typed', 'Complex'];\nexport var createExpm1 = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      _Complex = _ref.Complex;\n  /**\n   * Calculate the value of subtracting 1 from the exponential value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.expm1(x)\n   *\n   * Examples:\n   *\n   *    math.expm1(2)                      // returns number 6.38905609893065\n   *    math.pow(math.e, 2) - 1            // returns number 6.3890560989306495\n   *    math.log(math.expm1(2) + 1)        // returns number 2\n   *\n   *    math.expm1([1, 2, 3])\n   *    // returns Array [\n   *    //   1.718281828459045,\n   *    //   6.3890560989306495,\n   *    //   19.085536923187668\n   *    // ]\n   *\n   * See also:\n   *\n   *    exp, log, pow\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to apply expm1\n   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`\n   */\n\n  var expm1 = typed(name, {\n    number: expm1Number,\n    Complex: function Complex(x) {\n      var r = Math.exp(x.re);\n      return new _Complex(r * Math.cos(x.im) - 1, r * Math.sin(x.im));\n    },\n    BigNumber: function BigNumber(x) {\n      return x.exp().minus(1);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, expm1);\n    }\n  });\n  return expm1;\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/arithmetic/expm1.js"],"names":["factory","deepMap","expm1Number","name","dependencies","createExpm1","_ref","typed","_Complex","Complex","expm1","number","x","r","Math","exp","re","cos","im","sin","BigNumber","minus","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,SAAV,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAClF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,QAAQ,GAAGF,IAAI,CAACG,OADpB;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,MAAIC,KAAK,GAAGH,KAAK,CAACJ,IAAD,EAAO;AACtBQ,IAAAA,MAAM,EAAET,WADc;AAEtBO,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBG,CAAjB,EAAoB;AAC3B,UAAIC,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASH,CAAC,CAACI,EAAX,CAAR;AACA,aAAO,IAAIR,QAAJ,CAAaK,CAAC,GAAGC,IAAI,CAACG,GAAL,CAASL,CAAC,CAACM,EAAX,CAAJ,GAAqB,CAAlC,EAAqCL,CAAC,GAAGC,IAAI,CAACK,GAAL,CAASP,CAAC,CAACM,EAAX,CAAzC,CAAP;AACD,KALqB;AAMtBE,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBR,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACG,GAAF,GAAQM,KAAR,CAAc,CAAd,CAAP;AACD,KARqB;AAStB,sBAAkB,SAASC,WAAT,CAAqBV,CAArB,EAAwB;AACxC,aAAOX,OAAO,CAACW,CAAD,EAAIF,KAAJ,CAAd;AACD;AAXqB,GAAP,CAAjB;AAaA,SAAOA,KAAP;AACD,CA9C8C,CAAxC","sourcesContent":["import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { expm1Number } from '../../plain/number';\nvar name = 'expm1';\nvar dependencies = ['typed', 'Complex'];\nexport var createExpm1 = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      _Complex = _ref.Complex;\n\n  /**\n   * Calculate the value of subtracting 1 from the exponential value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.expm1(x)\n   *\n   * Examples:\n   *\n   *    math.expm1(2)                      // returns number 6.38905609893065\n   *    math.pow(math.e, 2) - 1            // returns number 6.3890560989306495\n   *    math.log(math.expm1(2) + 1)        // returns number 2\n   *\n   *    math.expm1([1, 2, 3])\n   *    // returns Array [\n   *    //   1.718281828459045,\n   *    //   6.3890560989306495,\n   *    //   19.085536923187668\n   *    // ]\n   *\n   * See also:\n   *\n   *    exp, log, pow\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to apply expm1\n   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`\n   */\n  var expm1 = typed(name, {\n    number: expm1Number,\n    Complex: function Complex(x) {\n      var r = Math.exp(x.re);\n      return new _Complex(r * Math.cos(x.im) - 1, r * Math.sin(x.im));\n    },\n    BigNumber: function BigNumber(x) {\n      return x.exp().minus(1);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, expm1);\n    }\n  });\n  return expm1;\n});"]},"metadata":{},"sourceType":"module"}