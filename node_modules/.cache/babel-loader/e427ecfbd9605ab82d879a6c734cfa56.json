{"ast":null,"code":"import { factory } from '../../utils/factory';\nvar name = 'Spa';\nvar dependencies = ['addScalar', 'equalScalar', 'FibonacciHeap'];\nexport var createSpaClass = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var addScalar = _ref.addScalar,\n      equalScalar = _ref.equalScalar,\n      FibonacciHeap = _ref.FibonacciHeap;\n  /**\n   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array\n   * of the vector elements and an ordered list of non-zero elements.\n   */\n\n  function Spa() {\n    if (!(this instanceof Spa)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // allocate vector, TODO use typed arrays\n\n\n    this._values = [];\n    this._heap = new FibonacciHeap();\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Spa.prototype.type = 'Spa';\n  Spa.prototype.isSpa = true;\n  /**\n   * Set the value for index i.\n   *\n   * @param {number} i                       The index\n   * @param {number | BigNumber | Complex}   The value at index i\n   */\n\n  Spa.prototype.set = function (i, v) {\n    // check we have a value @ i\n    if (!this._values[i]) {\n      // insert in heap\n      var node = this._heap.insert(i, v); // set the value @ i\n\n\n      this._values[i] = node;\n    } else {\n      // update the value @ i\n      this._values[i].value = v;\n    }\n  };\n\n  Spa.prototype.get = function (i) {\n    var node = this._values[i];\n\n    if (node) {\n      return node.value;\n    }\n\n    return 0;\n  };\n\n  Spa.prototype.accumulate = function (i, v) {\n    // node @ i\n    var node = this._values[i];\n\n    if (!node) {\n      // insert in heap\n      node = this._heap.insert(i, v); // initialize value\n\n      this._values[i] = node;\n    } else {\n      // accumulate value\n      node.value = addScalar(node.value, v);\n    }\n  };\n\n  Spa.prototype.forEach = function (from, to, callback) {\n    // references\n    var heap = this._heap;\n    var values = this._values; // nodes\n\n    var nodes = []; // node with minimum key, save it\n\n    var node = heap.extractMinimum();\n\n    if (node) {\n      nodes.push(node);\n    } // extract nodes from heap (ordered)\n\n\n    while (node && node.key <= to) {\n      // check it is in range\n      if (node.key >= from) {\n        // check value is not zero\n        if (!equalScalar(node.value, 0)) {\n          // invoke callback\n          callback(node.key, node.value, this);\n        }\n      } // extract next node, save it\n\n\n      node = heap.extractMinimum();\n\n      if (node) {\n        nodes.push(node);\n      }\n    } // reinsert all nodes in heap\n\n\n    for (var i = 0; i < nodes.length; i++) {\n      // current node\n      var n = nodes[i]; // insert node in heap\n\n      node = heap.insert(n.key, n.value); // update values\n\n      values[node.key] = node;\n    }\n  };\n\n  Spa.prototype.swap = function (i, j) {\n    // node @ i and j\n    var nodei = this._values[i];\n    var nodej = this._values[j]; // check we need to insert indeces\n\n    if (!nodei && nodej) {\n      // insert in heap\n      nodei = this._heap.insert(i, nodej.value); // remove from heap\n\n      this._heap.remove(nodej); // set values\n\n\n      this._values[i] = nodei;\n      this._values[j] = undefined;\n    } else if (nodei && !nodej) {\n      // insert in heap\n      nodej = this._heap.insert(j, nodei.value); // remove from heap\n\n      this._heap.remove(nodei); // set values\n\n\n      this._values[j] = nodej;\n      this._values[i] = undefined;\n    } else if (nodei && nodej) {\n      // swap values\n      var v = nodei.value;\n      nodei.value = nodej.value;\n      nodej.value = v;\n    }\n  };\n\n  return Spa;\n}, {\n  isClass: true\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/type/matrix/Spa.js"],"names":["factory","name","dependencies","createSpaClass","_ref","addScalar","equalScalar","FibonacciHeap","Spa","SyntaxError","_values","_heap","prototype","type","isSpa","set","i","v","node","insert","value","get","accumulate","forEach","from","to","callback","heap","values","nodes","extractMinimum","push","key","length","n","swap","j","nodei","nodej","remove","undefined","isClass"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory';\nvar name = 'Spa';\nvar dependencies = ['addScalar', 'equalScalar', 'FibonacciHeap'];\nexport var createSpaClass = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var addScalar = _ref.addScalar,\n      equalScalar = _ref.equalScalar,\n      FibonacciHeap = _ref.FibonacciHeap;\n\n  /**\n   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array\n   * of the vector elements and an ordered list of non-zero elements.\n   */\n  function Spa() {\n    if (!(this instanceof Spa)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // allocate vector, TODO use typed arrays\n\n\n    this._values = [];\n    this._heap = new FibonacciHeap();\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Spa.prototype.type = 'Spa';\n  Spa.prototype.isSpa = true;\n  /**\n   * Set the value for index i.\n   *\n   * @param {number} i                       The index\n   * @param {number | BigNumber | Complex}   The value at index i\n   */\n\n  Spa.prototype.set = function (i, v) {\n    // check we have a value @ i\n    if (!this._values[i]) {\n      // insert in heap\n      var node = this._heap.insert(i, v); // set the value @ i\n\n\n      this._values[i] = node;\n    } else {\n      // update the value @ i\n      this._values[i].value = v;\n    }\n  };\n\n  Spa.prototype.get = function (i) {\n    var node = this._values[i];\n\n    if (node) {\n      return node.value;\n    }\n\n    return 0;\n  };\n\n  Spa.prototype.accumulate = function (i, v) {\n    // node @ i\n    var node = this._values[i];\n\n    if (!node) {\n      // insert in heap\n      node = this._heap.insert(i, v); // initialize value\n\n      this._values[i] = node;\n    } else {\n      // accumulate value\n      node.value = addScalar(node.value, v);\n    }\n  };\n\n  Spa.prototype.forEach = function (from, to, callback) {\n    // references\n    var heap = this._heap;\n    var values = this._values; // nodes\n\n    var nodes = []; // node with minimum key, save it\n\n    var node = heap.extractMinimum();\n\n    if (node) {\n      nodes.push(node);\n    } // extract nodes from heap (ordered)\n\n\n    while (node && node.key <= to) {\n      // check it is in range\n      if (node.key >= from) {\n        // check value is not zero\n        if (!equalScalar(node.value, 0)) {\n          // invoke callback\n          callback(node.key, node.value, this);\n        }\n      } // extract next node, save it\n\n\n      node = heap.extractMinimum();\n\n      if (node) {\n        nodes.push(node);\n      }\n    } // reinsert all nodes in heap\n\n\n    for (var i = 0; i < nodes.length; i++) {\n      // current node\n      var n = nodes[i]; // insert node in heap\n\n      node = heap.insert(n.key, n.value); // update values\n\n      values[node.key] = node;\n    }\n  };\n\n  Spa.prototype.swap = function (i, j) {\n    // node @ i and j\n    var nodei = this._values[i];\n    var nodej = this._values[j]; // check we need to insert indeces\n\n    if (!nodei && nodej) {\n      // insert in heap\n      nodei = this._heap.insert(i, nodej.value); // remove from heap\n\n      this._heap.remove(nodej); // set values\n\n\n      this._values[i] = nodei;\n      this._values[j] = undefined;\n    } else if (nodei && !nodej) {\n      // insert in heap\n      nodej = this._heap.insert(j, nodei.value); // remove from heap\n\n      this._heap.remove(nodei); // set values\n\n\n      this._values[j] = nodej;\n      this._values[i] = undefined;\n    } else if (nodei && nodej) {\n      // swap values\n      var v = nodei.value;\n      nodei.value = nodej.value;\n      nodej.value = v;\n    }\n  };\n\n  return Spa;\n}, {\n  isClass: true\n});"]},"metadata":{},"sourceType":"module"}