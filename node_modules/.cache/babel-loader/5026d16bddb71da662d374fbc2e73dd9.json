{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { isInteger } from '../../utils/number';\nimport { arraySize as size } from '../../utils/array';\nimport { powNumber } from '../../plain/number';\nvar name = 'pow';\nvar dependencies = ['typed', 'config', 'identity', 'multiply', 'matrix', 'fraction', 'number', 'Complex'];\nexport var createPow = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      identity = _ref.identity,\n      multiply = _ref.multiply,\n      matrix = _ref.matrix,\n      number = _ref.number,\n      fraction = _ref.fraction,\n      Complex = _ref.Complex;\n  /**\n   * Calculates the power of x to y, `x ^ y`.\n   * Matrix exponentiation is supported for square matrices `x`, and positive\n   * integer exponents `y`.\n   *\n   * For cubic roots of negative numbers, the function returns the principal\n   * root by default. In order to let the function return the real root,\n   * math.js can be configured with `math.config({predictable: true})`.\n   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.\n   *\n   * Syntax:\n   *\n   *    math.pow(x, y)\n   *\n   * Examples:\n   *\n   *    math.pow(2, 3)               // returns number 8\n   *\n   *    const a = math.complex(2, 3)\n   *    math.pow(a, 2)                // returns Complex -5 + 12i\n   *\n   *    const b = [[1, 2], [4, 3]]\n   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]\n   *\n   * See also:\n   *\n   *    multiply, sqrt, cbrt, nthRoot\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex} y                          The exponent\n   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`\n   */\n\n  return typed(name, {\n    'number, number': _pow,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.pow(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isInteger() || x >= 0 || config.predictable) {\n        return x.pow(y);\n      } else {\n        return new Complex(x.toNumber(), 0).pow(y.toNumber(), 0);\n      }\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      if (y.d !== 1) {\n        if (config.predictable) {\n          throw new Error('Function pow does not support non-integer exponents for fractions.');\n        } else {\n          return _pow(x.valueOf(), y.valueOf());\n        }\n      } else {\n        return x.pow(y);\n      }\n    },\n    'Array, number': _powArray,\n    'Array, BigNumber': function ArrayBigNumber(x, y) {\n      return _powArray(x, y.toNumber());\n    },\n    'Matrix, number': _powMatrix,\n    'Matrix, BigNumber': function MatrixBigNumber(x, y) {\n      return _powMatrix(x, y.toNumber());\n    },\n    'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {\n      return x.pow(y);\n    }\n  });\n  /**\n   * Calculates the power of x to y, x^y, for two numbers.\n   * @param {number} x\n   * @param {number} y\n   * @return {number | Complex} res\n   * @private\n   */\n\n  function _pow(x, y) {\n    // Alternatively could define a 'realmode' config option or something, but\n    // 'predictable' will work for now\n    if (config.predictable && !isInteger(y) && x < 0) {\n      // Check to see if y can be represented as a fraction\n      try {\n        var yFrac = fraction(y);\n        var yNum = number(yFrac);\n\n        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {\n          if (yFrac.d % 2 === 1) {\n            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);\n          }\n        }\n      } catch (ex) {} // fraction() throws an error if y is Infinity, etc.\n      // Unable to express y as a fraction, so continue on\n\n    } // **for predictable mode** x^Infinity === NaN if x < -1\n    // N.B. this behavour is different from `Math.pow` which gives\n    // (-2)^Infinity === Infinity\n\n\n    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {\n      return NaN;\n    }\n\n    if (isInteger(y) || x >= 0 || config.predictable) {\n      return powNumber(x, y);\n    } else {\n      // TODO: the following infinity checks are duplicated from powNumber. Deduplicate this somehow\n      // x^Infinity === 0 if -1 < x < 1\n      // A real number 0 is returned instead of complex(0)\n      if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n        return 0;\n      }\n\n      return new Complex(x, 0).pow(y, 0);\n    }\n  }\n  /**\n   * Calculate the power of a 2d array\n   * @param {Array} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Array}\n   * @private\n   */\n\n\n  function _powArray(x, y) {\n    if (!isInteger(y) || y < 0) {\n      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');\n    } // verify that A is a 2 dimensional square matrix\n\n\n    var s = size(x);\n\n    if (s.length !== 2) {\n      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');\n    }\n\n    if (s[0] !== s[1]) {\n      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');\n    }\n\n    var res = identity(s[0]).valueOf();\n    var px = x;\n\n    while (y >= 1) {\n      if ((y & 1) === 1) {\n        res = multiply(px, res);\n      }\n\n      y >>= 1;\n      px = multiply(px, px);\n    }\n\n    return res;\n  }\n  /**\n   * Calculate the power of a 2d matrix\n   * @param {Matrix} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Matrix}\n   * @private\n   */\n\n\n  function _powMatrix(x, y) {\n    return matrix(_powArray(x.valueOf(), y));\n  }\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/arithmetic/pow.js"],"names":["factory","isInteger","arraySize","size","powNumber","name","dependencies","createPow","_ref","typed","config","identity","multiply","matrix","number","fraction","Complex","_pow","ComplexComplex","x","y","pow","BigNumberBigNumber","predictable","toNumber","FractionFraction","d","Error","valueOf","_powArray","ArrayBigNumber","_powMatrix","MatrixBigNumber","UnitNumberBigNumber","yFrac","yNum","Math","abs","n","ex","Infinity","NaN","TypeError","s","length","res","px"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory';\nimport { isInteger } from '../../utils/number';\nimport { arraySize as size } from '../../utils/array';\nimport { powNumber } from '../../plain/number';\nvar name = 'pow';\nvar dependencies = ['typed', 'config', 'identity', 'multiply', 'matrix', 'fraction', 'number', 'Complex'];\nexport var createPow = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      identity = _ref.identity,\n      multiply = _ref.multiply,\n      matrix = _ref.matrix,\n      number = _ref.number,\n      fraction = _ref.fraction,\n      Complex = _ref.Complex;\n\n  /**\n   * Calculates the power of x to y, `x ^ y`.\n   * Matrix exponentiation is supported for square matrices `x`, and positive\n   * integer exponents `y`.\n   *\n   * For cubic roots of negative numbers, the function returns the principal\n   * root by default. In order to let the function return the real root,\n   * math.js can be configured with `math.config({predictable: true})`.\n   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.\n   *\n   * Syntax:\n   *\n   *    math.pow(x, y)\n   *\n   * Examples:\n   *\n   *    math.pow(2, 3)               // returns number 8\n   *\n   *    const a = math.complex(2, 3)\n   *    math.pow(a, 2)                // returns Complex -5 + 12i\n   *\n   *    const b = [[1, 2], [4, 3]]\n   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]\n   *\n   * See also:\n   *\n   *    multiply, sqrt, cbrt, nthRoot\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex} y                          The exponent\n   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`\n   */\n  return typed(name, {\n    'number, number': _pow,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.pow(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isInteger() || x >= 0 || config.predictable) {\n        return x.pow(y);\n      } else {\n        return new Complex(x.toNumber(), 0).pow(y.toNumber(), 0);\n      }\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      if (y.d !== 1) {\n        if (config.predictable) {\n          throw new Error('Function pow does not support non-integer exponents for fractions.');\n        } else {\n          return _pow(x.valueOf(), y.valueOf());\n        }\n      } else {\n        return x.pow(y);\n      }\n    },\n    'Array, number': _powArray,\n    'Array, BigNumber': function ArrayBigNumber(x, y) {\n      return _powArray(x, y.toNumber());\n    },\n    'Matrix, number': _powMatrix,\n    'Matrix, BigNumber': function MatrixBigNumber(x, y) {\n      return _powMatrix(x, y.toNumber());\n    },\n    'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {\n      return x.pow(y);\n    }\n  });\n  /**\n   * Calculates the power of x to y, x^y, for two numbers.\n   * @param {number} x\n   * @param {number} y\n   * @return {number | Complex} res\n   * @private\n   */\n\n  function _pow(x, y) {\n    // Alternatively could define a 'realmode' config option or something, but\n    // 'predictable' will work for now\n    if (config.predictable && !isInteger(y) && x < 0) {\n      // Check to see if y can be represented as a fraction\n      try {\n        var yFrac = fraction(y);\n        var yNum = number(yFrac);\n\n        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {\n          if (yFrac.d % 2 === 1) {\n            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);\n          }\n        }\n      } catch (ex) {} // fraction() throws an error if y is Infinity, etc.\n      // Unable to express y as a fraction, so continue on\n\n    } // **for predictable mode** x^Infinity === NaN if x < -1\n    // N.B. this behavour is different from `Math.pow` which gives\n    // (-2)^Infinity === Infinity\n\n\n    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {\n      return NaN;\n    }\n\n    if (isInteger(y) || x >= 0 || config.predictable) {\n      return powNumber(x, y);\n    } else {\n      // TODO: the following infinity checks are duplicated from powNumber. Deduplicate this somehow\n      // x^Infinity === 0 if -1 < x < 1\n      // A real number 0 is returned instead of complex(0)\n      if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n        return 0;\n      }\n\n      return new Complex(x, 0).pow(y, 0);\n    }\n  }\n  /**\n   * Calculate the power of a 2d array\n   * @param {Array} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Array}\n   * @private\n   */\n\n\n  function _powArray(x, y) {\n    if (!isInteger(y) || y < 0) {\n      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');\n    } // verify that A is a 2 dimensional square matrix\n\n\n    var s = size(x);\n\n    if (s.length !== 2) {\n      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');\n    }\n\n    if (s[0] !== s[1]) {\n      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');\n    }\n\n    var res = identity(s[0]).valueOf();\n    var px = x;\n\n    while (y >= 1) {\n      if ((y & 1) === 1) {\n        res = multiply(px, res);\n      }\n\n      y >>= 1;\n      px = multiply(px, px);\n    }\n\n    return res;\n  }\n  /**\n   * Calculate the power of a 2d matrix\n   * @param {Matrix} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Matrix}\n   * @private\n   */\n\n\n  function _powMatrix(x, y) {\n    return matrix(_powArray(x.valueOf(), y));\n  }\n});"]},"metadata":{},"sourceType":"module"}