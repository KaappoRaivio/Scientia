{"ast":null,"code":"import { format } from '../../utils/string';\nimport { typeOf } from '../../utils/is';\nimport { escapeLatex } from '../../utils/latex';\nimport { factory } from '../../utils/factory';\nvar name = 'ConstantNode';\nvar dependencies = ['Node'];\nexport var createConstantNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n  /**\n   * A ConstantNode holds a constant value like a number or string.\n   *\n   * Usage:\n   *\n   *     new ConstantNode(2.3)\n   *     new ConstantNode('hello')\n   *\n   * @param {*} value    Value can be any type (number, BigNumber, string, ...)\n   * @constructor ConstantNode\n   * @extends {Node}\n   */\n\n  function ConstantNode(value) {\n    if (!(this instanceof ConstantNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (arguments.length === 2) {\n      // TODO: remove deprecation error some day (created 2018-01-23)\n      throw new SyntaxError('new ConstantNode(valueStr, valueType) is not supported anymore since math v4.0.0. Use new ConstantNode(value) instead, where value is a non-stringified value.');\n    }\n\n    this.value = value;\n  }\n\n  ConstantNode.prototype = new Node();\n  ConstantNode.prototype.type = 'ConstantNode';\n  ConstantNode.prototype.isConstantNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ConstantNode.prototype._compile = function (math, argNames) {\n    var value = this.value;\n    return function evalConstantNode() {\n      return value;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ConstantNode.prototype.forEach = function (callback) {} // nothing to do, we don't have childs\n\n  /**\n   * Create a new ConstantNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ConstantNode} Returns a clone of the node\n   */\n  ;\n\n  ConstantNode.prototype.map = function (callback) {\n    return this.clone();\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ConstantNode}\n   */\n\n\n  ConstantNode.prototype.clone = function () {\n    return new ConstantNode(this.value);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype._toString = function (options) {\n    return format(this.value, options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype.toHTML = function (options) {\n    var value = this._toString(options);\n\n    switch (typeOf(this.value)) {\n      case 'number':\n      case 'BigNumber':\n      case 'Fraction':\n        return '<span class=\"math-number\">' + value + '</span>';\n\n      case 'string':\n        return '<span class=\"math-string\">' + value + '</span>';\n\n      case 'boolean':\n        return '<span class=\"math-boolean\">' + value + '</span>';\n\n      case 'null':\n        return '<span class=\"math-null-symbol\">' + value + '</span>';\n\n      case 'undefined':\n        return '<span class=\"math-undefined\">' + value + '</span>';\n\n      default:\n        return '<span class=\"math-symbol\">' + value + '</span>';\n    }\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ConstantNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ConstantNode',\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate a ConstantNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SymbolNode\", value: 2.3}`,\n   *                       where mathjs is optional\n   * @returns {ConstantNode}\n   */\n\n\n  ConstantNode.fromJSON = function (json) {\n    return new ConstantNode(json.value);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype._toTex = function (options) {\n    var value = this._toString(options);\n\n    switch (typeOf(this.value)) {\n      case 'string':\n        return '\\\\mathtt{' + escapeLatex(value) + '}';\n\n      case 'number':\n      case 'BigNumber':\n        {\n          var index = value.toLowerCase().indexOf('e');\n\n          if (index !== -1) {\n            return value.substring(0, index) + '\\\\cdot10^{' + value.substring(index + 1) + '}';\n          }\n        }\n        return value;\n\n      case 'Fraction':\n        return this.value.toLatex();\n\n      default:\n        return value;\n    }\n  };\n\n  return ConstantNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/expression/node/ConstantNode.js"],"names":["format","typeOf","escapeLatex","factory","name","dependencies","createConstantNode","_ref","Node","ConstantNode","value","SyntaxError","arguments","length","prototype","type","isConstantNode","_compile","math","argNames","evalConstantNode","forEach","callback","map","clone","_toString","options","toHTML","toJSON","mathjs","fromJSON","json","_toTex","index","toLowerCase","indexOf","substring","toLatex","isClass","isNode"],"mappings":"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","sourcesContent":["import { format } from '../../utils/string';\nimport { typeOf } from '../../utils/is';\nimport { escapeLatex } from '../../utils/latex';\nimport { factory } from '../../utils/factory';\nvar name = 'ConstantNode';\nvar dependencies = ['Node'];\nexport var createConstantNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n\n  /**\n   * A ConstantNode holds a constant value like a number or string.\n   *\n   * Usage:\n   *\n   *     new ConstantNode(2.3)\n   *     new ConstantNode('hello')\n   *\n   * @param {*} value    Value can be any type (number, BigNumber, string, ...)\n   * @constructor ConstantNode\n   * @extends {Node}\n   */\n  function ConstantNode(value) {\n    if (!(this instanceof ConstantNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (arguments.length === 2) {\n      // TODO: remove deprecation error some day (created 2018-01-23)\n      throw new SyntaxError('new ConstantNode(valueStr, valueType) is not supported anymore since math v4.0.0. Use new ConstantNode(value) instead, where value is a non-stringified value.');\n    }\n\n    this.value = value;\n  }\n\n  ConstantNode.prototype = new Node();\n  ConstantNode.prototype.type = 'ConstantNode';\n  ConstantNode.prototype.isConstantNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ConstantNode.prototype._compile = function (math, argNames) {\n    var value = this.value;\n    return function evalConstantNode() {\n      return value;\n    };\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ConstantNode.prototype.forEach = function (callback) {} // nothing to do, we don't have childs\n\n  /**\n   * Create a new ConstantNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ConstantNode} Returns a clone of the node\n   */\n  ;\n\n  ConstantNode.prototype.map = function (callback) {\n    return this.clone();\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ConstantNode}\n   */\n\n\n  ConstantNode.prototype.clone = function () {\n    return new ConstantNode(this.value);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype._toString = function (options) {\n    return format(this.value, options);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype.toHTML = function (options) {\n    var value = this._toString(options);\n\n    switch (typeOf(this.value)) {\n      case 'number':\n      case 'BigNumber':\n      case 'Fraction':\n        return '<span class=\"math-number\">' + value + '</span>';\n\n      case 'string':\n        return '<span class=\"math-string\">' + value + '</span>';\n\n      case 'boolean':\n        return '<span class=\"math-boolean\">' + value + '</span>';\n\n      case 'null':\n        return '<span class=\"math-null-symbol\">' + value + '</span>';\n\n      case 'undefined':\n        return '<span class=\"math-undefined\">' + value + '</span>';\n\n      default:\n        return '<span class=\"math-symbol\">' + value + '</span>';\n    }\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ConstantNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ConstantNode',\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate a ConstantNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SymbolNode\", value: 2.3}`,\n   *                       where mathjs is optional\n   * @returns {ConstantNode}\n   */\n\n\n  ConstantNode.fromJSON = function (json) {\n    return new ConstantNode(json.value);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ConstantNode.prototype._toTex = function (options) {\n    var value = this._toString(options);\n\n    switch (typeOf(this.value)) {\n      case 'string':\n        return '\\\\mathtt{' + escapeLatex(value) + '}';\n\n      case 'number':\n      case 'BigNumber':\n        {\n          var index = value.toLowerCase().indexOf('e');\n\n          if (index !== -1) {\n            return value.substring(0, index) + '\\\\cdot10^{' + value.substring(index + 1) + '}';\n          }\n        }\n        return value;\n\n      case 'Fraction':\n        return this.value.toLatex();\n\n      default:\n        return value;\n    }\n  };\n\n  return ConstantNode;\n}, {\n  isClass: true,\n  isNode: true\n});"]},"metadata":{},"sourceType":"module"}