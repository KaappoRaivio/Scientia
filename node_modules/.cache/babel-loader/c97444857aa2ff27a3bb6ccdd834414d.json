{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { log2Number } from '../../plain/number';\nvar name = 'log2';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createLog2 = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      Complex = _ref.Complex;\n  /**\n   * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log2(x)\n   *\n   * Examples:\n   *\n   *    math.log2(0.03125)           // returns -5\n   *    math.log2(16)                // returns 4\n   *    math.log2(16) / math.log2(2) // returns 4\n   *    math.pow(2, 4)               // returns 16\n   *\n   * See also:\n   *\n   *    exp, log, log1p, log10\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the 2-base logarithm of `x`\n   */\n\n  var log2 = typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return log2Number(x);\n      } else {\n        // negative value -> complex value computation\n        return _log2Complex(new Complex(x, 0));\n      }\n    },\n    Complex: _log2Complex,\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log(2);\n      } else {\n        // downgrade to number, return Complex valued result\n        return _log2Complex(new Complex(x.toNumber(), 0));\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, log2);\n    }\n  });\n  /**\n   * Calculate log2 for a complex value\n   * @param {Complex} x\n   * @returns {Complex}\n   * @private\n   */\n\n  function _log2Complex(x) {\n    var newX = Math.sqrt(x.re * x.re + x.im * x.im);\n    return new Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);\n  }\n\n  return log2;\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/arithmetic/log2.js"],"names":["factory","deepMap","log2Number","name","dependencies","createLog2","_ref","typed","config","Complex","log2","number","x","predictable","_log2Complex","BigNumber","isNegative","log","toNumber","ArrayMatrix","newX","Math","sqrt","re","im","LN2","atan2"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACjF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAAA,MAEIC,OAAO,GAAGH,IAAI,CAACG,OAFnB;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,MAAIC,IAAI,GAAGH,KAAK,CAACJ,IAAD,EAAO;AACrBQ,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB,UAAIA,CAAC,IAAI,CAAL,IAAUJ,MAAM,CAACK,WAArB,EAAkC;AAChC,eAAOX,UAAU,CAACU,CAAD,CAAjB;AACD,OAFD,MAEO;AACL;AACA,eAAOE,YAAY,CAAC,IAAIL,OAAJ,CAAYG,CAAZ,EAAe,CAAf,CAAD,CAAnB;AACD;AACF,KARoB;AASrBH,IAAAA,OAAO,EAAEK,YATY;AAUrBC,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBH,CAAnB,EAAsB;AAC/B,UAAI,CAACA,CAAC,CAACI,UAAF,EAAD,IAAmBR,MAAM,CAACK,WAA9B,EAA2C;AACzC,eAAOD,CAAC,CAACK,GAAF,CAAM,CAAN,CAAP;AACD,OAFD,MAEO;AACL;AACA,eAAOH,YAAY,CAAC,IAAIL,OAAJ,CAAYG,CAAC,CAACM,QAAF,EAAZ,EAA0B,CAA1B,CAAD,CAAnB;AACD;AACF,KAjBoB;AAkBrB,sBAAkB,SAASC,WAAT,CAAqBP,CAArB,EAAwB;AACxC,aAAOX,OAAO,CAACW,CAAD,EAAIF,IAAJ,CAAd;AACD;AApBoB,GAAP,CAAhB;AAsBA;;;;;;;AAOA,WAASI,YAAT,CAAsBF,CAAtB,EAAyB;AACvB,QAAIQ,IAAI,GAAGC,IAAI,CAACC,IAAL,CAAUV,CAAC,CAACW,EAAF,GAAOX,CAAC,CAACW,EAAT,GAAcX,CAAC,CAACY,EAAF,GAAOZ,CAAC,CAACY,EAAjC,CAAX;AACA,WAAO,IAAIf,OAAJ,CAAYY,IAAI,CAACX,IAAL,GAAYW,IAAI,CAACX,IAAL,CAAUU,IAAV,CAAZ,GAA8BC,IAAI,CAACJ,GAAL,CAASG,IAAT,IAAiBC,IAAI,CAACI,GAAhE,EAAqEJ,IAAI,CAACK,KAAL,CAAWd,CAAC,CAACY,EAAb,EAAiBZ,CAAC,CAACW,EAAnB,IAAyBF,IAAI,CAACI,GAAnG,CAAP;AACD;;AAED,SAAOf,IAAP;AACD,CAjE6C,CAAvC","sourcesContent":["import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { log2Number } from '../../plain/number';\nvar name = 'log2';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createLog2 = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      Complex = _ref.Complex;\n\n  /**\n   * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log2(x)\n   *\n   * Examples:\n   *\n   *    math.log2(0.03125)           // returns -5\n   *    math.log2(16)                // returns 4\n   *    math.log2(16) / math.log2(2) // returns 4\n   *    math.pow(2, 4)               // returns 16\n   *\n   * See also:\n   *\n   *    exp, log, log1p, log10\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the 2-base logarithm of `x`\n   */\n  var log2 = typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return log2Number(x);\n      } else {\n        // negative value -> complex value computation\n        return _log2Complex(new Complex(x, 0));\n      }\n    },\n    Complex: _log2Complex,\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log(2);\n      } else {\n        // downgrade to number, return Complex valued result\n        return _log2Complex(new Complex(x.toNumber(), 0));\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, log2);\n    }\n  });\n  /**\n   * Calculate log2 for a complex value\n   * @param {Complex} x\n   * @returns {Complex}\n   * @private\n   */\n\n  function _log2Complex(x) {\n    var newX = Math.sqrt(x.re * x.re + x.im * x.im);\n    return new Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);\n  }\n\n  return log2;\n});"]},"metadata":{},"sourceType":"module"}