{"ast":null,"code":"import { isBigNumber, isMatrix } from '../../utils/is';\nimport { DimensionError } from '../../error/DimensionError';\nimport { ArgumentsError } from '../../error/ArgumentsError';\nimport { isInteger } from '../../utils/number';\nimport { format } from '../../utils/string';\nimport { clone } from '../../utils/object';\nimport { resize as arrayResize } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nvar name = 'resize';\nvar dependencies = ['config', 'matrix'];\nexport var createResize = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var config = _ref.config,\n      matrix = _ref.matrix;\n  /**\n   * Resize a matrix\n   *\n   * Syntax:\n   *\n   *     math.resize(x, size)\n   *     math.resize(x, size, defaultValue)\n   *\n   * Examples:\n   *\n   *     math.resize([1, 2, 3, 4, 5], [3]) // returns Array  [1, 2, 3]\n   *     math.resize([1, 2, 3], [5], 0)    // returns Array  [1, 2, 3, 0, 0]\n   *     math.resize(2, [2, 3], 0)         // returns Matrix [[2, 0, 0], [0, 0, 0]]\n   *     math.resize(\"hello\", [8], \"!\")    // returns string 'hello!!!'\n   *\n   * See also:\n   *\n   *     size, squeeze, subset, reshape\n   *\n   * @param {Array | Matrix | *} x             Matrix to be resized\n   * @param {Array | Matrix} size              One dimensional array with numbers\n   * @param {number | string} [defaultValue=0] Zero by default, except in\n   *                                           case of a string, in that case\n   *                                           defaultValue = ' '\n   * @return {* | Array | Matrix} A resized clone of matrix `x`\n   */\n  // TODO: rework resize to a typed-function\n\n  return function resize(x, size, defaultValue) {\n    if (arguments.length !== 2 && arguments.length !== 3) {\n      throw new ArgumentsError('resize', arguments.length, 2, 3);\n    }\n\n    if (isMatrix(size)) {\n      size = size.valueOf(); // get Array\n    }\n\n    if (isBigNumber(size[0])) {\n      // convert bignumbers to numbers\n      size = size.map(function (value) {\n        return !isBigNumber(value) ? value : value.toNumber();\n      });\n    } // check x is a Matrix\n\n\n    if (isMatrix(x)) {\n      // use optimized matrix implementation, return copy\n      return x.resize(size, defaultValue, true);\n    }\n\n    if (typeof x === 'string') {\n      // resize string\n      return _resizeString(x, size, defaultValue);\n    } // check result should be a matrix\n\n\n    var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';\n\n    if (size.length === 0) {\n      // output a scalar\n      while (Array.isArray(x)) {\n        x = x[0];\n      }\n\n      return clone(x);\n    } else {\n      // output an array/matrix\n      if (!Array.isArray(x)) {\n        x = [x];\n      }\n\n      x = clone(x);\n      var res = arrayResize(x, size, defaultValue);\n      return asMatrix ? matrix(res) : res;\n    }\n  };\n  /**\n   * Resize a string\n   * @param {string} str\n   * @param {number[]} size\n   * @param {string} [defaultChar=' ']\n   * @private\n   */\n\n  function _resizeString(str, size, defaultChar) {\n    if (defaultChar !== undefined) {\n      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {\n        throw new TypeError('Single character expected as defaultValue');\n      }\n    } else {\n      defaultChar = ' ';\n    }\n\n    if (size.length !== 1) {\n      throw new DimensionError(size.length, 1);\n    }\n\n    var len = size[0];\n\n    if (typeof len !== 'number' || !isInteger(len)) {\n      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(size) + ')');\n    }\n\n    if (str.length > len) {\n      return str.substring(0, len);\n    } else if (str.length < len) {\n      var res = str;\n\n      for (var i = 0, ii = len - str.length; i < ii; i++) {\n        res += defaultChar;\n      }\n\n      return res;\n    } else {\n      return str;\n    }\n  }\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/matrix/resize.js"],"names":["isBigNumber","isMatrix","DimensionError","ArgumentsError","isInteger","format","clone","resize","arrayResize","factory","name","dependencies","createResize","_ref","config","matrix","x","size","defaultValue","arguments","length","valueOf","map","value","toNumber","_resizeString","asMatrix","Array","isArray","res","str","defaultChar","undefined","TypeError","len","substring","i","ii"],"mappings":"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","sourcesContent":["import { isBigNumber, isMatrix } from '../../utils/is';\nimport { DimensionError } from '../../error/DimensionError';\nimport { ArgumentsError } from '../../error/ArgumentsError';\nimport { isInteger } from '../../utils/number';\nimport { format } from '../../utils/string';\nimport { clone } from '../../utils/object';\nimport { resize as arrayResize } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nvar name = 'resize';\nvar dependencies = ['config', 'matrix'];\nexport var createResize = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var config = _ref.config,\n      matrix = _ref.matrix;\n\n  /**\n   * Resize a matrix\n   *\n   * Syntax:\n   *\n   *     math.resize(x, size)\n   *     math.resize(x, size, defaultValue)\n   *\n   * Examples:\n   *\n   *     math.resize([1, 2, 3, 4, 5], [3]) // returns Array  [1, 2, 3]\n   *     math.resize([1, 2, 3], [5], 0)    // returns Array  [1, 2, 3, 0, 0]\n   *     math.resize(2, [2, 3], 0)         // returns Matrix [[2, 0, 0], [0, 0, 0]]\n   *     math.resize(\"hello\", [8], \"!\")    // returns string 'hello!!!'\n   *\n   * See also:\n   *\n   *     size, squeeze, subset, reshape\n   *\n   * @param {Array | Matrix | *} x             Matrix to be resized\n   * @param {Array | Matrix} size              One dimensional array with numbers\n   * @param {number | string} [defaultValue=0] Zero by default, except in\n   *                                           case of a string, in that case\n   *                                           defaultValue = ' '\n   * @return {* | Array | Matrix} A resized clone of matrix `x`\n   */\n  // TODO: rework resize to a typed-function\n  return function resize(x, size, defaultValue) {\n    if (arguments.length !== 2 && arguments.length !== 3) {\n      throw new ArgumentsError('resize', arguments.length, 2, 3);\n    }\n\n    if (isMatrix(size)) {\n      size = size.valueOf(); // get Array\n    }\n\n    if (isBigNumber(size[0])) {\n      // convert bignumbers to numbers\n      size = size.map(function (value) {\n        return !isBigNumber(value) ? value : value.toNumber();\n      });\n    } // check x is a Matrix\n\n\n    if (isMatrix(x)) {\n      // use optimized matrix implementation, return copy\n      return x.resize(size, defaultValue, true);\n    }\n\n    if (typeof x === 'string') {\n      // resize string\n      return _resizeString(x, size, defaultValue);\n    } // check result should be a matrix\n\n\n    var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';\n\n    if (size.length === 0) {\n      // output a scalar\n      while (Array.isArray(x)) {\n        x = x[0];\n      }\n\n      return clone(x);\n    } else {\n      // output an array/matrix\n      if (!Array.isArray(x)) {\n        x = [x];\n      }\n\n      x = clone(x);\n      var res = arrayResize(x, size, defaultValue);\n      return asMatrix ? matrix(res) : res;\n    }\n  };\n  /**\n   * Resize a string\n   * @param {string} str\n   * @param {number[]} size\n   * @param {string} [defaultChar=' ']\n   * @private\n   */\n\n  function _resizeString(str, size, defaultChar) {\n    if (defaultChar !== undefined) {\n      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {\n        throw new TypeError('Single character expected as defaultValue');\n      }\n    } else {\n      defaultChar = ' ';\n    }\n\n    if (size.length !== 1) {\n      throw new DimensionError(size.length, 1);\n    }\n\n    var len = size[0];\n\n    if (typeof len !== 'number' || !isInteger(len)) {\n      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(size) + ')');\n    }\n\n    if (str.length > len) {\n      return str.substring(0, len);\n    } else if (str.length < len) {\n      var res = str;\n\n      for (var i = 0, ii = len - str.length; i < ii; i++) {\n        res += defaultChar;\n      }\n\n      return res;\n    } else {\n      return str;\n    }\n  }\n});"]},"metadata":{},"sourceType":"module"}