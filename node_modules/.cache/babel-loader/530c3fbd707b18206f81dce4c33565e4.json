{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { asechNumber } from '../../plain/number';\nvar name = 'asech';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport var createAsech = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      Complex = _ref.Complex,\n      _BigNumber = _ref.BigNumber;\n  /**\n   * Calculate the hyperbolic arcsecant of a value,\n   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.asech(x)\n   *\n   * Examples:\n   *\n   *    math.asech(0.5)       // returns 1.3169578969248166\n   *\n   * See also:\n   *\n   *    acsch, acoth\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x\n   */\n\n  var asech = typed(name, {\n    number: function number(x) {\n      if (x <= 1 && x >= -1 || config.predictable) {\n        var xInv = 1 / x;\n\n        if (xInv > 0 || config.predictable) {\n          return asechNumber(x);\n        }\n\n        var ret = Math.sqrt(xInv * xInv - 1);\n        return new Complex(Math.log(ret - xInv), Math.PI);\n      }\n\n      return new Complex(x, 0).asech();\n    },\n    Complex: function Complex(x) {\n      return x.asech();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).acosh();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, asech);\n    }\n  });\n  return asech;\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/trigonometry/asech.js"],"names":["factory","deepMap","asechNumber","name","dependencies","createAsech","_ref","typed","config","Complex","_BigNumber","BigNumber","asech","number","x","predictable","xInv","ret","Math","sqrt","log","PI","div","acosh","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,EAA+B,WAA/B,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAClF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAAA,MAEIC,OAAO,GAAGH,IAAI,CAACG,OAFnB;AAAA,MAGIC,UAAU,GAAGJ,IAAI,CAACK,SAHtB;AAKA;;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAIC,KAAK,GAAGL,KAAK,CAACJ,IAAD,EAAO;AACtBU,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB,UAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,IAAI,CAAC,CAAhB,IAAqBN,MAAM,CAACO,WAAhC,EAA6C;AAC3C,YAAIC,IAAI,GAAG,IAAIF,CAAf;;AAEA,YAAIE,IAAI,GAAG,CAAP,IAAYR,MAAM,CAACO,WAAvB,EAAoC;AAClC,iBAAOb,WAAW,CAACY,CAAD,CAAlB;AACD;;AAED,YAAIG,GAAG,GAAGC,IAAI,CAACC,IAAL,CAAUH,IAAI,GAAGA,IAAP,GAAc,CAAxB,CAAV;AACA,eAAO,IAAIP,OAAJ,CAAYS,IAAI,CAACE,GAAL,CAASH,GAAG,GAAGD,IAAf,CAAZ,EAAkCE,IAAI,CAACG,EAAvC,CAAP;AACD;;AAED,aAAO,IAAIZ,OAAJ,CAAYK,CAAZ,EAAe,CAAf,EAAkBF,KAAlB,EAAP;AACD,KAdqB;AAetBH,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBK,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACF,KAAF,EAAP;AACD,KAjBqB;AAkBtBD,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBG,CAAnB,EAAsB;AAC/B,aAAO,IAAIJ,UAAJ,CAAe,CAAf,EAAkBY,GAAlB,CAAsBR,CAAtB,EAAyBS,KAAzB,EAAP;AACD,KApBqB;AAqBtB,sBAAkB,SAASC,WAAT,CAAqBV,CAArB,EAAwB;AACxC,aAAOb,OAAO,CAACa,CAAD,EAAIF,KAAJ,CAAd;AACD;AAvBqB,GAAP,CAAjB;AAyBA,SAAOA,KAAP;AACD,CArD8C,CAAxC","sourcesContent":["import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { asechNumber } from '../../plain/number';\nvar name = 'asech';\nvar dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport var createAsech = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      Complex = _ref.Complex,\n      _BigNumber = _ref.BigNumber;\n\n  /**\n   * Calculate the hyperbolic arcsecant of a value,\n   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.asech(x)\n   *\n   * Examples:\n   *\n   *    math.asech(0.5)       // returns 1.3169578969248166\n   *\n   * See also:\n   *\n   *    acsch, acoth\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x\n   */\n  var asech = typed(name, {\n    number: function number(x) {\n      if (x <= 1 && x >= -1 || config.predictable) {\n        var xInv = 1 / x;\n\n        if (xInv > 0 || config.predictable) {\n          return asechNumber(x);\n        }\n\n        var ret = Math.sqrt(xInv * xInv - 1);\n        return new Complex(Math.log(ret - xInv), Math.PI);\n      }\n\n      return new Complex(x, 0).asech();\n    },\n    Complex: function Complex(x) {\n      return x.asech();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x).acosh();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, asech);\n    }\n  });\n  return asech;\n});"]},"metadata":{},"sourceType":"module"}