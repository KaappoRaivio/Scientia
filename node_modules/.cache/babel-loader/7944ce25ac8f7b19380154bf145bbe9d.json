{"ast":null,"code":"class DrawHelper {\n  constructor(canvas, ctx) {\n    this.canvas = canvas;\n    this.ctx = ctx; // this.radius = radius;\n    // this.arcCenterOffsetY = arcCenterOffsetY;\n  }\n\n  drawAngleText(origin, angle, radius, text, dontRotateText) {\n    if (dontRotateText === undefined) {\n      dontRotateText = false;\n    }\n\n    this.ctx.save();\n\n    if (dontRotateText) {\n      radius -= angle / -Math.PI * 20;\n    }\n\n    let pos = this.getPosFromAngle(origin, angle, radius);\n    let x = pos[0];\n    let y = pos[1];\n    this.ctx.translate(x, y);\n\n    if (!dontRotateText) {\n      this.ctx.rotate(-angle + Math.PI);\n    }\n\n    this.ctx.textAlign = 'center';\n    this.ctx.fillText(text, 0, 10);\n    this.ctx.restore();\n  }\n\n  getPosFromAngle(origin, angle, radius) {\n    let x = origin[0];\n    let y = origin[1];\n    return [x + Math.sin(angle) * radius, y + Math.cos(angle) * radius];\n  }\n\n  drawCompassLine(origin, angle, radius, length) {\n    let end = this.getPosFromAngle(origin, angle, radius);\n    let start = this.getPosFromAngle(origin, angle, radius - length);\n    this.ctx.moveTo(start[0], start[1]);\n    this.ctx.lineTo(end[0], end[1]);\n  }\n\n}\n\nexport default DrawHelper;","map":{"version":3,"sources":["/home/kaappo/testit/canvas/src/components/helpers.js"],"names":["DrawHelper","constructor","canvas","ctx","drawAngleText","origin","angle","radius","text","dontRotateText","undefined","save","Math","PI","pos","getPosFromAngle","x","y","translate","rotate","textAlign","fillText","restore","sin","cos","drawCompassLine","length","end","start","moveTo","lineTo"],"mappings":"AAAA,MAAMA,UAAN,CAAiB;AACbC,EAAAA,WAAW,CAAEC,MAAF,EAAUC,GAAV,EAAe;AACtB,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,GAAL,GAAWA,GAAX,CAFsB,CAGtB;AACA;AACH;;AAEDC,EAAAA,aAAa,CAAEC,MAAF,EAAUC,KAAV,EAAiBC,MAAjB,EAAyBC,IAAzB,EAA+BC,cAA/B,EAA+C;AACxD,QAAIA,cAAc,KAAKC,SAAvB,EAAkC;AAC9BD,MAAAA,cAAc,GAAG,KAAjB;AACH;;AAED,SAAKN,GAAL,CAASQ,IAAT;;AAEA,QAAIF,cAAJ,EAAoB;AAChBF,MAAAA,MAAM,IAAID,KAAK,GAAG,CAACM,IAAI,CAACC,EAAd,GAAmB,EAA7B;AACH;;AAED,QAAIC,GAAG,GAAG,KAAKC,eAAL,CAAqBV,MAArB,EAA6BC,KAA7B,EAAoCC,MAApC,CAAV;AACA,QAAIS,CAAC,GAAGF,GAAG,CAAC,CAAD,CAAX;AACA,QAAIG,CAAC,GAAGH,GAAG,CAAC,CAAD,CAAX;AAEA,SAAKX,GAAL,CAASe,SAAT,CAAmBF,CAAnB,EAAsBC,CAAtB;;AACA,QAAI,CAACR,cAAL,EAAqB;AACjB,WAAKN,GAAL,CAASgB,MAAT,CAAgB,CAACb,KAAD,GAASM,IAAI,CAACC,EAA9B;AACH;;AAED,SAAKV,GAAL,CAASiB,SAAT,GAAqB,QAArB;AACA,SAAKjB,GAAL,CAASkB,QAAT,CAAkBb,IAAlB,EAAwB,CAAxB,EAA2B,EAA3B;AAEA,SAAKL,GAAL,CAASmB,OAAT;AAEH;;AAEDP,EAAAA,eAAe,CAACV,MAAD,EAASC,KAAT,EAAgBC,MAAhB,EAAwB;AACnC,QAAIS,CAAC,GAAGX,MAAM,CAAC,CAAD,CAAd;AACA,QAAIY,CAAC,GAAGZ,MAAM,CAAC,CAAD,CAAd;AACA,WAAO,CAACW,CAAC,GAAGJ,IAAI,CAACW,GAAL,CAASjB,KAAT,IAAkBC,MAAvB,EAA+BU,CAAC,GAAGL,IAAI,CAACY,GAAL,CAASlB,KAAT,IAAkBC,MAArD,CAAP;AACH;;AAEDkB,EAAAA,eAAe,CAACpB,MAAD,EAASC,KAAT,EAAgBC,MAAhB,EAAwBmB,MAAxB,EAAgC;AAC3C,QAAIC,GAAG,GAAG,KAAKZ,eAAL,CAAqBV,MAArB,EAA6BC,KAA7B,EAAoCC,MAApC,CAAV;AACA,QAAIqB,KAAK,GAAG,KAAKb,eAAL,CAAqBV,MAArB,EAA6BC,KAA7B,EAAoCC,MAAM,GAAGmB,MAA7C,CAAZ;AAEA,SAAKvB,GAAL,CAAS0B,MAAT,CAAgBD,KAAK,CAAC,CAAD,CAArB,EAA0BA,KAAK,CAAC,CAAD,CAA/B;AACA,SAAKzB,GAAL,CAAS2B,MAAT,CAAgBH,GAAG,CAAC,CAAD,CAAnB,EAAwBA,GAAG,CAAC,CAAD,CAA3B;AACH;;AA/CY;;AAmDjB,eAAe3B,UAAf","sourcesContent":["class DrawHelper {\n    constructor (canvas, ctx) {\n        this.canvas = canvas;\n        this.ctx = ctx;\n        // this.radius = radius;\n        // this.arcCenterOffsetY = arcCenterOffsetY;\n    }\n    \n    drawAngleText (origin, angle, radius, text, dontRotateText) {\n        if (dontRotateText === undefined) {\n            dontRotateText = false;\n        }\n        \n        this.ctx.save();\n\n        if (dontRotateText) {\n            radius -= angle / -Math.PI * 20\n        }\n\n        let pos = this.getPosFromAngle(origin, angle, radius)\n        let x = pos[0];\n        let y = pos[1];\n    \n        this.ctx.translate(x, y);\n        if (!dontRotateText) {\n            this.ctx.rotate(-angle + Math.PI);\n        }\n    \n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(text, 0, 10);\n    \n        this.ctx.restore();\n    \n    }\n    \n    getPosFromAngle(origin, angle, radius) {\n        let x = origin[0]\n        let y = origin[1]\n        return [x + Math.sin(angle) * radius, y + Math.cos(angle) * radius]\n    }\n\n    drawCompassLine(origin, angle, radius, length) {\n        let end = this.getPosFromAngle(origin, angle, radius)\n        let start = this.getPosFromAngle(origin, angle, radius - length)\n\n        this.ctx.moveTo(start[0], start[1]);\n        this.ctx.lineTo(end[0], end[1]);\n    }\n}\n\n\nexport default DrawHelper"]},"metadata":{},"sourceType":"module"}