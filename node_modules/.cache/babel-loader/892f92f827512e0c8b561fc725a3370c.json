{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { randomMatrix } from './util/randomMatrix';\nimport { createRng } from './util/seededRNG';\nimport { isMatrix } from '../../utils/is';\nvar name = 'randomInt';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createRandomInt = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      on = _ref.on; // seeded pseudo random number generator\n\n  var rng = createRng(config.randomSeed);\n\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n  /**\n   * Return a random integer number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.randomInt()                // generate a random integer between 0 and 1\n   *     math.randomInt(max)             // generate a random integer between 0 and max\n   *     math.randomInt(min, max)        // generate a random integer between min and max\n   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\n   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\n   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\n   *\n   * Examples:\n   *\n   *     math.randomInt(100)    // returns a random integer between 0 and 100\n   *     math.randomInt(30, 40) // returns a random integer between 30 and 40\n   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1\n   *\n   * See also:\n   *\n   *     random, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random integer value\n   */\n\n\n  return typed(name, {\n    '': function _() {\n      return _randomInt(0, 1);\n    },\n    number: function number(max) {\n      return _randomInt(0, max);\n    },\n    'number, number': function numberNumber(min, max) {\n      return _randomInt(min, max);\n    },\n    'Array | Matrix': function ArrayMatrix(size) {\n      return _randomIntMatrix(size, 0, 1);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(size, max) {\n      return _randomIntMatrix(size, 0, max);\n    },\n    'Array | Matrix, number, number': function ArrayMatrixNumberNumber(size, min, max) {\n      return _randomIntMatrix(size, min, max);\n    }\n  });\n\n  function _randomIntMatrix(size, min, max) {\n    var res = randomMatrix(size.valueOf(), function () {\n      return _randomInt(min, max);\n    });\n    return isMatrix(size) ? size.create(res) : res;\n  }\n\n  function _randomInt(min, max) {\n    return Math.floor(min + rng() * (max - min));\n  }\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/probability/randomInt.js"],"names":["factory","randomMatrix","createRng","isMatrix","name","dependencies","createRandomInt","_ref","typed","config","on","rng","randomSeed","curr","prev","_","_randomInt","number","max","numberNumber","min","ArrayMatrix","size","_randomIntMatrix","ArrayMatrixNumber","ArrayMatrixNumberNumber","res","valueOf","create","Math","floor"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,KAApB,CAAnB;AACA,OAAO,IAAIC,eAAe,GAAG,eAAeN,OAAO,CAACI,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACtF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAAA,MAEIC,EAAE,GAAGH,IAAI,CAACG,EAFd,CADsF,CAItF;;AACA,MAAIC,GAAG,GAAGT,SAAS,CAACO,MAAM,CAACG,UAAR,CAAnB;;AAEA,MAAIF,EAAJ,EAAQ;AACNA,IAAAA,EAAE,CAAC,QAAD,EAAW,UAAUG,IAAV,EAAgBC,IAAhB,EAAsB;AACjC,UAAID,IAAI,CAACD,UAAL,KAAoBE,IAAI,CAACF,UAA7B,EAAyC;AACvCD,QAAAA,GAAG,GAAGT,SAAS,CAACW,IAAI,CAACD,UAAN,CAAf;AACD;AACF,KAJC,CAAF;AAKD;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,SAAOJ,KAAK,CAACJ,IAAD,EAAO;AACjB,QAAI,SAASW,CAAT,GAAa;AACf,aAAOC,UAAU,CAAC,CAAD,EAAI,CAAJ,CAAjB;AACD,KAHgB;AAIjBC,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,GAAhB,EAAqB;AAC3B,aAAOF,UAAU,CAAC,CAAD,EAAIE,GAAJ,CAAjB;AACD,KANgB;AAOjB,sBAAkB,SAASC,YAAT,CAAsBC,GAAtB,EAA2BF,GAA3B,EAAgC;AAChD,aAAOF,UAAU,CAACI,GAAD,EAAMF,GAAN,CAAjB;AACD,KATgB;AAUjB,sBAAkB,SAASG,WAAT,CAAqBC,IAArB,EAA2B;AAC3C,aAAOC,gBAAgB,CAACD,IAAD,EAAO,CAAP,EAAU,CAAV,CAAvB;AACD,KAZgB;AAajB,8BAA0B,SAASE,iBAAT,CAA2BF,IAA3B,EAAiCJ,GAAjC,EAAsC;AAC9D,aAAOK,gBAAgB,CAACD,IAAD,EAAO,CAAP,EAAUJ,GAAV,CAAvB;AACD,KAfgB;AAgBjB,sCAAkC,SAASO,uBAAT,CAAiCH,IAAjC,EAAuCF,GAAvC,EAA4CF,GAA5C,EAAiD;AACjF,aAAOK,gBAAgB,CAACD,IAAD,EAAOF,GAAP,EAAYF,GAAZ,CAAvB;AACD;AAlBgB,GAAP,CAAZ;;AAqBA,WAASK,gBAAT,CAA0BD,IAA1B,EAAgCF,GAAhC,EAAqCF,GAArC,EAA0C;AACxC,QAAIQ,GAAG,GAAGzB,YAAY,CAACqB,IAAI,CAACK,OAAL,EAAD,EAAiB,YAAY;AACjD,aAAOX,UAAU,CAACI,GAAD,EAAMF,GAAN,CAAjB;AACD,KAFqB,CAAtB;AAGA,WAAOf,QAAQ,CAACmB,IAAD,CAAR,GAAiBA,IAAI,CAACM,MAAL,CAAYF,GAAZ,CAAjB,GAAoCA,GAA3C;AACD;;AAED,WAASV,UAAT,CAAoBI,GAApB,EAAyBF,GAAzB,EAA8B;AAC5B,WAAOW,IAAI,CAACC,KAAL,CAAWV,GAAG,GAAGT,GAAG,MAAMO,GAAG,GAAGE,GAAZ,CAApB,CAAP;AACD;AACF,CA5EkD,CAA5C","sourcesContent":["import { factory } from '../../utils/factory';\nimport { randomMatrix } from './util/randomMatrix';\nimport { createRng } from './util/seededRNG';\nimport { isMatrix } from '../../utils/is';\nvar name = 'randomInt';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createRandomInt = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      on = _ref.on;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n  /**\n   * Return a random integer number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.randomInt()                // generate a random integer between 0 and 1\n   *     math.randomInt(max)             // generate a random integer between 0 and max\n   *     math.randomInt(min, max)        // generate a random integer between min and max\n   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\n   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\n   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\n   *\n   * Examples:\n   *\n   *     math.randomInt(100)    // returns a random integer between 0 and 100\n   *     math.randomInt(30, 40) // returns a random integer between 30 and 40\n   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1\n   *\n   * See also:\n   *\n   *     random, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random integer value\n   */\n\n\n  return typed(name, {\n    '': function _() {\n      return _randomInt(0, 1);\n    },\n    number: function number(max) {\n      return _randomInt(0, max);\n    },\n    'number, number': function numberNumber(min, max) {\n      return _randomInt(min, max);\n    },\n    'Array | Matrix': function ArrayMatrix(size) {\n      return _randomIntMatrix(size, 0, 1);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(size, max) {\n      return _randomIntMatrix(size, 0, max);\n    },\n    'Array | Matrix, number, number': function ArrayMatrixNumberNumber(size, min, max) {\n      return _randomIntMatrix(size, min, max);\n    }\n  });\n\n  function _randomIntMatrix(size, min, max) {\n    var res = randomMatrix(size.valueOf(), function () {\n      return _randomInt(min, max);\n    });\n    return isMatrix(size) ? size.create(res) : res;\n  }\n\n  function _randomInt(min, max) {\n    return Math.floor(min + rng() * (max - min));\n  }\n});"]},"metadata":{},"sourceType":"module"}