{"ast":null,"code":"class Interpolator {\n  constructor() {\n    this.previousData = 0;\n    this.currentData = 0;\n    this.dataPoints = [[0, [0, 0, 0, 0]]];\n  }\n\n  addDataPoint(timeStamp, data) {\n    // console.log(this.dataPoints)\n    // console.log(this.dataPoints)\n    this.dataPoints.push([timeStamp, data]);\n\n    while (this.dataPoints.length > 20) {\n      this.dataPoints.shift();\n    }\n  }\n\n  interpolate(timeStamp) {\n    // let latest = this.dataPoints[this.dataPoints.length - 1][0];\n    // let diff = timeStamp - latest;\n    let averageDiff = this.getAverageDeltaTime(); // let progress = diff / averageDiff;\n\n    return this.getLatestPairSlope()(timeStamp - averageDiff);\n  }\n\n  getAverageDeltaTime() {\n    let previous = this.dataPoints[0][0];\n    let diffs = [];\n\n    for (let i = 1; i < this.dataPoints.length; i++) {\n      let current = this.dataPoints[i][0];\n      let diff = current - previous;\n      diffs.push(diff);\n      previous = current;\n    }\n\n    return diffs.reduce((a, b) => a + b, 0) / diffs.length;\n  }\n\n  getLatestPairSlope() {\n    let latest = this.dataPoints[this.dataPoints.length - 1];\n    let other = this.dataPoints[this.dataPoints.length - 2];\n    return x => {\n      console.log(latest);\n\n      if (latest === undefined || other === undefined) {\n        return [0, 0, 0, 0];\n      }\n\n      let yDiffs = latest[1].map((item, index) => item - other[1][index]); // let k = (latest[1] - other[1]) / (latest[0] - other[0]);\n\n      let slopes = yDiffs.map(item => item / (latest[0] - other[0]));\n      let constants = other[1];\n      return slopes.map((item, index) => item * x + constants[index]);\n    };\n  }\n\n}\n\nexport default Interpolator;","map":{"version":3,"sources":["/home/kaappo/git/kments/src/components/misc/interpolate.js"],"names":["Interpolator","constructor","previousData","currentData","dataPoints","addDataPoint","timeStamp","data","push","length","shift","interpolate","averageDiff","getAverageDeltaTime","getLatestPairSlope","previous","diffs","i","current","diff","reduce","a","b","latest","other","x","console","log","undefined","yDiffs","map","item","index","slopes","constants"],"mappings":"AAAA,MAAMA,YAAN,CAAmB;AACfC,EAAAA,WAAW,GAAI;AACX,SAAKC,YAAL,GAAoB,CAApB;AACA,SAAKC,WAAL,GAAmB,CAAnB;AAGA,SAAKC,UAAL,GAAkB,CACd,CAAC,CAAD,EAAI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAJ,CADc,CAAlB;AAGH;;AAEDC,EAAAA,YAAY,CAAEC,SAAF,EAAaC,IAAb,EAAmB;AAC3B;AACA;AACA,SAAKH,UAAL,CAAgBI,IAAhB,CAAqB,CAACF,SAAD,EAAYC,IAAZ,CAArB;;AACA,WAAO,KAAKH,UAAL,CAAgBK,MAAhB,GAAyB,EAAhC,EAAoC;AAChC,WAAKL,UAAL,CAAgBM,KAAhB;AACH;AAEJ;;AAEDC,EAAAA,WAAW,CAAEL,SAAF,EAAa;AACpB;AACA;AAEA,QAAIM,WAAW,GAAG,KAAKC,mBAAL,EAAlB,CAJoB,CAMpB;;AAEA,WAAO,KAAKC,kBAAL,GAA0BR,SAAS,GAAGM,WAAtC,CAAP;AACH;;AAEDC,EAAAA,mBAAmB,GAAI;AACnB,QAAIE,QAAQ,GAAG,KAAKX,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,CAAf;AACA,QAAIY,KAAK,GAAG,EAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKb,UAAL,CAAgBK,MAApC,EAA4CQ,CAAC,EAA7C,EAAiD;AAC7C,UAAIC,OAAO,GAAG,KAAKd,UAAL,CAAgBa,CAAhB,EAAmB,CAAnB,CAAd;AAEA,UAAIE,IAAI,GAAGD,OAAO,GAAGH,QAArB;AACAC,MAAAA,KAAK,CAACR,IAAN,CAAWW,IAAX;AAEAJ,MAAAA,QAAQ,GAAGG,OAAX;AACH;;AAED,WAAOF,KAAK,CAACI,MAAN,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAA3B,EAA8B,CAA9B,IAAmCN,KAAK,CAACP,MAAhD;AACH;;AAEDK,EAAAA,kBAAkB,GAAI;AAClB,QAAIS,MAAM,GAAG,KAAKnB,UAAL,CAAgB,KAAKA,UAAL,CAAgBK,MAAhB,GAAyB,CAAzC,CAAb;AACA,QAAIe,KAAK,GAAG,KAAKpB,UAAL,CAAgB,KAAKA,UAAL,CAAgBK,MAAhB,GAAyB,CAAzC,CAAZ;AAEA,WAAQgB,CAAD,IAAO;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;;AACA,UAAIA,MAAM,KAAKK,SAAX,IAAwBJ,KAAK,KAAKI,SAAtC,EAAiD;AAC7C,eAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAP;AACH;;AACD,UAAIC,MAAM,GAAGN,MAAM,CAAC,CAAD,CAAN,CAAUO,GAAV,CAAc,CAACC,IAAD,EAAOC,KAAP,KAAiBD,IAAI,GAAGP,KAAK,CAAC,CAAD,CAAL,CAASQ,KAAT,CAAtC,CAAb,CALU,CAMV;;AACA,UAAIC,MAAM,GAAGJ,MAAM,CAACC,GAAP,CAAWC,IAAI,IAAIA,IAAI,IAAIR,MAAM,CAAC,CAAD,CAAN,GAAYC,KAAK,CAAC,CAAD,CAArB,CAAvB,CAAb;AACA,UAAIU,SAAS,GAAGV,KAAK,CAAC,CAAD,CAArB;AAEA,aAAOS,MAAM,CAACH,GAAP,CAAW,CAACC,IAAD,EAAOC,KAAP,KAAiBD,IAAI,GAAGN,CAAP,GAAWS,SAAS,CAACF,KAAD,CAAhD,CAAP;AACH,KAXD;AAYH;;AAhEc;;AAmEnB,eAAehC,YAAf","sourcesContent":["class Interpolator {\n    constructor () {\n        this.previousData = 0;\n        this.currentData = 0;\n\n\n        this.dataPoints = [\n            [0, [0, 0, 0, 0]]\n        ];\n    }\n\n    addDataPoint (timeStamp, data) {\n        // console.log(this.dataPoints)\n        // console.log(this.dataPoints)\n        this.dataPoints.push([timeStamp, data]);\n        while (this.dataPoints.length > 20) {\n            this.dataPoints.shift();\n        }\n        \n    }\n\n    interpolate (timeStamp) {\n        // let latest = this.dataPoints[this.dataPoints.length - 1][0];\n        // let diff = timeStamp - latest;\n\n        let averageDiff = this.getAverageDeltaTime();\n\n        // let progress = diff / averageDiff;\n\n        return this.getLatestPairSlope()(timeStamp - averageDiff)\n    }\n\n    getAverageDeltaTime () {\n        let previous = this.dataPoints[0][0];\n        let diffs = [];\n\n        for (let i = 1; i < this.dataPoints.length; i++) {\n            let current = this.dataPoints[i][0];\n            \n            let diff = current - previous;\n            diffs.push(diff);\n\n            previous = current;\n        }\n\n        return diffs.reduce((a, b) => a + b, 0) / diffs.length;\n    }\n\n    getLatestPairSlope () {\n        let latest = this.dataPoints[this.dataPoints.length - 1]\n        let other = this.dataPoints[this.dataPoints.length - 2]\n\n        return (x) => {\n            console.log(latest)\n            if (latest === undefined || other === undefined) {\n                return [0, 0, 0, 0]\n            }\n            let yDiffs = latest[1].map((item, index) => item - other[1][index]);\n            // let k = (latest[1] - other[1]) / (latest[0] - other[0]);\n            let slopes = yDiffs.map(item => item / (latest[0] - other[0]))\n            let constants = other[1];\n\n            return slopes.map((item, index) => item * x + constants[index]);\n        }\n    }\n}\n\nexport default Interpolator;"]},"metadata":{},"sourceType":"module"}