{"ast":null,"code":"import { containsCollections, deepForEach, reduce } from '../../utils/collection';\nimport { arraySize } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nimport { improveErrorMessage } from './utils/improveErrorMessage';\nvar name = 'mean';\nvar dependencies = ['typed', 'add', 'divide'];\nexport var createMean = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      divide = _ref.divide;\n  /**\n   * Compute the mean value of matrix or a list with values.\n   * In case of a multi dimensional array, the mean of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.mean(a, b, c, ...)\n   *     math.mean(A)\n   *     math.mean(A, dim)\n   *\n   * Examples:\n   *\n   *     math.mean(2, 1, 4, 3)                     // returns 2.5\n   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725\n   *\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]\n   *\n   * See also:\n   *\n   *     median, min, max, sum, prod, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The mean of all values\n   */\n\n  return typed(name, {\n    // mean([a, b, c, d, ...])\n    'Array | Matrix': _mean,\n    // mean([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nmeanDim,\n    // mean(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function mean');\n      }\n\n      return _mean(args);\n    }\n  });\n  /**\n   * Calculate the mean value in an n-dimensional array, returning a\n   * n-1 dimensional array\n   * @param {Array} array\n   * @param {number} dim\n   * @return {number} mean\n   * @private\n   */\n\n  function _nmeanDim(array, dim) {\n    try {\n      var sum = reduce(array, dim, add);\n      var s = Array.isArray(array) ? arraySize(array) : array.size();\n      return divide(sum, s[dim]);\n    } catch (err) {\n      throw improveErrorMessage(err, 'mean');\n    }\n  }\n  /**\n   * Recursively calculate the mean value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} mean\n   * @private\n   */\n\n\n  function _mean(array) {\n    var sum;\n    var num = 0;\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n        num++;\n      } catch (err) {\n        throw improveErrorMessage(err, 'mean', value);\n      }\n    });\n\n    if (num === 0) {\n      throw new Error('Cannot calculate the mean of an empty array');\n    }\n\n    return divide(sum, num);\n  }\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/statistics/mean.js"],"names":["containsCollections","deepForEach","reduce","arraySize","factory","improveErrorMessage","name","dependencies","createMean","_ref","typed","add","divide","_mean","_nmeanDim","_","args","TypeError","array","dim","sum","s","Array","isArray","size","err","num","value","undefined","Error"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,WAA9B,EAA2CC,MAA3C,QAAyD,wBAAzD;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,mBAAT,QAAoC,6BAApC;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,QAAjB,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACjF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,GAAG,GAAGF,IAAI,CAACE,GADf;AAAA,MAEIC,MAAM,GAAGH,IAAI,CAACG,MAFlB;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAAOF,KAAK,CAACJ,IAAD,EAAO;AACjB;AACA,sBAAkBO,KAFD;AAGjB;AACA,0CAAsCC,SAJrB;AAKjB;AACA,WAAO,SAASC,CAAT,CAAWC,IAAX,EAAiB;AACtB,UAAIhB,mBAAmB,CAACgB,IAAD,CAAvB,EAA+B;AAC7B,cAAM,IAAIC,SAAJ,CAAc,yCAAd,CAAN;AACD;;AAED,aAAOJ,KAAK,CAACG,IAAD,CAAZ;AACD;AAZgB,GAAP,CAAZ;AAcA;;;;;;;;;AASA,WAASF,SAAT,CAAmBI,KAAnB,EAA0BC,GAA1B,EAA+B;AAC7B,QAAI;AACF,UAAIC,GAAG,GAAGlB,MAAM,CAACgB,KAAD,EAAQC,GAAR,EAAaR,GAAb,CAAhB;AACA,UAAIU,CAAC,GAAGC,KAAK,CAACC,OAAN,CAAcL,KAAd,IAAuBf,SAAS,CAACe,KAAD,CAAhC,GAA0CA,KAAK,CAACM,IAAN,EAAlD;AACA,aAAOZ,MAAM,CAACQ,GAAD,EAAMC,CAAC,CAACF,GAAD,CAAP,CAAb;AACD,KAJD,CAIE,OAAOM,GAAP,EAAY;AACZ,YAAMpB,mBAAmB,CAACoB,GAAD,EAAM,MAAN,CAAzB;AACD;AACF;AACD;;;;;;;;AAQA,WAASZ,KAAT,CAAeK,KAAf,EAAsB;AACpB,QAAIE,GAAJ;AACA,QAAIM,GAAG,GAAG,CAAV;AACAzB,IAAAA,WAAW,CAACiB,KAAD,EAAQ,UAAUS,KAAV,EAAiB;AAClC,UAAI;AACFP,QAAAA,GAAG,GAAGA,GAAG,KAAKQ,SAAR,GAAoBD,KAApB,GAA4BhB,GAAG,CAACS,GAAD,EAAMO,KAAN,CAArC;AACAD,QAAAA,GAAG;AACJ,OAHD,CAGE,OAAOD,GAAP,EAAY;AACZ,cAAMpB,mBAAmB,CAACoB,GAAD,EAAM,MAAN,EAAcE,KAAd,CAAzB;AACD;AACF,KAPU,CAAX;;AASA,QAAID,GAAG,KAAK,CAAZ,EAAe;AACb,YAAM,IAAIG,KAAJ,CAAU,6CAAV,CAAN;AACD;;AAED,WAAOjB,MAAM,CAACQ,GAAD,EAAMM,GAAN,CAAb;AACD;AACF,CA1F6C,CAAvC","sourcesContent":["import { containsCollections, deepForEach, reduce } from '../../utils/collection';\nimport { arraySize } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nimport { improveErrorMessage } from './utils/improveErrorMessage';\nvar name = 'mean';\nvar dependencies = ['typed', 'add', 'divide'];\nexport var createMean = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      divide = _ref.divide;\n\n  /**\n   * Compute the mean value of matrix or a list with values.\n   * In case of a multi dimensional array, the mean of the flattened array\n   * will be calculated. When `dim` is provided, the maximum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.mean(a, b, c, ...)\n   *     math.mean(A)\n   *     math.mean(A, dim)\n   *\n   * Examples:\n   *\n   *     math.mean(2, 1, 4, 3)                     // returns 2.5\n   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725\n   *\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]\n   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]\n   *\n   * See also:\n   *\n   *     median, min, max, sum, prod, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The mean of all values\n   */\n  return typed(name, {\n    // mean([a, b, c, d, ...])\n    'Array | Matrix': _mean,\n    // mean([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nmeanDim,\n    // mean(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function mean');\n      }\n\n      return _mean(args);\n    }\n  });\n  /**\n   * Calculate the mean value in an n-dimensional array, returning a\n   * n-1 dimensional array\n   * @param {Array} array\n   * @param {number} dim\n   * @return {number} mean\n   * @private\n   */\n\n  function _nmeanDim(array, dim) {\n    try {\n      var sum = reduce(array, dim, add);\n      var s = Array.isArray(array) ? arraySize(array) : array.size();\n      return divide(sum, s[dim]);\n    } catch (err) {\n      throw improveErrorMessage(err, 'mean');\n    }\n  }\n  /**\n   * Recursively calculate the mean value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} mean\n   * @private\n   */\n\n\n  function _mean(array) {\n    var sum;\n    var num = 0;\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n        num++;\n      } catch (err) {\n        throw improveErrorMessage(err, 'mean', value);\n      }\n    });\n\n    if (num === 0) {\n      throw new Error('Cannot calculate the mean of an empty array');\n    }\n\n    return divide(sum, num);\n  }\n});"]},"metadata":{},"sourceType":"module"}