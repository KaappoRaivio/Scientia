{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport Complex from 'complex.js';\nimport { format } from '../../utils/number';\nimport { isNumber, isUnit } from '../../utils/is';\nimport { factory } from '../../utils/factory';\nvar name = 'Complex';\nvar dependencies = [];\nexport var createComplexClass = /* #__PURE__ */factory(name, dependencies, function () {\n  /**\n   * Attach type information\n   */\n  Complex.prototype.type = 'Complex';\n  Complex.prototype.isComplex = true;\n  /**\n   * Get a JSON representation of the complex number\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}`\n   */\n\n  Complex.prototype.toJSON = function () {\n    return {\n      mathjs: 'Complex',\n      re: this.re,\n      im: this.im\n    };\n  };\n  /*\n   * Return the value of the complex number in polar notation\n   * The angle phi will be set in the interval of [-pi, pi].\n   * @return {{r: number, phi: number}} Returns and object with properties r and phi.\n   */\n\n\n  Complex.prototype.toPolar = function () {\n    return {\n      r: this.abs(),\n      phi: this.arg()\n    };\n  };\n  /**\n   * Get a string representation of the complex number,\n   * with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string} str\n   */\n\n\n  Complex.prototype.format = function (options) {\n    var str = '';\n    var im = this.im;\n    var re = this.re;\n    var strRe = format(this.re, options);\n    var strIm = format(this.im, options); // round either re or im when smaller than the configured precision\n\n    var precision = isNumber(options) ? options : options ? options.precision : null;\n\n    if (precision !== null) {\n      var epsilon = Math.pow(10, -precision);\n\n      if (Math.abs(re / im) < epsilon) {\n        re = 0;\n      }\n\n      if (Math.abs(im / re) < epsilon) {\n        im = 0;\n      }\n    }\n\n    if (im === 0) {\n      // real value\n      str = strRe;\n    } else if (re === 0) {\n      // purely complex value\n      if (im === 1) {\n        str = 'i';\n      } else if (im === -1) {\n        str = '-i';\n      } else {\n        str = strIm + 'i';\n      }\n    } else {\n      // complex value\n      if (im < 0) {\n        if (im === -1) {\n          str = strRe + ' - i';\n        } else {\n          str = strRe + ' - ' + strIm.substring(1) + 'i';\n        }\n      } else {\n        if (im === 1) {\n          str = strRe + ' + i';\n        } else {\n          str = strRe + ' + ' + strIm + 'i';\n        }\n      }\n    }\n\n    return str;\n  };\n  /**\n   * Create a complex number from polar coordinates\n   *\n   * Usage:\n   *\n   *     Complex.fromPolar(r: number, phi: number) : Complex\n   *     Complex.fromPolar({r: number, phi: number}) : Complex\n   *\n   * @param {*} args...\n   * @return {Complex}\n   */\n\n\n  Complex.fromPolar = function (args) {\n    switch (arguments.length) {\n      case 1:\n        {\n          var arg = arguments[0];\n\n          if (_typeof(arg) === 'object') {\n            return Complex(arg);\n          } else {\n            throw new TypeError('Input has to be an object with r and phi keys.');\n          }\n        }\n\n      case 2:\n        {\n          var r = arguments[0];\n          var phi = arguments[1];\n\n          if (isNumber(r)) {\n            if (isUnit(phi) && phi.hasBase('ANGLE')) {\n              // convert unit to a number in radians\n              phi = phi.toNumber('rad');\n            }\n\n            if (isNumber(phi)) {\n              return new Complex({\n                r: r,\n                phi: phi\n              });\n            }\n\n            throw new TypeError('Phi is not a number nor an angle unit.');\n          } else {\n            throw new TypeError('Radius r is not a number.');\n          }\n        }\n\n      default:\n        throw new SyntaxError('Wrong number of arguments in function fromPolar');\n    }\n  };\n\n  Complex.prototype.valueOf = Complex.prototype.toString;\n  /**\n   * Create a Complex number from a JSON object\n   * @param {Object} json  A JSON Object structured as\n   *                       {\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}\n   *                       All properties are optional, default values\n   *                       for `re` and `im` are 0.\n   * @return {Complex} Returns a new Complex number\n   */\n\n  Complex.fromJSON = function (json) {\n    return new Complex(json);\n  };\n  /**\n   * Compare two complex numbers, `a` and `b`:\n   *\n   * - Returns 1 when the real part of `a` is larger than the real part of `b`\n   * - Returns -1 when the real part of `a` is smaller than the real part of `b`\n   * - Returns 1 when the real parts are equal\n   *   and the imaginary part of `a` is larger than the imaginary part of `b`\n   * - Returns -1 when the real parts are equal\n   *   and the imaginary part of `a` is smaller than the imaginary part of `b`\n   * - Returns 0 when both real and imaginary parts are equal.\n   *\n   * @params {Complex} a\n   * @params {Complex} b\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n\n\n  Complex.compare = function (a, b) {\n    if (a.re > b.re) {\n      return 1;\n    }\n\n    if (a.re < b.re) {\n      return -1;\n    }\n\n    if (a.im > b.im) {\n      return 1;\n    }\n\n    if (a.im < b.im) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  return Complex;\n}, {\n  isClass: true\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/type/complex/Complex.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","Complex","format","isNumber","isUnit","factory","name","dependencies","createComplexClass","type","isComplex","toJSON","mathjs","re","im","toPolar","r","abs","phi","arg","options","str","strRe","strIm","precision","epsilon","Math","pow","substring","fromPolar","args","arguments","length","TypeError","hasBase","toNumber","SyntaxError","valueOf","toString","fromJSON","json","compare","a","b","isClass"],"mappings":"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","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport Complex from 'complex.js';\nimport { format } from '../../utils/number';\nimport { isNumber, isUnit } from '../../utils/is';\nimport { factory } from '../../utils/factory';\nvar name = 'Complex';\nvar dependencies = [];\nexport var createComplexClass = /* #__PURE__ */factory(name, dependencies, function () {\n  /**\n   * Attach type information\n   */\n  Complex.prototype.type = 'Complex';\n  Complex.prototype.isComplex = true;\n  /**\n   * Get a JSON representation of the complex number\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}`\n   */\n\n  Complex.prototype.toJSON = function () {\n    return {\n      mathjs: 'Complex',\n      re: this.re,\n      im: this.im\n    };\n  };\n  /*\n   * Return the value of the complex number in polar notation\n   * The angle phi will be set in the interval of [-pi, pi].\n   * @return {{r: number, phi: number}} Returns and object with properties r and phi.\n   */\n\n\n  Complex.prototype.toPolar = function () {\n    return {\n      r: this.abs(),\n      phi: this.arg()\n    };\n  };\n  /**\n   * Get a string representation of the complex number,\n   * with optional formatting options.\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string} str\n   */\n\n\n  Complex.prototype.format = function (options) {\n    var str = '';\n    var im = this.im;\n    var re = this.re;\n    var strRe = format(this.re, options);\n    var strIm = format(this.im, options); // round either re or im when smaller than the configured precision\n\n    var precision = isNumber(options) ? options : options ? options.precision : null;\n\n    if (precision !== null) {\n      var epsilon = Math.pow(10, -precision);\n\n      if (Math.abs(re / im) < epsilon) {\n        re = 0;\n      }\n\n      if (Math.abs(im / re) < epsilon) {\n        im = 0;\n      }\n    }\n\n    if (im === 0) {\n      // real value\n      str = strRe;\n    } else if (re === 0) {\n      // purely complex value\n      if (im === 1) {\n        str = 'i';\n      } else if (im === -1) {\n        str = '-i';\n      } else {\n        str = strIm + 'i';\n      }\n    } else {\n      // complex value\n      if (im < 0) {\n        if (im === -1) {\n          str = strRe + ' - i';\n        } else {\n          str = strRe + ' - ' + strIm.substring(1) + 'i';\n        }\n      } else {\n        if (im === 1) {\n          str = strRe + ' + i';\n        } else {\n          str = strRe + ' + ' + strIm + 'i';\n        }\n      }\n    }\n\n    return str;\n  };\n  /**\n   * Create a complex number from polar coordinates\n   *\n   * Usage:\n   *\n   *     Complex.fromPolar(r: number, phi: number) : Complex\n   *     Complex.fromPolar({r: number, phi: number}) : Complex\n   *\n   * @param {*} args...\n   * @return {Complex}\n   */\n\n\n  Complex.fromPolar = function (args) {\n    switch (arguments.length) {\n      case 1:\n        {\n          var arg = arguments[0];\n\n          if (_typeof(arg) === 'object') {\n            return Complex(arg);\n          } else {\n            throw new TypeError('Input has to be an object with r and phi keys.');\n          }\n        }\n\n      case 2:\n        {\n          var r = arguments[0];\n          var phi = arguments[1];\n\n          if (isNumber(r)) {\n            if (isUnit(phi) && phi.hasBase('ANGLE')) {\n              // convert unit to a number in radians\n              phi = phi.toNumber('rad');\n            }\n\n            if (isNumber(phi)) {\n              return new Complex({\n                r: r,\n                phi: phi\n              });\n            }\n\n            throw new TypeError('Phi is not a number nor an angle unit.');\n          } else {\n            throw new TypeError('Radius r is not a number.');\n          }\n        }\n\n      default:\n        throw new SyntaxError('Wrong number of arguments in function fromPolar');\n    }\n  };\n\n  Complex.prototype.valueOf = Complex.prototype.toString;\n  /**\n   * Create a Complex number from a JSON object\n   * @param {Object} json  A JSON Object structured as\n   *                       {\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}\n   *                       All properties are optional, default values\n   *                       for `re` and `im` are 0.\n   * @return {Complex} Returns a new Complex number\n   */\n\n  Complex.fromJSON = function (json) {\n    return new Complex(json);\n  };\n  /**\n   * Compare two complex numbers, `a` and `b`:\n   *\n   * - Returns 1 when the real part of `a` is larger than the real part of `b`\n   * - Returns -1 when the real part of `a` is smaller than the real part of `b`\n   * - Returns 1 when the real parts are equal\n   *   and the imaginary part of `a` is larger than the imaginary part of `b`\n   * - Returns -1 when the real parts are equal\n   *   and the imaginary part of `a` is smaller than the imaginary part of `b`\n   * - Returns 0 when both real and imaginary parts are equal.\n   *\n   * @params {Complex} a\n   * @params {Complex} b\n   * @returns {number} Returns the comparison result: -1, 0, or 1\n   */\n\n\n  Complex.compare = function (a, b) {\n    if (a.re > b.re) {\n      return 1;\n    }\n\n    if (a.re < b.re) {\n      return -1;\n    }\n\n    if (a.im > b.im) {\n      return 1;\n    }\n\n    if (a.im < b.im) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  return Complex;\n}, {\n  isClass: true\n});"]},"metadata":{},"sourceType":"module"}