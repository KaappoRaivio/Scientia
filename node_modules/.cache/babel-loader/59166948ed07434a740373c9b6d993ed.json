{"ast":null,"code":"import { isArray, isBigNumber, isMatrix, isNumber, isRange } from '../../utils/is';\nimport { factory } from '../../utils/factory';\nvar name = 'index';\nvar dependencies = ['Index'];\nexport var createIndexTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Index = _ref.Index;\n  /**\n   * Attach a transform function to math.index\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n\n  return function indexTransform() {\n    var args = [];\n\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i]; // change from one-based to zero based, and convert BigNumber to number\n\n      if (isRange(arg)) {\n        arg.start--;\n        arg.end -= arg.step > 0 ? 0 : 2;\n      } else if (arg && arg.isSet === true) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if (isArray(arg) || isMatrix(arg)) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if (isNumber(arg)) {\n        arg--;\n      } else if (isBigNumber(arg)) {\n        arg = arg.toNumber() - 1;\n      } else if (typeof arg === 'string') {// leave as is\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n\n      args[i] = arg;\n    }\n\n    var res = new Index();\n    Index.apply(res, args);\n    return res;\n  };\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/expression/transform/index.transform.js"],"names":["isArray","isBigNumber","isMatrix","isNumber","isRange","factory","name","dependencies","createIndexTransform","_ref","Index","indexTransform","args","i","ii","arguments","length","arg","start","end","step","isSet","map","v","toNumber","TypeError","res","apply","isTransformFunction"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,EAA+BC,QAA/B,EAAyCC,QAAzC,EAAmDC,OAAnD,QAAkE,gBAAlE;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,oBAAoB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAC3F,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAEA;;;;;;;AAMA,SAAO,SAASC,cAAT,GAA0B;AAC/B,QAAIC,IAAI,GAAG,EAAX;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGC,SAAS,CAACC,MAA/B,EAAuCH,CAAC,GAAGC,EAA3C,EAA+CD,CAAC,EAAhD,EAAoD;AAClD,UAAII,GAAG,GAAGF,SAAS,CAACF,CAAD,CAAnB,CADkD,CAC1B;;AAExB,UAAIT,OAAO,CAACa,GAAD,CAAX,EAAkB;AAChBA,QAAAA,GAAG,CAACC,KAAJ;AACAD,QAAAA,GAAG,CAACE,GAAJ,IAAWF,GAAG,CAACG,IAAJ,GAAW,CAAX,GAAe,CAAf,GAAmB,CAA9B;AACD,OAHD,MAGO,IAAIH,GAAG,IAAIA,GAAG,CAACI,KAAJ,KAAc,IAAzB,EAA+B;AACpCJ,QAAAA,GAAG,GAAGA,GAAG,CAACK,GAAJ,CAAQ,UAAUC,CAAV,EAAa;AACzB,iBAAOA,CAAC,GAAG,CAAX;AACD,SAFK,CAAN;AAGD,OAJM,MAIA,IAAIvB,OAAO,CAACiB,GAAD,CAAP,IAAgBf,QAAQ,CAACe,GAAD,CAA5B,EAAmC;AACxCA,QAAAA,GAAG,GAAGA,GAAG,CAACK,GAAJ,CAAQ,UAAUC,CAAV,EAAa;AACzB,iBAAOA,CAAC,GAAG,CAAX;AACD,SAFK,CAAN;AAGD,OAJM,MAIA,IAAIpB,QAAQ,CAACc,GAAD,CAAZ,EAAmB;AACxBA,QAAAA,GAAG;AACJ,OAFM,MAEA,IAAIhB,WAAW,CAACgB,GAAD,CAAf,EAAsB;AAC3BA,QAAAA,GAAG,GAAGA,GAAG,CAACO,QAAJ,KAAiB,CAAvB;AACD,OAFM,MAEA,IAAI,OAAOP,GAAP,KAAe,QAAnB,EAA6B,CAAC;AACpC,OADM,MACA;AACL,cAAM,IAAIQ,SAAJ,CAAc,8DAAd,CAAN;AACD;;AAEDb,MAAAA,IAAI,CAACC,CAAD,CAAJ,GAAUI,GAAV;AACD;;AAED,QAAIS,GAAG,GAAG,IAAIhB,KAAJ,EAAV;AACAA,IAAAA,KAAK,CAACiB,KAAN,CAAYD,GAAZ,EAAiBd,IAAjB;AACA,WAAOc,GAAP;AACD,GAhCD;AAiCD,CA1CuD,EA0CrD;AACDE,EAAAA,mBAAmB,EAAE;AADpB,CA1CqD,CAAjD","sourcesContent":["import { isArray, isBigNumber, isMatrix, isNumber, isRange } from '../../utils/is';\nimport { factory } from '../../utils/factory';\nvar name = 'index';\nvar dependencies = ['Index'];\nexport var createIndexTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Index = _ref.Index;\n\n  /**\n   * Attach a transform function to math.index\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  return function indexTransform() {\n    var args = [];\n\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i]; // change from one-based to zero based, and convert BigNumber to number\n\n      if (isRange(arg)) {\n        arg.start--;\n        arg.end -= arg.step > 0 ? 0 : 2;\n      } else if (arg && arg.isSet === true) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if (isArray(arg) || isMatrix(arg)) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if (isNumber(arg)) {\n        arg--;\n      } else if (isBigNumber(arg)) {\n        arg = arg.toNumber() - 1;\n      } else if (typeof arg === 'string') {// leave as is\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n\n      args[i] = arg;\n    }\n\n    var res = new Index();\n    Index.apply(res, args);\n    return res;\n  };\n}, {\n  isTransformFunction: true\n});"]},"metadata":{},"sourceType":"module"}