{"ast":null,"code":"import { factory } from '../../../utils/factory';\nvar name = 'sparse';\nvar dependencies = ['typed', 'SparseMatrix'];\nexport var createSparse = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      SparseMatrix = _ref.SparseMatrix;\n  /**\n   * Create a Sparse Matrix. The function creates a new `math.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   *\n   * Syntax:\n   *\n   *    math.sparse()               // creates an empty sparse matrix.\n   *    math.sparse(data)           // creates a sparse matrix with initial data.\n   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.\n   *\n   * Examples:\n   *\n   *    let m = math.sparse([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, matrix\n   *\n   * @param {Array | Matrix} [data]    A two dimensional array\n   *\n   * @return {Matrix} The created matrix\n   */\n\n  return typed(name, {\n    '': function _() {\n      return new SparseMatrix([]);\n    },\n    string: function string(datatype) {\n      return new SparseMatrix([], datatype);\n    },\n    'Array | Matrix': function ArrayMatrix(data) {\n      return new SparseMatrix(data);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(data, datatype) {\n      return new SparseMatrix(data, datatype);\n    }\n  });\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/type/matrix/function/sparse.js"],"names":["factory","name","dependencies","createSparse","_ref","typed","SparseMatrix","_","string","datatype","ArrayMatrix","data","ArrayMatrixString"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,cAAV,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACnF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,YAAY,GAAGF,IAAI,CAACE,YADxB;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAAOD,KAAK,CAACJ,IAAD,EAAO;AACjB,QAAI,SAASM,CAAT,GAAa;AACf,aAAO,IAAID,YAAJ,CAAiB,EAAjB,CAAP;AACD,KAHgB;AAIjBE,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,QAAhB,EAA0B;AAChC,aAAO,IAAIH,YAAJ,CAAiB,EAAjB,EAAqBG,QAArB,CAAP;AACD,KANgB;AAOjB,sBAAkB,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AAC3C,aAAO,IAAIL,YAAJ,CAAiBK,IAAjB,CAAP;AACD,KATgB;AAUjB,8BAA0B,SAASC,iBAAT,CAA2BD,IAA3B,EAAiCF,QAAjC,EAA2C;AACnE,aAAO,IAAIH,YAAJ,CAAiBK,IAAjB,EAAuBF,QAAvB,CAAP;AACD;AAZgB,GAAP,CAAZ;AAcD,CA7C+C,CAAzC","sourcesContent":["import { factory } from '../../../utils/factory';\nvar name = 'sparse';\nvar dependencies = ['typed', 'SparseMatrix'];\nexport var createSparse = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      SparseMatrix = _ref.SparseMatrix;\n\n  /**\n   * Create a Sparse Matrix. The function creates a new `math.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   *\n   * Syntax:\n   *\n   *    math.sparse()               // creates an empty sparse matrix.\n   *    math.sparse(data)           // creates a sparse matrix with initial data.\n   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.\n   *\n   * Examples:\n   *\n   *    let m = math.sparse([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, matrix\n   *\n   * @param {Array | Matrix} [data]    A two dimensional array\n   *\n   * @return {Matrix} The created matrix\n   */\n  return typed(name, {\n    '': function _() {\n      return new SparseMatrix([]);\n    },\n    string: function string(datatype) {\n      return new SparseMatrix([], datatype);\n    },\n    'Array | Matrix': function ArrayMatrix(data) {\n      return new SparseMatrix(data);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(data, datatype) {\n      return new SparseMatrix(data, datatype);\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}