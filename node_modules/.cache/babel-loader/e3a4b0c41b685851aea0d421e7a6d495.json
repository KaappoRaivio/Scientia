{"ast":null,"code":"var _jsxFileName = \"/home/kaappo/testit/canvas/src/components/compass.js\";\nimport React from 'react';\nimport { mod } from \"mathjs\";\nimport \"/home/kaappo/testit/canvas/src/components/compass.css\";\nimport NumberDisplay from \"/home/kaappo/testit/canvas/src/components/numberdisplay.js\";\nconst cheese = \"https://upload.wikimedia.org/wikipedia/commons/a/a4/Kaastekoop.jpg\";\n\nclass Compass extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props = {\n      width: props.width,\n      height: props.height,\n      heading: props.heading\n    };\n    this.arcCenterOffsetY = 110;\n    this.radius = this.getCircleRadius();\n  }\n\n  getCircleRadius() {\n    return Math.sqrt((this.props.width / 2) ** 2 + this.arcCenterOffsetY ** 2);\n  }\n\n  componentDidMount() {\n    this.canvas = this.refs.canvas;\n    const ctx = this.canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // img.onload = () => {\n    // ctx.drawImage(img, 0, 0);\n\n    ctx.font = \"40px Courier\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(this.props.heading.toFixed(2), this.props.width / 2, this.canvas.height);\n    ctx.beginPath();\n    ctx.arc(this.props.width / 2, this.canvas.height + this.arcCenterOffsetY, this.radius, 0, 2 * Math.PI);\n    ctx.fillRect(this.props.width / 2 - 1, this.canvas.height - this.radius + this.arcCenterOffsetY - 10, 2, 10);\n    let divisions = [12, 36, 72];\n    ctx.font = \"20px Courier\";\n\n    for (let index = 0; index < divisions.length; index++) {\n      let division = divisions[index];\n\n      for (let i = 0; i < division; i++) {\n        let baseAngle = 2 * Math.PI / division * i;\n        let angleOffset = this.props.heading * Math.PI / 180; // ctx.fillText(this.props.heading.toFixed(2), start[0] + 5, start[1] + 5)\n\n        this.drawCompassLine(ctx, baseAngle + angleOffset, ((divisions.length - index + 1) / divisions.length) ** 2 * 15);\n\n        if (index == 0) {\n          let angleText = mod(180 - baseAngle / Math.PI * 180, 360);\n          this.drawAngleText(ctx, baseAngle + angleOffset, angleText.toFixed(0));\n        }\n      }\n    }\n\n    ctx.rect(0, 0, this.props.width, this.canvas.height);\n    ctx.closePath();\n    ctx.stroke(); // }\n  }\n\n  getPosFromAngle(angle, offset) {\n    return [this.canvas.width / 2 + Math.sin(angle) * this.radius - offset * Math.sin(angle), this.canvas.height + this.arcCenterOffsetY + Math.cos(angle) * this.radius - offset * Math.cos(angle)];\n  }\n\n  drawAngleText(ctx, angle, text) {\n    let pos = this.getPosFromAngle(angle, 0);\n    let x = pos[0];\n    let y = pos[1];\n    ctx.save();\n    ctx.translate(x + 40 * Math.sin(angle - Math.PI), y + 40 * Math.cos(angle - Math.PI));\n    ctx.rotate(-angle + Math.PI);\n    ctx.textAlign = 'center';\n    ctx.fillText(text, 0, 10);\n    ctx.restore();\n  }\n\n  drawCompassLine(ctx, angle, length) {\n    let end = this.getPosFromAngle(angle, 0);\n    let start = this.getPosFromAngle(angle, length);\n    ctx.moveTo(start[0], start[1]);\n    ctx.lineTo(end[0], end[1]);\n  }\n\n  componentDidUpdate() {\n    this.componentDidMount();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(NumberDisplay, {\n      value: this.props.heading,\n      suffix: \"\\xB0\",\n      unit: \"T\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      width: this.props.width,\n      height: this.props.height / 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default Compass;","map":{"version":3,"sources":["/home/kaappo/testit/canvas/src/components/compass.js"],"names":["React","mod","NumberDisplay","cheese","Compass","Component","constructor","props","width","height","heading","arcCenterOffsetY","radius","getCircleRadius","Math","sqrt","componentDidMount","canvas","refs","ctx","getContext","clearRect","font","textAlign","fillText","toFixed","beginPath","arc","PI","fillRect","divisions","index","length","division","i","baseAngle","angleOffset","drawCompassLine","angleText","drawAngleText","rect","closePath","stroke","getPosFromAngle","angle","offset","sin","cos","text","pos","x","y","save","translate","rotate","restore","end","start","moveTo","lineTo","componentDidUpdate","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { mod } from \"mathjs\";\nimport \"/home/kaappo/testit/canvas/src/components/compass.css\"\nimport NumberDisplay from \"/home/kaappo/testit/canvas/src/components/numberdisplay.js\"\n\nconst cheese = \"https://upload.wikimedia.org/wikipedia/commons/a/a4/Kaastekoop.jpg\"\n\nclass Compass extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.props = {\n            width: props.width,\n            height: props.height,\n            heading: props.heading,\n        };\n\n        this.arcCenterOffsetY = 110;\n        this.radius = this.getCircleRadius();\n    }\n\n    getCircleRadius () {\n        return Math.sqrt((this.props.width / 2) ** 2 + this.arcCenterOffsetY ** 2)\n    }\n\n    componentDidMount() {\n        this.canvas = this.refs.canvas;\n        const ctx = this.canvas.getContext(\"2d\");\n        \n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        // img.onload = () => {\n            // ctx.drawImage(img, 0, 0);\n        ctx.font = \"40px Courier\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(this.props.heading.toFixed(2), this.props.width / 2, this.canvas.height);\n\n        ctx.beginPath();\n        ctx.arc(this.props.width / 2, this.canvas.height + this.arcCenterOffsetY, this.radius, 0, 2 * Math.PI);\n        ctx.fillRect(this.props.width / 2 - 1, this.canvas.height - this.radius + this.arcCenterOffsetY - 10, 2, 10)\n        \n        let divisions = [12, 36, 72];\n        ctx.font = \"20px Courier\";\n        for (let index = 0; index < divisions.length; index++) {\n            let division = divisions[index]\n            for (let i = 0; i < division; i++) {\n                let baseAngle =  2 * Math.PI / division * i;\n                let angleOffset = this.props.heading * Math.PI / 180;\n                \n                \n                // ctx.fillText(this.props.heading.toFixed(2), start[0] + 5, start[1] + 5)\n                this.drawCompassLine(ctx, baseAngle + angleOffset, ((divisions.length - index + 1) / divisions.length) ** 2 * 15)\n                if (index == 0) {\n                    let angleText = mod(180 - baseAngle / Math.PI * 180, 360)\n                    this.drawAngleText(ctx, baseAngle + angleOffset, angleText.toFixed(0))\n                }\n            }\n        }\n        ctx.rect(0, 0, this.props.width, this.canvas.height)\n\n        ctx.closePath();\n        ctx.stroke();\n        // }\n    }\n\n    modulus \n\n    getPosFromAngle (angle, offset) {\n        return [this.canvas.width / 2 + Math.sin(angle) * this.radius - offset * Math.sin(angle), this.canvas.height + this.arcCenterOffsetY + Math.cos(angle) * this.radius - offset * Math.cos(angle)]\n    }\n\n    drawAngleText (ctx, angle, text) {\n        let pos = this.getPosFromAngle(angle, 0)\n        let x = pos[0];\n        let y = pos[1];\n\n        ctx.save();\n        ctx.translate(x + 40 * Math.sin(angle - Math.PI), y + 40 * Math.cos(angle - Math.PI));\n        ctx.rotate(-angle + Math.PI);\n\n        ctx.textAlign = 'center';\n        ctx.fillText(text, 0, 10);\n\n        ctx.restore();\n\n    }\n\n    drawCompassLine (ctx, angle, length) {\n        let end = this.getPosFromAngle(angle, 0)\n        let start = this.getPosFromAngle(angle, length)\n\n        ctx.moveTo(start[0], start[1]);\n        ctx.lineTo(end[0], end[1]);\n    }\n\n    componentDidUpdate () {\n        this.componentDidMount();\n    }\n\n    render () {\n        return <div class=\"container\">\n            <NumberDisplay value={this.props.heading} suffix=\"°\" unit=\"T\" />            \n            <canvas ref=\"canvas\" width={this.props.width} height={this.props.height / 3} />\n        </div>\n    }\n}\n\nexport default Compass"]},"metadata":{},"sourceType":"module"}