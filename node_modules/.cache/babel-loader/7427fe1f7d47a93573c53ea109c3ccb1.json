{"ast":null,"code":"import { errorTransform } from './utils/errorTransform';\nimport { factory } from '../../utils/factory';\nimport { createApply } from '../../function/matrix/apply';\nimport { isBigNumber, isNumber } from '../../utils/is';\nvar name = 'apply';\nvar dependencies = ['typed', 'isInteger'];\n/**\n * Attach a transform function to math.apply\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function apply\n * from one-based to zero based\n */\n\nexport var createApplyTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      isInteger = _ref.isInteger;\n  var apply = createApply({\n    typed: typed,\n    isInteger: isInteger\n  }); // @see: comment of concat itself\n\n  return typed('apply', {\n    '...any': function any(args) {\n      // change dim from one-based to zero-based\n      var dim = args[1];\n\n      if (isNumber(dim)) {\n        args[1] = dim - 1;\n      } else if (isBigNumber(dim)) {\n        args[1] = dim.minus(1);\n      }\n\n      try {\n        return apply.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/expression/transform/apply.transform.js"],"names":["errorTransform","factory","createApply","isBigNumber","isNumber","name","dependencies","createApplyTransform","_ref","typed","isInteger","apply","any","args","dim","minus","err","isTransformFunction"],"mappings":"AAAA,SAASA,cAAT,QAA+B,wBAA/B;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,gBAAtC;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,CAAnB;AACA;;;;;;;;AAQA,OAAO,IAAIC,oBAAoB,GAAG,eAAeN,OAAO,CAACI,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAC3F,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,SAAS,GAAGF,IAAI,CAACE,SADrB;AAEA,MAAIC,KAAK,GAAGT,WAAW,CAAC;AACtBO,IAAAA,KAAK,EAAEA,KADe;AAEtBC,IAAAA,SAAS,EAAEA;AAFW,GAAD,CAAvB,CAH2F,CAMvF;;AAEJ,SAAOD,KAAK,CAAC,OAAD,EAAU;AACpB,cAAU,SAASG,GAAT,CAAaC,IAAb,EAAmB;AAC3B;AACA,UAAIC,GAAG,GAAGD,IAAI,CAAC,CAAD,CAAd;;AAEA,UAAIT,QAAQ,CAACU,GAAD,CAAZ,EAAmB;AACjBD,QAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUC,GAAG,GAAG,CAAhB;AACD,OAFD,MAEO,IAAIX,WAAW,CAACW,GAAD,CAAf,EAAsB;AAC3BD,QAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUC,GAAG,CAACC,KAAJ,CAAU,CAAV,CAAV;AACD;;AAED,UAAI;AACF,eAAOJ,KAAK,CAACA,KAAN,CAAY,IAAZ,EAAkBE,IAAlB,CAAP;AACD,OAFD,CAEE,OAAOG,GAAP,EAAY;AACZ,cAAMhB,cAAc,CAACgB,GAAD,CAApB;AACD;AACF;AAhBmB,GAAV,CAAZ;AAkBD,CA1BuD,EA0BrD;AACDC,EAAAA,mBAAmB,EAAE;AADpB,CA1BqD,CAAjD","sourcesContent":["import { errorTransform } from './utils/errorTransform';\nimport { factory } from '../../utils/factory';\nimport { createApply } from '../../function/matrix/apply';\nimport { isBigNumber, isNumber } from '../../utils/is';\nvar name = 'apply';\nvar dependencies = ['typed', 'isInteger'];\n/**\n * Attach a transform function to math.apply\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function apply\n * from one-based to zero based\n */\n\nexport var createApplyTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      isInteger = _ref.isInteger;\n  var apply = createApply({\n    typed: typed,\n    isInteger: isInteger\n  }); // @see: comment of concat itself\n\n  return typed('apply', {\n    '...any': function any(args) {\n      // change dim from one-based to zero-based\n      var dim = args[1];\n\n      if (isNumber(dim)) {\n        args[1] = dim - 1;\n      } else if (isBigNumber(dim)) {\n        args[1] = dim.minus(1);\n      }\n\n      try {\n        return apply.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});"]},"metadata":{},"sourceType":"module"}