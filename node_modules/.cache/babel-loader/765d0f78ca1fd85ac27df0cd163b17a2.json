{"ast":null,"code":"import { mapObject } from './object';\nimport { isNumber } from './is';\n/**\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\n */\n\n/**\n * Check if a number is integer\n * @param {number | boolean} value\n * @return {boolean} isInteger\n */\n\nexport function isInteger(value) {\n  if (typeof value === 'boolean') {\n    return true;\n  }\n\n  return isFinite(value) ? value === Math.round(value) : false; // Note: we use ==, not ===, as we can have Booleans as well\n}\n/**\n * Calculate the sign of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var sign = /* #__PURE__ */Math.sign || function (x) {\n  if (x > 0) {\n    return 1;\n  } else if (x < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n/**\n * Calculate the base-2 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var log2 = /* #__PURE__ */Math.log2 || function log2(x) {\n  return Math.log(x) / Math.LN2;\n};\n/**\n * Calculate the base-10 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var log10 = /* #__PURE__ */Math.log10 || function log10(x) {\n  return Math.log(x) / Math.LN10;\n};\n/**\n * Calculate the natural logarithm of a number + 1\n * @param {number} x\n * @returns {number}\n */\n\nexport var log1p = /* #__PURE__ */Math.log1p || function (x) {\n  return Math.log(x + 1);\n};\n/**\n * Calculate cubic root for a number\n *\n * Code from es6-shim.js:\n *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577\n *\n * @param {number} x\n * @returns {number} Returns the cubic root of x\n */\n\nexport var cbrt = /* #__PURE__ */Math.cbrt || function cbrt(x) {\n  if (x === 0) {\n    return x;\n  }\n\n  var negate = x < 0;\n  var result;\n\n  if (negate) {\n    x = -x;\n  }\n\n  if (isFinite(x)) {\n    result = Math.exp(Math.log(x) / 3); // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods\n\n    result = (x / (result * result) + 2 * result) / 3;\n  } else {\n    result = x;\n  }\n\n  return negate ? -result : result;\n};\n/**\n * Calculates exponentiation minus 1\n * @param {number} x\n * @return {number} res\n */\n\nexport var expm1 = /* #__PURE__ */Math.expm1 || function expm1(x) {\n  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;\n};\n/**\n * Convert a number to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'engineering'    Always use engineering notation.\n *                                          For example '123.4e+0' and '14.0e+6'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lowerExp` and `upperExp` bounds, and\n *                                          uses exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default,\n *                                          not rounding any digits.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12.071, {notation: 'fixed'})                // '12'\n *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'\n *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'\n *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'\n *\n * @param {number} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\n\nexport function format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  } // handle special cases\n\n\n  if (value === Infinity) {\n    return 'Infinity';\n  } else if (value === -Infinity) {\n    return '-Infinity';\n  } else if (isNaN(value)) {\n    return 'NaN';\n  } // default values for options\n\n\n  var notation = 'auto';\n  var precision;\n\n  if (options) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    } // determine precision from options\n\n\n    if (isNumber(options)) {\n      precision = options;\n    } else if (isNumber(options.precision)) {\n      precision = options.precision;\n    }\n  } // handle the various notations\n\n\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n\n    case 'exponential':\n      return toExponential(value, precision);\n\n    case 'engineering':\n      return toEngineering(value, precision);\n\n    case 'auto':\n      // TODO: clean up some day. Deprecated since: 2018-01-24\n      // @deprecated upper and lower are replaced with upperExp and lowerExp since v4.0.0\n      if (options && options.exponential && (options.exponential.lower !== undefined || options.exponential.upper !== undefined)) {\n        var fixedOptions = mapObject(options, function (x) {\n          return x;\n        });\n        fixedOptions.exponential = undefined;\n\n        if (options.exponential.lower !== undefined) {\n          fixedOptions.lowerExp = Math.round(Math.log(options.exponential.lower) / Math.LN10);\n        }\n\n        if (options.exponential.upper !== undefined) {\n          fixedOptions.upperExp = Math.round(Math.log(options.exponential.upper) / Math.LN10);\n        }\n\n        console.warn('Deprecation warning: Formatting options exponential.lower and exponential.upper ' + '(minimum and maximum value) ' + 'are replaced with exponential.lowerExp and exponential.upperExp ' + '(minimum and maximum exponent) since version 4.0.0. ' + 'Replace ' + JSON.stringify(options) + ' with ' + JSON.stringify(fixedOptions));\n        return toPrecision(value, precision, fixedOptions);\n      } // remove trailing zeros after the decimal point\n\n\n      return toPrecision(value, precision, options && options).replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return digits !== '.' ? digits + e : e;\n      });\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", or \"fixed\".');\n  }\n}\n/**\n * Split a number into sign, coefficients, and exponent\n * @param {number | string} value\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n */\n\nexport function splitNumber(value) {\n  // parse the input value\n  var match = String(value).toLowerCase().match(/^0*?(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\n\n  if (!match) {\n    throw new SyntaxError('Invalid number ' + value);\n  }\n\n  var sign = match[1];\n  var digits = match[2];\n  var exponent = parseFloat(match[4] || '0');\n  var dot = digits.indexOf('.');\n  exponent += dot !== -1 ? dot - 1 : digits.length - 1;\n  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)\n  .replace(/^0*/, function (zeros) {\n    // remove leading zeros, add their count to the exponent\n    exponent -= zeros.length;\n    return '';\n  }).replace(/0*$/, '') // remove trailing zeros\n  .split('').map(function (d) {\n    return parseInt(d);\n  });\n\n  if (coefficients.length === 0) {\n    coefficients.push(0);\n    exponent++;\n  }\n\n  return {\n    sign: sign,\n    coefficients: coefficients,\n    exponent: exponent\n  };\n}\n/**\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\n\nexport function toEngineering(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var split = splitNumber(value);\n  var rounded = roundDigits(split, precision);\n  var e = rounded.exponent;\n  var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent\n\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\n\n  if (isNumber(precision)) {\n    // add zeroes to give correct sig figs\n    while (precision > c.length || e - newExp + 1 > c.length) {\n      c.push(0);\n    }\n  } else {\n    // concatenate coefficients with necessary zeros\n    // add zeros if necessary (for example: 1e+8 -> 100e+6)\n    var missingZeros = Math.abs(e - newExp) - (c.length - 1);\n\n    for (var i = 0; i < missingZeros; i++) {\n      c.push(0);\n    }\n  } // find difference in exponents\n\n\n  var expDiff = Math.abs(e - newExp);\n  var decimalIdx = 1; // push decimal index over by expDiff times\n\n  while (expDiff > 0) {\n    decimalIdx++;\n    expDiff--;\n  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.\n  // otherwise concat with the rest of the coefficients\n\n\n  var decimals = c.slice(decimalIdx).join('');\n  var decimalVal = isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';\n  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n  return rounded.sign + str;\n}\n/**\n * Format a number with fixed notation.\n * @param {number | string} value\n * @param {number} [precision=undefined]  Optional number of decimals after the\n *                                        decimal point. null by default.\n */\n\nexport function toFixed(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var splitValue = splitNumber(value);\n  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;\n  var c = rounded.coefficients;\n  var p = rounded.exponent + 1; // exponent may have changed\n  // append zeros if needed\n\n  var pp = p + (precision || 0);\n\n  if (c.length < pp) {\n    c = c.concat(zeros(pp - c.length));\n  } // prepend zeros if needed\n\n\n  if (p < 0) {\n    c = zeros(-p + 1).concat(c);\n    p = 1;\n  } // insert a dot if needed\n\n\n  if (p < c.length) {\n    c.splice(p, 0, p === 0 ? '0.' : '.');\n  }\n\n  return rounded.sign + c.join('');\n}\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n */\n\nexport function toExponential(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // round if needed, else create a clone\n\n\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n  var c = rounded.coefficients;\n  var e = rounded.exponent; // append zeros if needed\n\n  if (c.length < precision) {\n    c = c.concat(zeros(precision - c.length));\n  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`\n\n\n  var first = c.shift();\n  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;\n}\n/**\n * Format a number with a certain precision\n * @param {number | string} value\n * @param {number} [precision=undefined] Optional number of digits.\n * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]\n *                                       By default:\n *                                         lowerExp = -3 (incl)\n *                                         upper = +5 (excl)\n * @return {string}\n */\n\nexport function toPrecision(value, precision, options) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // determine lower and upper bound for exponential notation.\n\n\n  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n\n  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {\n    // exponential notation\n    return toExponential(value, precision);\n  } else {\n    var c = rounded.coefficients;\n    var e = rounded.exponent; // append trailing zeros\n\n    if (c.length < precision) {\n      c = c.concat(zeros(precision - c.length));\n    } // append trailing zeros\n    // TODO: simplify the next statement\n\n\n    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros\n\n    c = zeros(-e).concat(c);\n    var dot = e > 0 ? e : 0;\n\n    if (dot < c.length - 1) {\n      c.splice(dot + 1, 0, '.');\n    }\n\n    return rounded.sign + c.join('');\n  }\n}\n/**\n * Round the number of digits of a number *\n * @param {SplitValue} split       A value split with .splitNumber(value)\n * @param {number} precision  A positive integer\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n *              with rounded digits\n */\n\nexport function roundDigits(split, precision) {\n  // create a clone\n  var rounded = {\n    sign: split.sign,\n    coefficients: split.coefficients,\n    exponent: split.exponent\n  };\n  var c = rounded.coefficients; // prepend zeros if needed\n\n  while (precision <= 0) {\n    c.unshift(0);\n    rounded.exponent++;\n    precision++;\n  }\n\n  if (c.length > precision) {\n    var removed = c.splice(precision, c.length - precision);\n\n    if (removed[0] >= 5) {\n      var i = precision - 1;\n      c[i]++;\n\n      while (c[i] === 10) {\n        c.pop();\n\n        if (i === 0) {\n          c.unshift(0);\n          rounded.exponent++;\n          i++;\n        }\n\n        i--;\n        c[i]++;\n      }\n    }\n  }\n\n  return rounded;\n}\n/**\n * Create an array filled with zeros.\n * @param {number} length\n * @return {Array}\n */\n\nfunction zeros(length) {\n  var arr = [];\n\n  for (var i = 0; i < length; i++) {\n    arr.push(0);\n  }\n\n  return arr;\n}\n/**\n * Count the number of significant digits of a number.\n *\n * For example:\n *   2.34 returns 3\n *   0.0034 returns 2\n *   120.5e+30 returns 4\n *\n * @param {number} value\n * @return {number} digits   Number of significant digits\n */\n\n\nexport function digits(value) {\n  return value.toExponential().replace(/e.*$/, '') // remove exponential notation\n  .replace(/^0\\.?0*|\\./, '') // remove decimal point and leading zeros\n  .length;\n}\n/**\n * Minimum number added to one that makes the result different than one\n */\n\nexport var DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\n/**\n * Compares two floating point numbers.\n * @param {number} x          First value to compare\n * @param {number} y          Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n*/\n\nexport function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x === y;\n  }\n\n  if (x === y) {\n    return true;\n  } // NaN\n\n\n  if (isNaN(x) || isNaN(y)) {\n    return false;\n  } // at this point x and y should be finite\n\n\n  if (isFinite(x) && isFinite(y)) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = Math.abs(x - y);\n\n    if (diff < DBL_EPSILON) {\n      return true;\n    } else {\n      // use relative error\n      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n\n  return false;\n}\n/**\n * Calculate the hyperbolic arccos of a number\n * @param {number} x\n * @return {number}\n */\n\nexport var acosh = Math.acosh || function (x) {\n  return Math.log(Math.sqrt(x * x - 1) + x);\n};\nexport var asinh = Math.asinh || function (x) {\n  return Math.log(Math.sqrt(x * x + 1) + x);\n};\n/**\n * Calculate the hyperbolic arctangent of a number\n * @param {number} x\n * @return {number}\n */\n\nexport var atanh = Math.atanh || function (x) {\n  return Math.log((1 + x) / (1 - x)) / 2;\n};\n/**\n * Calculate the hyperbolic cosine of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var cosh = Math.cosh || function (x) {\n  return (Math.exp(x) + Math.exp(-x)) / 2;\n};\n/**\n * Calculate the hyperbolic sine of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var sinh = Math.sinh || function (x) {\n  return (Math.exp(x) - Math.exp(-x)) / 2;\n};\n/**\n * Calculate the hyperbolic tangent of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var tanh = Math.tanh || function (x) {\n  var e = Math.exp(2 * x);\n  return (e - 1) / (e + 1);\n};","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/utils/number.js"],"names":["mapObject","isNumber","isInteger","value","isFinite","Math","round","sign","x","log2","log","LN2","log10","LN10","log1p","cbrt","negate","result","exp","expm1","format","options","Infinity","isNaN","notation","precision","toFixed","toExponential","toEngineering","exponential","lower","undefined","upper","fixedOptions","lowerExp","upperExp","console","warn","JSON","stringify","toPrecision","replace","digits","arguments","e","Error","splitNumber","match","String","toLowerCase","SyntaxError","exponent","parseFloat","dot","indexOf","length","coefficients","zeros","split","map","d","parseInt","push","rounded","roundDigits","c","newExp","missingZeros","abs","i","expDiff","decimalIdx","decimals","slice","join","decimalVal","str","toString","splitValue","p","pp","concat","splice","first","shift","unshift","removed","pop","arr","DBL_EPSILON","Number","EPSILON","nearlyEqual","y","epsilon","diff","max","acosh","sqrt","asinh","atanh","cosh","sinh","tanh"],"mappings":"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","sourcesContent":["import { mapObject } from './object';\nimport { isNumber } from './is';\n/**\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\n */\n\n/**\n * Check if a number is integer\n * @param {number | boolean} value\n * @return {boolean} isInteger\n */\n\nexport function isInteger(value) {\n  if (typeof value === 'boolean') {\n    return true;\n  }\n\n  return isFinite(value) ? value === Math.round(value) : false; // Note: we use ==, not ===, as we can have Booleans as well\n}\n/**\n * Calculate the sign of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var sign = /* #__PURE__ */Math.sign || function (x) {\n  if (x > 0) {\n    return 1;\n  } else if (x < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n/**\n * Calculate the base-2 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var log2 = /* #__PURE__ */Math.log2 || function log2(x) {\n  return Math.log(x) / Math.LN2;\n};\n/**\n * Calculate the base-10 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var log10 = /* #__PURE__ */Math.log10 || function log10(x) {\n  return Math.log(x) / Math.LN10;\n};\n/**\n * Calculate the natural logarithm of a number + 1\n * @param {number} x\n * @returns {number}\n */\n\nexport var log1p = /* #__PURE__ */Math.log1p || function (x) {\n  return Math.log(x + 1);\n};\n/**\n * Calculate cubic root for a number\n *\n * Code from es6-shim.js:\n *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577\n *\n * @param {number} x\n * @returns {number} Returns the cubic root of x\n */\n\nexport var cbrt = /* #__PURE__ */Math.cbrt || function cbrt(x) {\n  if (x === 0) {\n    return x;\n  }\n\n  var negate = x < 0;\n  var result;\n\n  if (negate) {\n    x = -x;\n  }\n\n  if (isFinite(x)) {\n    result = Math.exp(Math.log(x) / 3); // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods\n\n    result = (x / (result * result) + 2 * result) / 3;\n  } else {\n    result = x;\n  }\n\n  return negate ? -result : result;\n};\n/**\n * Calculates exponentiation minus 1\n * @param {number} x\n * @return {number} res\n */\n\nexport var expm1 = /* #__PURE__ */Math.expm1 || function expm1(x) {\n  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;\n};\n/**\n * Convert a number to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'engineering'    Always use engineering notation.\n *                                          For example '123.4e+0' and '14.0e+6'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lowerExp` and `upperExp` bounds, and\n *                                          uses exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default,\n *                                          not rounding any digits.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12.071, {notation: 'fixed'})                // '12'\n *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'\n *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'\n *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'\n *\n * @param {number} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\n\nexport function format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  } // handle special cases\n\n\n  if (value === Infinity) {\n    return 'Infinity';\n  } else if (value === -Infinity) {\n    return '-Infinity';\n  } else if (isNaN(value)) {\n    return 'NaN';\n  } // default values for options\n\n\n  var notation = 'auto';\n  var precision;\n\n  if (options) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    } // determine precision from options\n\n\n    if (isNumber(options)) {\n      precision = options;\n    } else if (isNumber(options.precision)) {\n      precision = options.precision;\n    }\n  } // handle the various notations\n\n\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n\n    case 'exponential':\n      return toExponential(value, precision);\n\n    case 'engineering':\n      return toEngineering(value, precision);\n\n    case 'auto':\n      // TODO: clean up some day. Deprecated since: 2018-01-24\n      // @deprecated upper and lower are replaced with upperExp and lowerExp since v4.0.0\n      if (options && options.exponential && (options.exponential.lower !== undefined || options.exponential.upper !== undefined)) {\n        var fixedOptions = mapObject(options, function (x) {\n          return x;\n        });\n        fixedOptions.exponential = undefined;\n\n        if (options.exponential.lower !== undefined) {\n          fixedOptions.lowerExp = Math.round(Math.log(options.exponential.lower) / Math.LN10);\n        }\n\n        if (options.exponential.upper !== undefined) {\n          fixedOptions.upperExp = Math.round(Math.log(options.exponential.upper) / Math.LN10);\n        }\n\n        console.warn('Deprecation warning: Formatting options exponential.lower and exponential.upper ' + '(minimum and maximum value) ' + 'are replaced with exponential.lowerExp and exponential.upperExp ' + '(minimum and maximum exponent) since version 4.0.0. ' + 'Replace ' + JSON.stringify(options) + ' with ' + JSON.stringify(fixedOptions));\n        return toPrecision(value, precision, fixedOptions);\n      } // remove trailing zeros after the decimal point\n\n\n      return toPrecision(value, precision, options && options).replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return digits !== '.' ? digits + e : e;\n      });\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", or \"fixed\".');\n  }\n}\n/**\n * Split a number into sign, coefficients, and exponent\n * @param {number | string} value\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n */\n\nexport function splitNumber(value) {\n  // parse the input value\n  var match = String(value).toLowerCase().match(/^0*?(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\n\n  if (!match) {\n    throw new SyntaxError('Invalid number ' + value);\n  }\n\n  var sign = match[1];\n  var digits = match[2];\n  var exponent = parseFloat(match[4] || '0');\n  var dot = digits.indexOf('.');\n  exponent += dot !== -1 ? dot - 1 : digits.length - 1;\n  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)\n  .replace(/^0*/, function (zeros) {\n    // remove leading zeros, add their count to the exponent\n    exponent -= zeros.length;\n    return '';\n  }).replace(/0*$/, '') // remove trailing zeros\n  .split('').map(function (d) {\n    return parseInt(d);\n  });\n\n  if (coefficients.length === 0) {\n    coefficients.push(0);\n    exponent++;\n  }\n\n  return {\n    sign: sign,\n    coefficients: coefficients,\n    exponent: exponent\n  };\n}\n/**\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\n\nexport function toEngineering(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var split = splitNumber(value);\n  var rounded = roundDigits(split, precision);\n  var e = rounded.exponent;\n  var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent\n\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\n\n  if (isNumber(precision)) {\n    // add zeroes to give correct sig figs\n    while (precision > c.length || e - newExp + 1 > c.length) {\n      c.push(0);\n    }\n  } else {\n    // concatenate coefficients with necessary zeros\n    // add zeros if necessary (for example: 1e+8 -> 100e+6)\n    var missingZeros = Math.abs(e - newExp) - (c.length - 1);\n\n    for (var i = 0; i < missingZeros; i++) {\n      c.push(0);\n    }\n  } // find difference in exponents\n\n\n  var expDiff = Math.abs(e - newExp);\n  var decimalIdx = 1; // push decimal index over by expDiff times\n\n  while (expDiff > 0) {\n    decimalIdx++;\n    expDiff--;\n  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.\n  // otherwise concat with the rest of the coefficients\n\n\n  var decimals = c.slice(decimalIdx).join('');\n  var decimalVal = isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';\n  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n  return rounded.sign + str;\n}\n/**\n * Format a number with fixed notation.\n * @param {number | string} value\n * @param {number} [precision=undefined]  Optional number of decimals after the\n *                                        decimal point. null by default.\n */\n\nexport function toFixed(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var splitValue = splitNumber(value);\n  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;\n  var c = rounded.coefficients;\n  var p = rounded.exponent + 1; // exponent may have changed\n  // append zeros if needed\n\n  var pp = p + (precision || 0);\n\n  if (c.length < pp) {\n    c = c.concat(zeros(pp - c.length));\n  } // prepend zeros if needed\n\n\n  if (p < 0) {\n    c = zeros(-p + 1).concat(c);\n    p = 1;\n  } // insert a dot if needed\n\n\n  if (p < c.length) {\n    c.splice(p, 0, p === 0 ? '0.' : '.');\n  }\n\n  return rounded.sign + c.join('');\n}\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n */\n\nexport function toExponential(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // round if needed, else create a clone\n\n\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n  var c = rounded.coefficients;\n  var e = rounded.exponent; // append zeros if needed\n\n  if (c.length < precision) {\n    c = c.concat(zeros(precision - c.length));\n  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`\n\n\n  var first = c.shift();\n  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;\n}\n/**\n * Format a number with a certain precision\n * @param {number | string} value\n * @param {number} [precision=undefined] Optional number of digits.\n * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]\n *                                       By default:\n *                                         lowerExp = -3 (incl)\n *                                         upper = +5 (excl)\n * @return {string}\n */\n\nexport function toPrecision(value, precision, options) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // determine lower and upper bound for exponential notation.\n\n\n  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n\n  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {\n    // exponential notation\n    return toExponential(value, precision);\n  } else {\n    var c = rounded.coefficients;\n    var e = rounded.exponent; // append trailing zeros\n\n    if (c.length < precision) {\n      c = c.concat(zeros(precision - c.length));\n    } // append trailing zeros\n    // TODO: simplify the next statement\n\n\n    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros\n\n    c = zeros(-e).concat(c);\n    var dot = e > 0 ? e : 0;\n\n    if (dot < c.length - 1) {\n      c.splice(dot + 1, 0, '.');\n    }\n\n    return rounded.sign + c.join('');\n  }\n}\n/**\n * Round the number of digits of a number *\n * @param {SplitValue} split       A value split with .splitNumber(value)\n * @param {number} precision  A positive integer\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n *              with rounded digits\n */\n\nexport function roundDigits(split, precision) {\n  // create a clone\n  var rounded = {\n    sign: split.sign,\n    coefficients: split.coefficients,\n    exponent: split.exponent\n  };\n  var c = rounded.coefficients; // prepend zeros if needed\n\n  while (precision <= 0) {\n    c.unshift(0);\n    rounded.exponent++;\n    precision++;\n  }\n\n  if (c.length > precision) {\n    var removed = c.splice(precision, c.length - precision);\n\n    if (removed[0] >= 5) {\n      var i = precision - 1;\n      c[i]++;\n\n      while (c[i] === 10) {\n        c.pop();\n\n        if (i === 0) {\n          c.unshift(0);\n          rounded.exponent++;\n          i++;\n        }\n\n        i--;\n        c[i]++;\n      }\n    }\n  }\n\n  return rounded;\n}\n/**\n * Create an array filled with zeros.\n * @param {number} length\n * @return {Array}\n */\n\nfunction zeros(length) {\n  var arr = [];\n\n  for (var i = 0; i < length; i++) {\n    arr.push(0);\n  }\n\n  return arr;\n}\n/**\n * Count the number of significant digits of a number.\n *\n * For example:\n *   2.34 returns 3\n *   0.0034 returns 2\n *   120.5e+30 returns 4\n *\n * @param {number} value\n * @return {number} digits   Number of significant digits\n */\n\n\nexport function digits(value) {\n  return value.toExponential().replace(/e.*$/, '') // remove exponential notation\n  .replace(/^0\\.?0*|\\./, '') // remove decimal point and leading zeros\n  .length;\n}\n/**\n * Minimum number added to one that makes the result different than one\n */\n\nexport var DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\n/**\n * Compares two floating point numbers.\n * @param {number} x          First value to compare\n * @param {number} y          Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n*/\n\nexport function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x === y;\n  }\n\n  if (x === y) {\n    return true;\n  } // NaN\n\n\n  if (isNaN(x) || isNaN(y)) {\n    return false;\n  } // at this point x and y should be finite\n\n\n  if (isFinite(x) && isFinite(y)) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = Math.abs(x - y);\n\n    if (diff < DBL_EPSILON) {\n      return true;\n    } else {\n      // use relative error\n      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n\n  return false;\n}\n/**\n * Calculate the hyperbolic arccos of a number\n * @param {number} x\n * @return {number}\n */\n\nexport var acosh = Math.acosh || function (x) {\n  return Math.log(Math.sqrt(x * x - 1) + x);\n};\nexport var asinh = Math.asinh || function (x) {\n  return Math.log(Math.sqrt(x * x + 1) + x);\n};\n/**\n * Calculate the hyperbolic arctangent of a number\n * @param {number} x\n * @return {number}\n */\n\nexport var atanh = Math.atanh || function (x) {\n  return Math.log((1 + x) / (1 - x)) / 2;\n};\n/**\n * Calculate the hyperbolic cosine of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var cosh = Math.cosh || function (x) {\n  return (Math.exp(x) + Math.exp(-x)) / 2;\n};\n/**\n * Calculate the hyperbolic sine of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var sinh = Math.sinh || function (x) {\n  return (Math.exp(x) - Math.exp(-x)) / 2;\n};\n/**\n * Calculate the hyperbolic tangent of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var tanh = Math.tanh || function (x) {\n  var e = Math.exp(2 * x);\n  return (e - 1) / (e + 1);\n};"]},"metadata":{},"sourceType":"module"}