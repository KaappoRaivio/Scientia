{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { extend } from '../../utils/object';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nvar name = 'divide';\nvar dependencies = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];\nexport var createDivide = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      multiply = _ref.multiply,\n      equalScalar = _ref.equalScalar,\n      divideScalar = _ref.divideScalar,\n      inv = _ref.inv;\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Divide two values, `x / y`.\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n   *\n   * Syntax:\n   *\n   *    math.divide(x, y)\n   *\n   * Examples:\n   *\n   *    math.divide(2, 3)            // returns number 0.6666666666666666\n   *\n   *    const a = math.complex(5, 14)\n   *    const b = math.complex(4, 1)\n   *    math.divide(a, b)            // returns Complex 2 + 3i\n   *\n   *    const c = [[7, -6], [13, -4]]\n   *    const d = [[1, 2], [4, 3]]\n   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]\n   *\n   *    const e = math.unit('18 km')\n   *    math.divide(e, 4.5)          // returns Unit 4 km\n   *\n   * See also:\n   *\n   *    multiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\n   */\n\n  return typed('divide', extend({\n    // we extend the signatures of divideScalar with signatures dealing with matrices\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {\n      // TODO: implement matrix right division using pseudo inverse\n      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html\n      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\n      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\n      return multiply(x, inv(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, divideScalar, false);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, divideScalar, false);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n    },\n    'any, Array | Matrix': function anyArrayMatrix(x, y) {\n      return multiply(x, inv(y));\n    }\n  }, divideScalar.signatures));\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/arithmetic/divide.js"],"names":["factory","extend","createAlgorithm11","createAlgorithm14","name","dependencies","createDivide","_ref","typed","matrix","multiply","equalScalar","divideScalar","inv","algorithm11","algorithm14","ArrayMatrixArrayMatrix","x","y","DenseMatrixAny","SparseMatrixAny","ArrayAny","valueOf","anyArrayMatrix","signatures"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgC,aAAhC,EAA+C,cAA/C,EAA+D,KAA/D,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeN,OAAO,CAACI,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACnF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAAA,MAEIC,QAAQ,GAAGH,IAAI,CAACG,QAFpB;AAAA,MAGIC,WAAW,GAAGJ,IAAI,CAACI,WAHvB;AAAA,MAIIC,YAAY,GAAGL,IAAI,CAACK,YAJxB;AAAA,MAKIC,GAAG,GAAGN,IAAI,CAACM,GALf;AAMA,MAAIC,WAAW,GAAGZ,iBAAiB,CAAC;AAClCM,IAAAA,KAAK,EAAEA,KAD2B;AAElCG,IAAAA,WAAW,EAAEA;AAFqB,GAAD,CAAnC;AAIA,MAAII,WAAW,GAAGZ,iBAAiB,CAAC;AAClCK,IAAAA,KAAK,EAAEA;AAD2B,GAAD,CAAnC;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,SAAOA,KAAK,CAAC,QAAD,EAAWP,MAAM,CAAC;AAC5B;AACA,sCAAkC,SAASe,sBAAT,CAAgCC,CAAhC,EAAmCC,CAAnC,EAAsC;AACtE;AACA;AACA;AACA;AACA,aAAOR,QAAQ,CAACO,CAAD,EAAIJ,GAAG,CAACK,CAAD,CAAP,CAAf;AACD,KAR2B;AAS5B,wBAAoB,SAASC,cAAT,CAAwBF,CAAxB,EAA2BC,CAA3B,EAA8B;AAChD,aAAOH,WAAW,CAACE,CAAD,EAAIC,CAAJ,EAAON,YAAP,EAAqB,KAArB,CAAlB;AACD,KAX2B;AAY5B,yBAAqB,SAASQ,eAAT,CAAyBH,CAAzB,EAA4BC,CAA5B,EAA+B;AAClD,aAAOJ,WAAW,CAACG,CAAD,EAAIC,CAAJ,EAAON,YAAP,EAAqB,KAArB,CAAlB;AACD,KAd2B;AAe5B,kBAAc,SAASS,QAAT,CAAkBJ,CAAlB,EAAqBC,CAArB,EAAwB;AACpC;AACA,aAAOH,WAAW,CAACN,MAAM,CAACQ,CAAD,CAAP,EAAYC,CAAZ,EAAeN,YAAf,EAA6B,KAA7B,CAAX,CAA+CU,OAA/C,EAAP;AACD,KAlB2B;AAmB5B,2BAAuB,SAASC,cAAT,CAAwBN,CAAxB,EAA2BC,CAA3B,EAA8B;AACnD,aAAOR,QAAQ,CAACO,CAAD,EAAIJ,GAAG,CAACK,CAAD,CAAP,CAAf;AACD;AArB2B,GAAD,EAsB1BN,YAAY,CAACY,UAtBa,CAAjB,CAAZ;AAuBD,CArE+C,CAAzC","sourcesContent":["import { factory } from '../../utils/factory';\nimport { extend } from '../../utils/object';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nvar name = 'divide';\nvar dependencies = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];\nexport var createDivide = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      multiply = _ref.multiply,\n      equalScalar = _ref.equalScalar,\n      divideScalar = _ref.divideScalar,\n      inv = _ref.inv;\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Divide two values, `x / y`.\n   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.\n   *\n   * Syntax:\n   *\n   *    math.divide(x, y)\n   *\n   * Examples:\n   *\n   *    math.divide(2, 3)            // returns number 0.6666666666666666\n   *\n   *    const a = math.complex(5, 14)\n   *    const b = math.complex(4, 1)\n   *    math.divide(a, b)            // returns Complex 2 + 3i\n   *\n   *    const c = [[7, -6], [13, -4]]\n   *    const d = [[1, 2], [4, 3]]\n   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]\n   *\n   *    const e = math.unit('18 km')\n   *    math.divide(e, 4.5)          // returns Unit 4 km\n   *\n   * See also:\n   *\n   *    multiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`\n   */\n\n  return typed('divide', extend({\n    // we extend the signatures of divideScalar with signatures dealing with matrices\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {\n      // TODO: implement matrix right division using pseudo inverse\n      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html\n      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html\n      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour\n      return multiply(x, inv(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, divideScalar, false);\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, divideScalar, false);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n    },\n    'any, Array | Matrix': function anyArrayMatrix(x, y) {\n      return multiply(x, inv(y));\n    }\n  }, divideScalar.signatures));\n});"]},"metadata":{},"sourceType":"module"}