{"ast":null,"code":"import { clone } from '../../utils/object';\nimport { format } from '../../utils/string';\nimport { factory } from '../../utils/factory';\nvar name = 'transpose';\nvar dependencies = ['typed', 'matrix'];\nexport var createTranspose = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix;\n  /**\n   * Transpose a matrix. All values of the matrix are reflected over its\n   * main diagonal. Only applicable to two dimensional matrices containing\n   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional\n   * vectors and scalars return the input unchanged.\n   *\n   * Syntax:\n   *\n   *     math.transpose(x)\n   *\n   * Examples:\n   *\n   *     const A = [[1, 2, 3], [4, 5, 6]]\n   *     math.transpose(A)               // returns [[1, 4], [2, 5], [3, 6]]\n   *\n   * See also:\n   *\n   *     diag, inv, subset, squeeze\n   *\n   * @param {Array | Matrix} x  Matrix to be transposed\n   * @return {Array | Matrix}   The transposed matrix\n   */\n\n  var transpose = typed('transpose', {\n    Array: function Array(x) {\n      // use dense matrix implementation\n      return transpose(matrix(x)).valueOf();\n    },\n    Matrix: function Matrix(x) {\n      // matrix size\n      var size = x.size(); // result\n\n      var c; // process dimensions\n\n      switch (size.length) {\n        case 1:\n          // vector\n          c = x.clone();\n          break;\n\n        case 2:\n          {\n            // rows and columns\n            var rows = size[0];\n            var columns = size[1]; // check columns\n\n            if (columns === 0) {\n              // throw exception\n              throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format(size) + ')');\n            } // process storage format\n\n\n            switch (x.storage()) {\n              case 'dense':\n                c = _denseTranspose(x, rows, columns);\n                break;\n\n              case 'sparse':\n                c = _sparseTranspose(x, rows, columns);\n                break;\n            }\n          }\n          break;\n\n        default:\n          // multi dimensional\n          throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format(this._size) + ')');\n      }\n\n      return c;\n    },\n    // scalars\n    any: function any(x) {\n      return clone(x);\n    }\n  });\n\n  function _denseTranspose(m, rows, columns) {\n    // matrix array\n    var data = m._data; // transposed matrix data\n\n    var transposed = [];\n    var transposedRow; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // initialize row\n      transposedRow = transposed[j] = []; // loop rows\n\n      for (var i = 0; i < rows; i++) {\n        // set data\n        transposedRow[i] = clone(data[i][j]);\n      }\n    } // return matrix\n\n\n    return m.createDenseMatrix({\n      data: transposed,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  }\n\n  function _sparseTranspose(m, rows, columns) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // result matrices\n\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // row counts\n\n    var w = [];\n\n    for (var x = 0; x < rows; x++) {\n      w[x] = 0;\n    } // vars\n\n\n    var p, l, j; // loop values in matrix\n\n    for (p = 0, l = index.length; p < l; p++) {\n      // number of values in row\n      w[index[p]]++;\n    } // cumulative sum\n\n\n    var sum = 0; // initialize cptr with the cummulative sum of row counts\n\n    for (var i = 0; i < rows; i++) {\n      // update cptr\n      cptr.push(sum); // update sum\n\n      sum += w[i]; // update w\n\n      w[i] = cptr[i];\n    } // update cptr\n\n\n    cptr.push(sum); // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // values & index in column\n      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {\n        // C values & index\n        var q = w[index[k]]++; // C[j, i] = A[i, j]\n\n        cindex[q] = j; // check we need to process values (pattern matrix)\n\n        if (values) {\n          cvalues[q] = clone(values[k]);\n        }\n      }\n    } // return matrix\n\n\n    return m.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  }\n\n  return transpose;\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/matrix/transpose.js"],"names":["clone","format","factory","name","dependencies","createTranspose","_ref","typed","matrix","transpose","Array","x","valueOf","Matrix","size","c","length","rows","columns","RangeError","storage","_denseTranspose","_sparseTranspose","_size","any","m","data","_data","transposed","transposedRow","j","i","createDenseMatrix","datatype","_datatype","values","_values","index","_index","ptr","_ptr","cvalues","undefined","cindex","cptr","w","p","l","sum","push","k0","k1","k","q","createSparseMatrix"],"mappings":"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","sourcesContent":["import { clone } from '../../utils/object';\nimport { format } from '../../utils/string';\nimport { factory } from '../../utils/factory';\nvar name = 'transpose';\nvar dependencies = ['typed', 'matrix'];\nexport var createTranspose = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix;\n\n  /**\n   * Transpose a matrix. All values of the matrix are reflected over its\n   * main diagonal. Only applicable to two dimensional matrices containing\n   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional\n   * vectors and scalars return the input unchanged.\n   *\n   * Syntax:\n   *\n   *     math.transpose(x)\n   *\n   * Examples:\n   *\n   *     const A = [[1, 2, 3], [4, 5, 6]]\n   *     math.transpose(A)               // returns [[1, 4], [2, 5], [3, 6]]\n   *\n   * See also:\n   *\n   *     diag, inv, subset, squeeze\n   *\n   * @param {Array | Matrix} x  Matrix to be transposed\n   * @return {Array | Matrix}   The transposed matrix\n   */\n  var transpose = typed('transpose', {\n    Array: function Array(x) {\n      // use dense matrix implementation\n      return transpose(matrix(x)).valueOf();\n    },\n    Matrix: function Matrix(x) {\n      // matrix size\n      var size = x.size(); // result\n\n      var c; // process dimensions\n\n      switch (size.length) {\n        case 1:\n          // vector\n          c = x.clone();\n          break;\n\n        case 2:\n          {\n            // rows and columns\n            var rows = size[0];\n            var columns = size[1]; // check columns\n\n            if (columns === 0) {\n              // throw exception\n              throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format(size) + ')');\n            } // process storage format\n\n\n            switch (x.storage()) {\n              case 'dense':\n                c = _denseTranspose(x, rows, columns);\n                break;\n\n              case 'sparse':\n                c = _sparseTranspose(x, rows, columns);\n                break;\n            }\n          }\n          break;\n\n        default:\n          // multi dimensional\n          throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format(this._size) + ')');\n      }\n\n      return c;\n    },\n    // scalars\n    any: function any(x) {\n      return clone(x);\n    }\n  });\n\n  function _denseTranspose(m, rows, columns) {\n    // matrix array\n    var data = m._data; // transposed matrix data\n\n    var transposed = [];\n    var transposedRow; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // initialize row\n      transposedRow = transposed[j] = []; // loop rows\n\n      for (var i = 0; i < rows; i++) {\n        // set data\n        transposedRow[i] = clone(data[i][j]);\n      }\n    } // return matrix\n\n\n    return m.createDenseMatrix({\n      data: transposed,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  }\n\n  function _sparseTranspose(m, rows, columns) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // result matrices\n\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // row counts\n\n    var w = [];\n\n    for (var x = 0; x < rows; x++) {\n      w[x] = 0;\n    } // vars\n\n\n    var p, l, j; // loop values in matrix\n\n    for (p = 0, l = index.length; p < l; p++) {\n      // number of values in row\n      w[index[p]]++;\n    } // cumulative sum\n\n\n    var sum = 0; // initialize cptr with the cummulative sum of row counts\n\n    for (var i = 0; i < rows; i++) {\n      // update cptr\n      cptr.push(sum); // update sum\n\n      sum += w[i]; // update w\n\n      w[i] = cptr[i];\n    } // update cptr\n\n\n    cptr.push(sum); // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // values & index in column\n      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {\n        // C values & index\n        var q = w[index[k]]++; // C[j, i] = A[i, j]\n\n        cindex[q] = j; // check we need to process values (pattern matrix)\n\n        if (values) {\n          cvalues[q] = clone(values[k]);\n        }\n      }\n    } // return matrix\n\n\n    return m.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [columns, rows],\n      datatype: m._datatype\n    });\n  }\n\n  return transpose;\n});"]},"metadata":{},"sourceType":"module"}