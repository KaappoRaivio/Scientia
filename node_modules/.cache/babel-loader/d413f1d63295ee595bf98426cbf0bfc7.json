{"ast":null,"code":"class DrawHelper {\n  constructor(canvas, ctx, arcCenterOffsetY) {\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.arcCenterOffsetY = arcCenterOffsetY;\n  }\n\n  drawAngleText(ctx, angle, text) {\n    let pos = this.getPosFromAngle(angle, 0);\n    let x = pos[0];\n    let y = pos[1];\n    ctx.save();\n    ctx.translate(x + 40 * Math.sin(angle - Math.PI), y + 40 * Math.cos(angle - Math.PI));\n    ctx.rotate(-angle + Math.PI);\n    ctx.textAlign = 'center';\n    ctx.fillText(text, 0, 10);\n    ctx.restore();\n  }\n\n  getPosFromAngle(angle, offset) {\n    console.log(angle, offset);\n    return [this.canvas.width / 2 + Math.sin(angle) * this.radius - offset * Math.sin(angle), this.canvas.height + this.arcCenterOffsetY + Math.cos(angle) * this.radius - offset * Math.cos(angle)];\n  }\n\n  drawCompassLine(angle, length) {\n    let end = this.getPosFromAngle(angle, 0);\n    let start = this.getPosFromAngle(angle, length);\n    this.ctx.moveTo(start[0], start[1]);\n    this.ctx.lineTo(end[0], end[1]);\n  }\n\n}\n\nexport default DrawHelper;","map":{"version":3,"sources":["/home/kaappo/testit/canvas/src/components/helpers.js"],"names":["DrawHelper","constructor","canvas","ctx","arcCenterOffsetY","drawAngleText","angle","text","pos","getPosFromAngle","x","y","save","translate","Math","sin","PI","cos","rotate","textAlign","fillText","restore","offset","console","log","width","radius","height","drawCompassLine","length","end","start","moveTo","lineTo"],"mappings":"AAAA,MAAMA,UAAN,CAAiB;AACbC,EAAAA,WAAW,CAAEC,MAAF,EAAUC,GAAV,EAAeC,gBAAf,EAAiC;AACxC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACH;;AAEDC,EAAAA,aAAa,CAAEF,GAAF,EAAOG,KAAP,EAAcC,IAAd,EAAoB;AAC7B,QAAIC,GAAG,GAAG,KAAKC,eAAL,CAAqBH,KAArB,EAA4B,CAA5B,CAAV;AACA,QAAII,CAAC,GAAGF,GAAG,CAAC,CAAD,CAAX;AACA,QAAIG,CAAC,GAAGH,GAAG,CAAC,CAAD,CAAX;AAEAL,IAAAA,GAAG,CAACS,IAAJ;AACAT,IAAAA,GAAG,CAACU,SAAJ,CAAcH,CAAC,GAAG,KAAKI,IAAI,CAACC,GAAL,CAAST,KAAK,GAAGQ,IAAI,CAACE,EAAtB,CAAvB,EAAkDL,CAAC,GAAG,KAAKG,IAAI,CAACG,GAAL,CAASX,KAAK,GAAGQ,IAAI,CAACE,EAAtB,CAA3D;AACAb,IAAAA,GAAG,CAACe,MAAJ,CAAW,CAACZ,KAAD,GAASQ,IAAI,CAACE,EAAzB;AAEAb,IAAAA,GAAG,CAACgB,SAAJ,GAAgB,QAAhB;AACAhB,IAAAA,GAAG,CAACiB,QAAJ,CAAab,IAAb,EAAmB,CAAnB,EAAsB,EAAtB;AAEAJ,IAAAA,GAAG,CAACkB,OAAJ;AAEH;;AAEDZ,EAAAA,eAAe,CAACH,KAAD,EAAQgB,MAAR,EAAgB;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAZ,EAAmBgB,MAAnB;AACA,WAAO,CAAC,KAAKpB,MAAL,CAAYuB,KAAZ,GAAoB,CAApB,GAAwBX,IAAI,CAACC,GAAL,CAAST,KAAT,IAAkB,KAAKoB,MAA/C,GAAwDJ,MAAM,GAAGR,IAAI,CAACC,GAAL,CAAST,KAAT,CAAlE,EAAmF,KAAKJ,MAAL,CAAYyB,MAAZ,GAAqB,KAAKvB,gBAA1B,GAA6CU,IAAI,CAACG,GAAL,CAASX,KAAT,IAAkB,KAAKoB,MAApE,GAA6EJ,MAAM,GAAGR,IAAI,CAACG,GAAL,CAASX,KAAT,CAAzK,CAAP;AACH;;AAEDsB,EAAAA,eAAe,CAACtB,KAAD,EAAQuB,MAAR,EAAgB;AAC3B,QAAIC,GAAG,GAAG,KAAKrB,eAAL,CAAqBH,KAArB,EAA4B,CAA5B,CAAV;AACA,QAAIyB,KAAK,GAAG,KAAKtB,eAAL,CAAqBH,KAArB,EAA4BuB,MAA5B,CAAZ;AAEA,SAAK1B,GAAL,CAAS6B,MAAT,CAAgBD,KAAK,CAAC,CAAD,CAArB,EAA0BA,KAAK,CAAC,CAAD,CAA/B;AACA,SAAK5B,GAAL,CAAS8B,MAAT,CAAgBH,GAAG,CAAC,CAAD,CAAnB,EAAwBA,GAAG,CAAC,CAAD,CAA3B;AACH;;AAlCY;;AAsCjB,eAAe9B,UAAf","sourcesContent":["class DrawHelper {\n    constructor (canvas, ctx, arcCenterOffsetY) {\n        this.canvas = canvas;\n        this.ctx = ctx;\n        this.arcCenterOffsetY = arcCenterOffsetY;\n    }\n    \n    drawAngleText (ctx, angle, text) {\n        let pos = this.getPosFromAngle(angle, 0)\n        let x = pos[0];\n        let y = pos[1];\n    \n        ctx.save();\n        ctx.translate(x + 40 * Math.sin(angle - Math.PI), y + 40 * Math.cos(angle - Math.PI));\n        ctx.rotate(-angle + Math.PI);\n    \n        ctx.textAlign = 'center';\n        ctx.fillText(text, 0, 10);\n    \n        ctx.restore();\n    \n    }\n    \n    getPosFromAngle(angle, offset) {\n        console.log(angle, offset)\n        return [this.canvas.width / 2 + Math.sin(angle) * this.radius - offset * Math.sin(angle), this.canvas.height + this.arcCenterOffsetY + Math.cos(angle) * this.radius - offset * Math.cos(angle)]\n    }\n\n    drawCompassLine(angle, length) {\n        let end = this.getPosFromAngle(angle, 0)\n        let start = this.getPosFromAngle(angle, length)\n\n        this.ctx.moveTo(start[0], start[1]);\n        this.ctx.lineTo(end[0], end[1]);\n    }\n}\n\n\nexport default DrawHelper"]},"metadata":{},"sourceType":"module"}