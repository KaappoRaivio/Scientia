{"ast":null,"code":"import { isFunctionAssignmentNode, isSymbolNode } from '../../utils/is';\nimport { maxArgumentCount } from '../../utils/function';\nimport { forEach } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nimport { compileInlineExpression } from './utils/compileInlineExpression';\nvar name = 'forEach';\nvar dependencies = ['typed'];\nexport var createForEachTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Attach a transform function to math.forEach\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n\n  function forEachTransform(args, math, scope) {\n    var x, callback;\n\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n\n    if (args[1]) {\n      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {\n        // a function pointer, like forEach([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )\n        callback = compileInlineExpression(args[1], math, scope);\n      }\n    }\n\n    return _forEach(x, callback);\n  }\n\n  forEachTransform.rawArgs = true; // one-based version of forEach\n\n  var _forEach = typed('forEach', {\n    'Array | Matrix, function': function ArrayMatrixFunction(array, callback) {\n      // figure out what number of arguments the callback function expects\n      var args = maxArgumentCount(callback);\n\n      var recurse = function recurse(value, index) {\n        if (Array.isArray(value)) {\n          forEach(value, function (child, i) {\n            // we create a copy of the index array and append the new index value\n            recurse(child, index.concat(i + 1)); // one based index, hence i+1\n          });\n        } else {\n          // invoke the callback function with the right number of arguments\n          if (args === 1) {\n            callback(value);\n          } else if (args === 2) {\n            callback(value, index);\n          } else {\n            // 3 or -1\n            callback(value, index, array);\n          }\n        }\n      };\n\n      recurse(array.valueOf(), []); // pass Array\n    }\n  });\n\n  return forEachTransform;\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/expression/transform/forEach.transform.js"],"names":["isFunctionAssignmentNode","isSymbolNode","maxArgumentCount","forEach","factory","compileInlineExpression","name","dependencies","createForEachTransform","_ref","typed","forEachTransform","args","math","scope","x","callback","compile","evaluate","_forEach","rawArgs","ArrayMatrixFunction","array","recurse","value","index","Array","isArray","child","i","concat","valueOf","isTransformFunction"],"mappings":"AAAA,SAASA,wBAAT,EAAmCC,YAAnC,QAAuD,gBAAvD;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,uBAAT,QAAwC,iCAAxC;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,sBAAsB,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAC7F,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAEA;;;;;;;AAMA,WAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,IAAhC,EAAsCC,KAAtC,EAA6C;AAC3C,QAAIC,CAAJ,EAAOC,QAAP;;AAEA,QAAIJ,IAAI,CAAC,CAAD,CAAR,EAAa;AACXG,MAAAA,CAAC,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQK,OAAR,GAAkBC,QAAlB,CAA2BJ,KAA3B,CAAJ;AACD;;AAED,QAAIF,IAAI,CAAC,CAAD,CAAR,EAAa;AACX,UAAIX,YAAY,CAACW,IAAI,CAAC,CAAD,CAAL,CAAZ,IAAyBZ,wBAAwB,CAACY,IAAI,CAAC,CAAD,CAAL,CAArD,EAAgE;AAC9D;AACAI,QAAAA,QAAQ,GAAGJ,IAAI,CAAC,CAAD,CAAJ,CAAQK,OAAR,GAAkBC,QAAlB,CAA2BJ,KAA3B,CAAX;AACD,OAHD,MAGO;AACL;AACAE,QAAAA,QAAQ,GAAGX,uBAAuB,CAACO,IAAI,CAAC,CAAD,CAAL,EAAUC,IAAV,EAAgBC,KAAhB,CAAlC;AACD;AACF;;AAED,WAAOK,QAAQ,CAACJ,CAAD,EAAIC,QAAJ,CAAf;AACD;;AAEDL,EAAAA,gBAAgB,CAACS,OAAjB,GAA2B,IAA3B,CA7B6F,CA6B5D;;AAEjC,MAAID,QAAQ,GAAGT,KAAK,CAAC,SAAD,EAAY;AAC9B,gCAA4B,SAASW,mBAAT,CAA6BC,KAA7B,EAAoCN,QAApC,EAA8C;AACxE;AACA,UAAIJ,IAAI,GAAGV,gBAAgB,CAACc,QAAD,CAA3B;;AAEA,UAAIO,OAAO,GAAG,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,KAAxB,EAA+B;AAC3C,YAAIC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACxBrB,UAAAA,OAAO,CAACqB,KAAD,EAAQ,UAAUI,KAAV,EAAiBC,CAAjB,EAAoB;AACjC;AACAN,YAAAA,OAAO,CAACK,KAAD,EAAQH,KAAK,CAACK,MAAN,CAAaD,CAAC,GAAG,CAAjB,CAAR,CAAP,CAFiC,CAEI;AACtC,WAHM,CAAP;AAID,SALD,MAKO;AACL;AACA,cAAIjB,IAAI,KAAK,CAAb,EAAgB;AACdI,YAAAA,QAAQ,CAACQ,KAAD,CAAR;AACD,WAFD,MAEO,IAAIZ,IAAI,KAAK,CAAb,EAAgB;AACrBI,YAAAA,QAAQ,CAACQ,KAAD,EAAQC,KAAR,CAAR;AACD,WAFM,MAEA;AACL;AACAT,YAAAA,QAAQ,CAACQ,KAAD,EAAQC,KAAR,EAAeH,KAAf,CAAR;AACD;AACF;AACF,OAjBD;;AAmBAC,MAAAA,OAAO,CAACD,KAAK,CAACS,OAAN,EAAD,EAAkB,EAAlB,CAAP,CAvBwE,CAuB1C;AAC/B;AAzB6B,GAAZ,CAApB;;AA4BA,SAAOpB,gBAAP;AACD,CA5DyD,EA4DvD;AACDqB,EAAAA,mBAAmB,EAAE;AADpB,CA5DuD,CAAnD","sourcesContent":["import { isFunctionAssignmentNode, isSymbolNode } from '../../utils/is';\nimport { maxArgumentCount } from '../../utils/function';\nimport { forEach } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nimport { compileInlineExpression } from './utils/compileInlineExpression';\nvar name = 'forEach';\nvar dependencies = ['typed'];\nexport var createForEachTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Attach a transform function to math.forEach\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  function forEachTransform(args, math, scope) {\n    var x, callback;\n\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n\n    if (args[1]) {\n      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {\n        // a function pointer, like forEach([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )\n        callback = compileInlineExpression(args[1], math, scope);\n      }\n    }\n\n    return _forEach(x, callback);\n  }\n\n  forEachTransform.rawArgs = true; // one-based version of forEach\n\n  var _forEach = typed('forEach', {\n    'Array | Matrix, function': function ArrayMatrixFunction(array, callback) {\n      // figure out what number of arguments the callback function expects\n      var args = maxArgumentCount(callback);\n\n      var recurse = function recurse(value, index) {\n        if (Array.isArray(value)) {\n          forEach(value, function (child, i) {\n            // we create a copy of the index array and append the new index value\n            recurse(child, index.concat(i + 1)); // one based index, hence i+1\n          });\n        } else {\n          // invoke the callback function with the right number of arguments\n          if (args === 1) {\n            callback(value);\n          } else if (args === 2) {\n            callback(value, index);\n          } else {\n            // 3 or -1\n            callback(value, index, array);\n          }\n        }\n      };\n\n      recurse(array.valueOf(), []); // pass Array\n    }\n  });\n\n  return forEachTransform;\n}, {\n  isTransformFunction: true\n});"]},"metadata":{},"sourceType":"module"}