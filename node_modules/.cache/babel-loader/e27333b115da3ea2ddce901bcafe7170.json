{"ast":null,"code":"import { deepMap } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nimport { isNegativeNumber } from '../../plain/number';\nvar name = 'isNegative';\nvar dependencies = ['typed'];\nexport var createIsNegative = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Test whether a value is negative: smaller than zero.\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNegative(x)\n   *\n   * Examples:\n   *\n   *    math.isNegative(3)                     // returns false\n   *    math.isNegative(-2)                    // returns true\n   *    math.isNegative(0)                     // returns false\n   *    math.isNegative(-0)                    // returns false\n   *    math.isNegative(math.bignumber(2))     // returns false\n   *    math.isNegative(math.fraction(-2, 5))  // returns true\n   *    math.isNegative('-2')                  // returns true\n   *    math.isNegative([2, 0, -3]')           // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isZero, isInteger\n   *\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n\n  var isNegative = typed(name, {\n    number: isNegativeNumber,\n    BigNumber: function BigNumber(x) {\n      return x.isNeg() && !x.isZero() && !x.isNaN();\n    },\n    Fraction: function Fraction(x) {\n      return x.s < 0; // It's enough to decide on the sign\n    },\n    Unit: function Unit(x) {\n      return isNegative(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, isNegative);\n    }\n  });\n  return isNegative;\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/utils/isNegative.js"],"names":["deepMap","factory","isNegativeNumber","name","dependencies","createIsNegative","_ref","typed","isNegative","number","BigNumber","x","isNeg","isZero","isNaN","Fraction","s","Unit","value","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,IAAIC,IAAI,GAAG,YAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,gBAAgB,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACvF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,MAAIC,UAAU,GAAGD,KAAK,CAACJ,IAAD,EAAO;AAC3BM,IAAAA,MAAM,EAAEP,gBADmB;AAE3BQ,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACC,KAAF,MAAa,CAACD,CAAC,CAACE,MAAF,EAAd,IAA4B,CAACF,CAAC,CAACG,KAAF,EAApC;AACD,KAJ0B;AAK3BC,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBJ,CAAlB,EAAqB;AAC7B,aAAOA,CAAC,CAACK,CAAF,GAAM,CAAb,CAD6B,CACb;AACjB,KAP0B;AAQ3BC,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAcN,CAAd,EAAiB;AACrB,aAAOH,UAAU,CAACG,CAAC,CAACO,KAAH,CAAjB;AACD,KAV0B;AAW3B,sBAAkB,SAASC,WAAT,CAAqBR,CAArB,EAAwB;AACxC,aAAOX,OAAO,CAACW,CAAD,EAAIH,UAAJ,CAAd;AACD;AAb0B,GAAP,CAAtB;AAeA,SAAOA,UAAP;AACD,CAhDmD,CAA7C","sourcesContent":["import { deepMap } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nimport { isNegativeNumber } from '../../plain/number';\nvar name = 'isNegative';\nvar dependencies = ['typed'];\nexport var createIsNegative = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Test whether a value is negative: smaller than zero.\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNegative(x)\n   *\n   * Examples:\n   *\n   *    math.isNegative(3)                     // returns false\n   *    math.isNegative(-2)                    // returns true\n   *    math.isNegative(0)                     // returns false\n   *    math.isNegative(-0)                    // returns false\n   *    math.isNegative(math.bignumber(2))     // returns false\n   *    math.isNegative(math.fraction(-2, 5))  // returns true\n   *    math.isNegative('-2')                  // returns true\n   *    math.isNegative([2, 0, -3]')           // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isZero, isInteger\n   *\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  var isNegative = typed(name, {\n    number: isNegativeNumber,\n    BigNumber: function BigNumber(x) {\n      return x.isNeg() && !x.isZero() && !x.isNaN();\n    },\n    Fraction: function Fraction(x) {\n      return x.s < 0; // It's enough to decide on the sign\n    },\n    Unit: function Unit(x) {\n      return isNegative(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, isNegative);\n    }\n  });\n  return isNegative;\n});"]},"metadata":{},"sourceType":"module"}