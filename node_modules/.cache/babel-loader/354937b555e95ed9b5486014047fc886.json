{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport { isBigNumber } from './is';\n/**\n * Clone an object\n *\n *     clone(x)\n *\n * Can clone any primitive type, array, and object.\n * If x has a function clone, this function will be invoked to clone the object.\n *\n * @param {*} x\n * @return {*} clone\n */\n\nexport function clone(x) {\n  var type = _typeof(x); // immutable primitive types\n\n\n  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {\n    return x;\n  } // use clone function of the object when available\n\n\n  if (typeof x.clone === 'function') {\n    return x.clone();\n  } // array\n\n\n  if (Array.isArray(x)) {\n    return x.map(function (value) {\n      return clone(value);\n    });\n  }\n\n  if (x instanceof Date) return new Date(x.valueOf());\n  if (isBigNumber(x)) return x; // bignumbers are immutable\n\n  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp\n  // object\n\n  return mapObject(x, clone);\n}\n/**\n * Apply map to all properties of an object\n * @param {Object} object\n * @param {function} callback\n * @return {Object} Returns a copy of the object with mapped properties\n */\n\nexport function mapObject(object, callback) {\n  var clone = {};\n\n  for (var key in object) {\n    if (hasOwnProperty(object, key)) {\n      clone[key] = callback(object[key]);\n    }\n  }\n\n  return clone;\n}\n/**\n * Extend object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n */\n\nexport function extend(a, b) {\n  for (var prop in b) {\n    if (hasOwnProperty(b, prop)) {\n      a[prop] = b[prop];\n    }\n  }\n\n  return a;\n}\n/**\n * Deep extend an object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @returns {Object}\n */\n\nexport function deepExtend(a, b) {\n  // TODO: add support for Arrays to deepExtend\n  if (Array.isArray(b)) {\n    throw new TypeError('Arrays are not supported by deepExtend');\n  }\n\n  for (var prop in b) {\n    if (hasOwnProperty(b, prop)) {\n      if (b[prop] && b[prop].constructor === Object) {\n        if (a[prop] === undefined) {\n          a[prop] = {};\n        }\n\n        if (a[prop] && a[prop].constructor === Object) {\n          deepExtend(a[prop], b[prop]);\n        } else {\n          a[prop] = b[prop];\n        }\n      } else if (Array.isArray(b[prop])) {\n        throw new TypeError('Arrays are not supported by deepExtend');\n      } else {\n        a[prop] = b[prop];\n      }\n    }\n  }\n\n  return a;\n}\n/**\n * Deep test equality of all fields in two pairs of arrays or objects.\n * Compares values and functions strictly (ie. 2 is not the same as '2').\n * @param {Array | Object} a\n * @param {Array | Object} b\n * @returns {boolean}\n */\n\nexport function deepStrictEqual(a, b) {\n  var prop, i, len;\n\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b)) {\n      return false;\n    }\n\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (i = 0, len = a.length; i < len; i++) {\n      if (!deepStrictEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else if (typeof a === 'function') {\n    return a === b;\n  } else if (a instanceof Object) {\n    if (Array.isArray(b) || !(b instanceof Object)) {\n      return false;\n    }\n\n    for (prop in a) {\n      // noinspection JSUnfilteredForInLoop\n      if (!(prop in b) || !deepStrictEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n\n    for (prop in b) {\n      // noinspection JSUnfilteredForInLoop\n      if (!(prop in a) || !deepStrictEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else {\n    return a === b;\n  }\n}\n/**\n * Recursively flatten a nested object.\n * @param {Object} nestedObject\n * @return {Object} Returns the flattened object\n */\n\nexport function deepFlatten(nestedObject) {\n  var flattenedObject = {};\n\n  _deepFlatten(nestedObject, flattenedObject);\n\n  return flattenedObject;\n} // helper function used by deepFlatten\n\nfunction _deepFlatten(nestedObject, flattenedObject) {\n  for (var prop in nestedObject) {\n    if (hasOwnProperty(nestedObject, prop)) {\n      var value = nestedObject[prop];\n\n      if (_typeof(value) === 'object' && value !== null) {\n        _deepFlatten(value, flattenedObject);\n      } else {\n        flattenedObject[prop] = value;\n      }\n    }\n  }\n}\n/**\n * Test whether the current JavaScript engine supports Object.defineProperty\n * @returns {boolean} returns true if supported\n */\n\n\nexport function canDefineProperty() {\n  // test needed for broken IE8 implementation\n  try {\n    if (Object.defineProperty) {\n      Object.defineProperty({}, 'x', {\n        get: function get() {}\n      });\n      return true;\n    }\n  } catch (e) {}\n\n  return false;\n}\n/**\n * Attach a lazy loading property to a constant.\n * The given function `fn` is called once when the property is first requested.\n *\n * @param {Object} object         Object where to add the property\n * @param {string} prop           Property name\n * @param {Function} valueResolver Function returning the property value. Called\n *                                without arguments.\n */\n\nexport function lazy(object, prop, valueResolver) {\n  var _uninitialized = true;\n\n  var _value;\n\n  Object.defineProperty(object, prop, {\n    get: function get() {\n      if (_uninitialized) {\n        _value = valueResolver();\n        _uninitialized = false;\n      }\n\n      return _value;\n    },\n    set: function set(value) {\n      _value = value;\n      _uninitialized = false;\n    },\n    configurable: true,\n    enumerable: true\n  });\n}\n/**\n * Traverse a path into an object.\n * When a namespace is missing, it will be created\n * @param {Object} object\n * @param {string | string[]} path   A dot separated string like 'name.space'\n * @return {Object} Returns the object at the end of the path\n */\n\nexport function traverse(object, path) {\n  if (path && typeof path === 'string') {\n    return traverse(object, path.split('.'));\n  }\n\n  var obj = object;\n\n  if (path) {\n    for (var i = 0; i < path.length; i++) {\n      var key = path[i];\n\n      if (!(key in obj)) {\n        obj[key] = {};\n      }\n\n      obj = obj[key];\n    }\n  }\n\n  return obj;\n}\n/**\n * A safe hasOwnProperty\n * @param {Object} object\n * @param {string} property\n */\n\nexport function hasOwnProperty(object, property) {\n  return object && Object.hasOwnProperty.call(object, property);\n}\n/**\n * Test whether an object is a factory. a factory has fields:\n *\n * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)\n * - name: string (optional)\n * - path: string    A dot separated path (optional)\n * - math: boolean   If true (false by default), the math namespace is passed\n *                   as fifth argument of the factory function\n *\n * @param {*} object\n * @returns {boolean}\n */\n\nexport function isLegacyFactory(object) {\n  return object && typeof object.factory === 'function';\n}\n/**\n * Get a nested property from an object\n * @param {Object} object\n * @param {string | string[]} path\n * @returns {Object}\n */\n\nexport function get(object, path) {\n  if (typeof path === 'string') {\n    if (isPath(path)) {\n      return get(object, path.split('.'));\n    } else {\n      return object[path];\n    }\n  }\n\n  var child = object;\n\n  for (var i = 0; i < path.length; i++) {\n    var key = path[i];\n    child = child ? child[key] : undefined;\n  }\n\n  return child;\n}\n/**\n * Set a nested property in an object\n * Mutates the object itself\n * If the path doesn't exist, it will be created\n * @param {Object} object\n * @param {string | string[]} path\n * @param {*} value\n * @returns {Object}\n */\n\nexport function set(object, path, value) {\n  if (typeof path === 'string') {\n    if (isPath(path)) {\n      return set(object, path.split('.'), value);\n    } else {\n      object[path] = value;\n      return object;\n    }\n  }\n\n  var child = object;\n\n  for (var i = 0; i < path.length - 1; i++) {\n    var key = path[i];\n\n    if (child[key] === undefined) {\n      child[key] = {};\n    }\n\n    child = child[key];\n  }\n\n  if (path.length > 0) {\n    var lastKey = path[path.length - 1];\n    child[lastKey] = value;\n  }\n\n  return object;\n}\n/**\n * Create an object composed of the picked object properties\n * @param {Object} object\n * @param {string[]} properties\n * @param {function} [transform] Optional value to transform a value when picking it\n * @return {Object}\n */\n\nexport function pick(object, properties, transform) {\n  var copy = {};\n\n  for (var i = 0; i < properties.length; i++) {\n    var key = properties[i];\n    var value = get(object, key);\n\n    if (value !== undefined) {\n      set(copy, key, transform ? transform(value, key) : value);\n    }\n  }\n\n  return copy;\n}\n/**\n * Shallow version of pick, creating an object composed of the picked object properties\n * but not for nested properties\n * @param {Object} object\n * @param {string[]} properties\n * @return {Object}\n */\n\nexport function pickShallow(object, properties) {\n  var copy = {};\n\n  for (var i = 0; i < properties.length; i++) {\n    var key = properties[i];\n    var value = object[key];\n\n    if (value !== undefined) {\n      copy[key] = value;\n    }\n  }\n\n  return copy;\n}\nexport function values(object) {\n  return Object.keys(object).map(function (key) {\n    return object[key];\n  });\n} // helper function to test whether a string contains a path like 'user.name'\n\nfunction isPath(str) {\n  return str.indexOf('.') !== -1;\n}","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/utils/object.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","isBigNumber","clone","x","type","undefined","Array","isArray","map","value","Date","valueOf","RegExp","TypeError","mapObject","object","callback","key","hasOwnProperty","extend","a","b","prop","deepExtend","Object","deepStrictEqual","i","len","length","deepFlatten","nestedObject","flattenedObject","_deepFlatten","canDefineProperty","defineProperty","get","e","lazy","valueResolver","_uninitialized","_value","set","configurable","enumerable","traverse","path","split","property","call","isLegacyFactory","factory","isPath","child","lastKey","pick","properties","transform","copy","pickShallow","values","keys","str","indexOf"],"mappings":"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","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { isBigNumber } from './is';\n/**\n * Clone an object\n *\n *     clone(x)\n *\n * Can clone any primitive type, array, and object.\n * If x has a function clone, this function will be invoked to clone the object.\n *\n * @param {*} x\n * @return {*} clone\n */\n\nexport function clone(x) {\n  var type = _typeof(x); // immutable primitive types\n\n\n  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {\n    return x;\n  } // use clone function of the object when available\n\n\n  if (typeof x.clone === 'function') {\n    return x.clone();\n  } // array\n\n\n  if (Array.isArray(x)) {\n    return x.map(function (value) {\n      return clone(value);\n    });\n  }\n\n  if (x instanceof Date) return new Date(x.valueOf());\n  if (isBigNumber(x)) return x; // bignumbers are immutable\n\n  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp\n  // object\n\n  return mapObject(x, clone);\n}\n/**\n * Apply map to all properties of an object\n * @param {Object} object\n * @param {function} callback\n * @return {Object} Returns a copy of the object with mapped properties\n */\n\nexport function mapObject(object, callback) {\n  var clone = {};\n\n  for (var key in object) {\n    if (hasOwnProperty(object, key)) {\n      clone[key] = callback(object[key]);\n    }\n  }\n\n  return clone;\n}\n/**\n * Extend object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n */\n\nexport function extend(a, b) {\n  for (var prop in b) {\n    if (hasOwnProperty(b, prop)) {\n      a[prop] = b[prop];\n    }\n  }\n\n  return a;\n}\n/**\n * Deep extend an object a with the properties of object b\n * @param {Object} a\n * @param {Object} b\n * @returns {Object}\n */\n\nexport function deepExtend(a, b) {\n  // TODO: add support for Arrays to deepExtend\n  if (Array.isArray(b)) {\n    throw new TypeError('Arrays are not supported by deepExtend');\n  }\n\n  for (var prop in b) {\n    if (hasOwnProperty(b, prop)) {\n      if (b[prop] && b[prop].constructor === Object) {\n        if (a[prop] === undefined) {\n          a[prop] = {};\n        }\n\n        if (a[prop] && a[prop].constructor === Object) {\n          deepExtend(a[prop], b[prop]);\n        } else {\n          a[prop] = b[prop];\n        }\n      } else if (Array.isArray(b[prop])) {\n        throw new TypeError('Arrays are not supported by deepExtend');\n      } else {\n        a[prop] = b[prop];\n      }\n    }\n  }\n\n  return a;\n}\n/**\n * Deep test equality of all fields in two pairs of arrays or objects.\n * Compares values and functions strictly (ie. 2 is not the same as '2').\n * @param {Array | Object} a\n * @param {Array | Object} b\n * @returns {boolean}\n */\n\nexport function deepStrictEqual(a, b) {\n  var prop, i, len;\n\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b)) {\n      return false;\n    }\n\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (i = 0, len = a.length; i < len; i++) {\n      if (!deepStrictEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else if (typeof a === 'function') {\n    return a === b;\n  } else if (a instanceof Object) {\n    if (Array.isArray(b) || !(b instanceof Object)) {\n      return false;\n    }\n\n    for (prop in a) {\n      // noinspection JSUnfilteredForInLoop\n      if (!(prop in b) || !deepStrictEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n\n    for (prop in b) {\n      // noinspection JSUnfilteredForInLoop\n      if (!(prop in a) || !deepStrictEqual(a[prop], b[prop])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else {\n    return a === b;\n  }\n}\n/**\n * Recursively flatten a nested object.\n * @param {Object} nestedObject\n * @return {Object} Returns the flattened object\n */\n\nexport function deepFlatten(nestedObject) {\n  var flattenedObject = {};\n\n  _deepFlatten(nestedObject, flattenedObject);\n\n  return flattenedObject;\n} // helper function used by deepFlatten\n\nfunction _deepFlatten(nestedObject, flattenedObject) {\n  for (var prop in nestedObject) {\n    if (hasOwnProperty(nestedObject, prop)) {\n      var value = nestedObject[prop];\n\n      if (_typeof(value) === 'object' && value !== null) {\n        _deepFlatten(value, flattenedObject);\n      } else {\n        flattenedObject[prop] = value;\n      }\n    }\n  }\n}\n/**\n * Test whether the current JavaScript engine supports Object.defineProperty\n * @returns {boolean} returns true if supported\n */\n\n\nexport function canDefineProperty() {\n  // test needed for broken IE8 implementation\n  try {\n    if (Object.defineProperty) {\n      Object.defineProperty({}, 'x', {\n        get: function get() {}\n      });\n      return true;\n    }\n  } catch (e) {}\n\n  return false;\n}\n/**\n * Attach a lazy loading property to a constant.\n * The given function `fn` is called once when the property is first requested.\n *\n * @param {Object} object         Object where to add the property\n * @param {string} prop           Property name\n * @param {Function} valueResolver Function returning the property value. Called\n *                                without arguments.\n */\n\nexport function lazy(object, prop, valueResolver) {\n  var _uninitialized = true;\n\n  var _value;\n\n  Object.defineProperty(object, prop, {\n    get: function get() {\n      if (_uninitialized) {\n        _value = valueResolver();\n        _uninitialized = false;\n      }\n\n      return _value;\n    },\n    set: function set(value) {\n      _value = value;\n      _uninitialized = false;\n    },\n    configurable: true,\n    enumerable: true\n  });\n}\n/**\n * Traverse a path into an object.\n * When a namespace is missing, it will be created\n * @param {Object} object\n * @param {string | string[]} path   A dot separated string like 'name.space'\n * @return {Object} Returns the object at the end of the path\n */\n\nexport function traverse(object, path) {\n  if (path && typeof path === 'string') {\n    return traverse(object, path.split('.'));\n  }\n\n  var obj = object;\n\n  if (path) {\n    for (var i = 0; i < path.length; i++) {\n      var key = path[i];\n\n      if (!(key in obj)) {\n        obj[key] = {};\n      }\n\n      obj = obj[key];\n    }\n  }\n\n  return obj;\n}\n/**\n * A safe hasOwnProperty\n * @param {Object} object\n * @param {string} property\n */\n\nexport function hasOwnProperty(object, property) {\n  return object && Object.hasOwnProperty.call(object, property);\n}\n/**\n * Test whether an object is a factory. a factory has fields:\n *\n * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)\n * - name: string (optional)\n * - path: string    A dot separated path (optional)\n * - math: boolean   If true (false by default), the math namespace is passed\n *                   as fifth argument of the factory function\n *\n * @param {*} object\n * @returns {boolean}\n */\n\nexport function isLegacyFactory(object) {\n  return object && typeof object.factory === 'function';\n}\n/**\n * Get a nested property from an object\n * @param {Object} object\n * @param {string | string[]} path\n * @returns {Object}\n */\n\nexport function get(object, path) {\n  if (typeof path === 'string') {\n    if (isPath(path)) {\n      return get(object, path.split('.'));\n    } else {\n      return object[path];\n    }\n  }\n\n  var child = object;\n\n  for (var i = 0; i < path.length; i++) {\n    var key = path[i];\n    child = child ? child[key] : undefined;\n  }\n\n  return child;\n}\n/**\n * Set a nested property in an object\n * Mutates the object itself\n * If the path doesn't exist, it will be created\n * @param {Object} object\n * @param {string | string[]} path\n * @param {*} value\n * @returns {Object}\n */\n\nexport function set(object, path, value) {\n  if (typeof path === 'string') {\n    if (isPath(path)) {\n      return set(object, path.split('.'), value);\n    } else {\n      object[path] = value;\n      return object;\n    }\n  }\n\n  var child = object;\n\n  for (var i = 0; i < path.length - 1; i++) {\n    var key = path[i];\n\n    if (child[key] === undefined) {\n      child[key] = {};\n    }\n\n    child = child[key];\n  }\n\n  if (path.length > 0) {\n    var lastKey = path[path.length - 1];\n    child[lastKey] = value;\n  }\n\n  return object;\n}\n/**\n * Create an object composed of the picked object properties\n * @param {Object} object\n * @param {string[]} properties\n * @param {function} [transform] Optional value to transform a value when picking it\n * @return {Object}\n */\n\nexport function pick(object, properties, transform) {\n  var copy = {};\n\n  for (var i = 0; i < properties.length; i++) {\n    var key = properties[i];\n    var value = get(object, key);\n\n    if (value !== undefined) {\n      set(copy, key, transform ? transform(value, key) : value);\n    }\n  }\n\n  return copy;\n}\n/**\n * Shallow version of pick, creating an object composed of the picked object properties\n * but not for nested properties\n * @param {Object} object\n * @param {string[]} properties\n * @return {Object}\n */\n\nexport function pickShallow(object, properties) {\n  var copy = {};\n\n  for (var i = 0; i < properties.length; i++) {\n    var key = properties[i];\n    var value = object[key];\n\n    if (value !== undefined) {\n      copy[key] = value;\n    }\n  }\n\n  return copy;\n}\nexport function values(object) {\n  return Object.keys(object).map(function (key) {\n    return object[key];\n  });\n} // helper function to test whether a string contains a path like 'user.name'\n\nfunction isPath(str) {\n  return str.indexOf('.') !== -1;\n}"]},"metadata":{},"sourceType":"module"}