{"ast":null,"code":"import { deepMap } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nvar name = 'factorial';\nvar dependencies = ['typed', 'gamma'];\nexport var createFactorial = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      gamma = _ref.gamma;\n  /**\n   * Compute the factorial of a value\n   *\n   * Factorial only supports an integer value as argument.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.factorial(n)\n   *\n   * Examples:\n   *\n   *    math.factorial(5)    // returns 120\n   *    math.factorial(3)    // returns 6\n   *\n   * See also:\n   *\n   *    combinations, combinationsWithRep, gamma, permutations\n   *\n   * @param {number | BigNumber | Array | Matrix} n   An integer number\n   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`\n   */\n\n  var factorial = typed(name, {\n    number: function number(n) {\n      if (n < 0) {\n        throw new Error('Value must be non-negative');\n      }\n\n      return gamma(n + 1);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.isNegative()) {\n        throw new Error('Value must be non-negative');\n      }\n\n      return gamma(n.plus(1));\n    },\n    'Array | Matrix': function ArrayMatrix(n) {\n      return deepMap(n, factorial);\n    }\n  });\n  return factorial;\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/probability/factorial.js"],"names":["deepMap","factory","name","dependencies","createFactorial","_ref","typed","gamma","factorial","number","n","Error","BigNumber","isNegative","plus","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,OAAV,CAAnB;AACA,OAAO,IAAIC,eAAe,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACtF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,KAAK,GAAGF,IAAI,CAACE,KADjB;AAGA;;;;;;;;;;;;;;;;;;;;;;;AAsBA,MAAIC,SAAS,GAAGF,KAAK,CAACJ,IAAD,EAAO;AAC1BO,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB,UAAIA,CAAC,GAAG,CAAR,EAAW;AACT,cAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACD;;AAED,aAAOJ,KAAK,CAACG,CAAC,GAAG,CAAL,CAAZ;AACD,KAPyB;AAQ1BE,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBF,CAAnB,EAAsB;AAC/B,UAAIA,CAAC,CAACG,UAAF,EAAJ,EAAoB;AAClB,cAAM,IAAIF,KAAJ,CAAU,4BAAV,CAAN;AACD;;AAED,aAAOJ,KAAK,CAACG,CAAC,CAACI,IAAF,CAAO,CAAP,CAAD,CAAZ;AACD,KAdyB;AAe1B,sBAAkB,SAASC,WAAT,CAAqBL,CAArB,EAAwB;AACxC,aAAOV,OAAO,CAACU,CAAD,EAAIF,SAAJ,CAAd;AACD;AAjByB,GAAP,CAArB;AAmBA,SAAOA,SAAP;AACD,CA9CkD,CAA5C","sourcesContent":["import { deepMap } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nvar name = 'factorial';\nvar dependencies = ['typed', 'gamma'];\nexport var createFactorial = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      gamma = _ref.gamma;\n\n  /**\n   * Compute the factorial of a value\n   *\n   * Factorial only supports an integer value as argument.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.factorial(n)\n   *\n   * Examples:\n   *\n   *    math.factorial(5)    // returns 120\n   *    math.factorial(3)    // returns 6\n   *\n   * See also:\n   *\n   *    combinations, combinationsWithRep, gamma, permutations\n   *\n   * @param {number | BigNumber | Array | Matrix} n   An integer number\n   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`\n   */\n  var factorial = typed(name, {\n    number: function number(n) {\n      if (n < 0) {\n        throw new Error('Value must be non-negative');\n      }\n\n      return gamma(n + 1);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.isNegative()) {\n        throw new Error('Value must be non-negative');\n      }\n\n      return gamma(n.plus(1));\n    },\n    'Array | Matrix': function ArrayMatrix(n) {\n      return deepMap(n, factorial);\n    }\n  });\n  return factorial;\n});"]},"metadata":{},"sourceType":"module"}