{"ast":null,"code":"import { isArray, isDenseMatrix, isMatrix } from '../../../../utils/is';\nimport { arraySize } from '../../../../utils/array';\nimport { format } from '../../../../utils/string';\nexport function createSolveValidation(_ref) {\n  var DenseMatrix = _ref.DenseMatrix;\n  /**\n   * Validates matrix and column vector b for backward/forward substitution algorithms.\n   *\n   * @param {Matrix} m            An N x N matrix\n   * @param {Array | Matrix} b    A column vector\n   * @param {Boolean} copy        Return a copy of vector b\n   *\n   * @return {DenseMatrix}        Dense column vector b\n   */\n\n  return function solveValidation(m, b, copy) {\n    // matrix size\n    var size = m.size(); // validate matrix dimensions\n\n    if (size.length !== 2) {\n      throw new RangeError('Matrix must be two dimensional (size: ' + format(size) + ')');\n    } // rows & columns\n\n\n    var rows = size[0];\n    var columns = size[1]; // validate rows & columns\n\n    if (rows !== columns) {\n      throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n    } // vars\n\n\n    var data, i, bdata; // check b is matrix\n\n    if (isMatrix(b)) {\n      // matrix size\n      var msize = b.size(); // vector\n\n      if (msize.length === 1) {\n        // check vector length\n        if (msize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        } // create data array\n\n\n        data = []; // matrix data (DenseMatrix)\n\n        bdata = b._data; // loop b data\n\n        for (i = 0; i < rows; i++) {\n          // row array\n          data[i] = [bdata[i]];\n        } // return Dense Matrix\n\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1],\n          datatype: b._datatype\n        });\n      } // two dimensions\n\n\n      if (msize.length === 2) {\n        // array must be a column vector\n        if (msize[0] !== rows || msize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        } // check matrix type\n\n\n        if (isDenseMatrix(b)) {\n          // check a copy is needed\n          if (copy) {\n            // create data array\n            data = []; // matrix data (DenseMatrix)\n\n            bdata = b._data; // loop b data\n\n            for (i = 0; i < rows; i++) {\n              // row array\n              data[i] = [bdata[i][0]];\n            } // return Dense Matrix\n\n\n            return new DenseMatrix({\n              data: data,\n              size: [rows, 1],\n              datatype: b._datatype\n            });\n          } // b is already a column vector\n\n\n          return b;\n        } // create data array\n\n\n        data = [];\n\n        for (i = 0; i < rows; i++) {\n          data[i] = [0];\n        } // sparse matrix arrays\n\n\n        var values = b._values;\n        var index = b._index;\n        var ptr = b._ptr; // loop values in column 0\n\n        for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {\n          // row\n          i = index[k]; // add to data\n\n          data[i][0] = values[k];\n        } // return Dense Matrix\n\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1],\n          datatype: b._datatype\n        });\n      } // throw error\n\n\n      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n    } // check b is array\n\n\n    if (isArray(b)) {\n      // size\n      var asize = arraySize(b); // check matrix dimensions, vector\n\n      if (asize.length === 1) {\n        // check vector length\n        if (asize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        } // create data array\n\n\n        data = []; // loop b\n\n        for (i = 0; i < rows; i++) {\n          // row array\n          data[i] = [b[i]];\n        } // return Dense Matrix\n\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      }\n\n      if (asize.length === 2) {\n        // array must be a column vector\n        if (asize[0] !== rows || asize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        } // create data array\n\n\n        data = []; // loop b data\n\n        for (i = 0; i < rows; i++) {\n          // row array\n          data[i] = [b[i][0]];\n        } // return Dense Matrix\n\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      } // throw error\n\n\n      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n    }\n  };\n}","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/algebra/solver/utils/solveValidation.js"],"names":["isArray","isDenseMatrix","isMatrix","arraySize","format","createSolveValidation","_ref","DenseMatrix","solveValidation","m","b","copy","size","length","RangeError","rows","columns","data","i","bdata","msize","_data","datatype","_datatype","values","_values","index","_index","ptr","_ptr","k1","k","asize"],"mappings":"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","sourcesContent":["import { isArray, isDenseMatrix, isMatrix } from '../../../../utils/is';\nimport { arraySize } from '../../../../utils/array';\nimport { format } from '../../../../utils/string';\nexport function createSolveValidation(_ref) {\n  var DenseMatrix = _ref.DenseMatrix;\n\n  /**\n   * Validates matrix and column vector b for backward/forward substitution algorithms.\n   *\n   * @param {Matrix} m            An N x N matrix\n   * @param {Array | Matrix} b    A column vector\n   * @param {Boolean} copy        Return a copy of vector b\n   *\n   * @return {DenseMatrix}        Dense column vector b\n   */\n  return function solveValidation(m, b, copy) {\n    // matrix size\n    var size = m.size(); // validate matrix dimensions\n\n    if (size.length !== 2) {\n      throw new RangeError('Matrix must be two dimensional (size: ' + format(size) + ')');\n    } // rows & columns\n\n\n    var rows = size[0];\n    var columns = size[1]; // validate rows & columns\n\n    if (rows !== columns) {\n      throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n    } // vars\n\n\n    var data, i, bdata; // check b is matrix\n\n    if (isMatrix(b)) {\n      // matrix size\n      var msize = b.size(); // vector\n\n      if (msize.length === 1) {\n        // check vector length\n        if (msize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        } // create data array\n\n\n        data = []; // matrix data (DenseMatrix)\n\n        bdata = b._data; // loop b data\n\n        for (i = 0; i < rows; i++) {\n          // row array\n          data[i] = [bdata[i]];\n        } // return Dense Matrix\n\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1],\n          datatype: b._datatype\n        });\n      } // two dimensions\n\n\n      if (msize.length === 2) {\n        // array must be a column vector\n        if (msize[0] !== rows || msize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        } // check matrix type\n\n\n        if (isDenseMatrix(b)) {\n          // check a copy is needed\n          if (copy) {\n            // create data array\n            data = []; // matrix data (DenseMatrix)\n\n            bdata = b._data; // loop b data\n\n            for (i = 0; i < rows; i++) {\n              // row array\n              data[i] = [bdata[i][0]];\n            } // return Dense Matrix\n\n\n            return new DenseMatrix({\n              data: data,\n              size: [rows, 1],\n              datatype: b._datatype\n            });\n          } // b is already a column vector\n\n\n          return b;\n        } // create data array\n\n\n        data = [];\n\n        for (i = 0; i < rows; i++) {\n          data[i] = [0];\n        } // sparse matrix arrays\n\n\n        var values = b._values;\n        var index = b._index;\n        var ptr = b._ptr; // loop values in column 0\n\n        for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {\n          // row\n          i = index[k]; // add to data\n\n          data[i][0] = values[k];\n        } // return Dense Matrix\n\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1],\n          datatype: b._datatype\n        });\n      } // throw error\n\n\n      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n    } // check b is array\n\n\n    if (isArray(b)) {\n      // size\n      var asize = arraySize(b); // check matrix dimensions, vector\n\n      if (asize.length === 1) {\n        // check vector length\n        if (asize[0] !== rows) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        } // create data array\n\n\n        data = []; // loop b\n\n        for (i = 0; i < rows; i++) {\n          // row array\n          data[i] = [b[i]];\n        } // return Dense Matrix\n\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      }\n\n      if (asize.length === 2) {\n        // array must be a column vector\n        if (asize[0] !== rows || asize[1] !== 1) {\n          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n        } // create data array\n\n\n        data = []; // loop b data\n\n        for (i = 0; i < rows; i++) {\n          // row array\n          data[i] = [b[i][0]];\n        } // return Dense Matrix\n\n\n        return new DenseMatrix({\n          data: data,\n          size: [rows, 1]\n        });\n      } // throw error\n\n\n      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}