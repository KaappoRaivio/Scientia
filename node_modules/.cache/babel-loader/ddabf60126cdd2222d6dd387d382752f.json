{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { DimensionError } from '../../error/DimensionError';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm05 } from '../../type/matrix/utils/algorithm05';\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nvar name = 'subtract';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];\nexport var createSubtract = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      addScalar = _ref.addScalar,\n      unaryMinus = _ref.unaryMinus,\n      DenseMatrix = _ref.DenseMatrix; // TODO: split function subtract in two: subtract and subtractScalar\n\n  var algorithm01 = createAlgorithm01({\n    typed: typed\n  });\n  var algorithm03 = createAlgorithm03({\n    typed: typed\n  });\n  var algorithm05 = createAlgorithm05({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm10 = createAlgorithm10({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n\n  var subtract = typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x - y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.sub(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.minus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.sub(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n\n      if (y.value === null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n\n      var res = x.clone();\n      res.value = subtract(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm05(x, y, subtract);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm03(y, x, subtract, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm01(x, y, subtract, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm13(x, y, subtract);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return subtract(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return subtract(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return subtract(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm10(x, unaryMinus(y), addScalar);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, subtract);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm10(y, x, subtract, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, subtract, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, subtract, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, subtract, true).valueOf();\n    }\n  });\n  return subtract;\n});\n/**\n * Check whether matrix x and y have the same number of dimensions.\n * Throws a DimensionError when dimensions are not equal\n * @param {Matrix} x\n * @param {Matrix} y\n */\n\nfunction checkEqualDimensions(x, y) {\n  var xsize = x.size();\n  var ysize = y.size();\n\n  if (xsize.length !== ysize.length) {\n    throw new DimensionError(xsize.length, ysize.length);\n  }\n}","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/arithmetic/subtract.js"],"names":["factory","DimensionError","createAlgorithm01","createAlgorithm03","createAlgorithm05","createAlgorithm10","createAlgorithm13","createAlgorithm14","name","dependencies","createSubtract","_ref","typed","matrix","equalScalar","addScalar","unaryMinus","DenseMatrix","algorithm01","algorithm03","algorithm05","algorithm10","algorithm13","algorithm14","subtract","numberNumber","x","y","ComplexComplex","sub","BigNumberBigNumber","minus","FractionFraction","UnitUnit","value","Error","equalBase","res","clone","fixPrefix","SparseMatrixSparseMatrix","checkEqualDimensions","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixAny","DenseMatrixAny","anySparseMatrix","anyDenseMatrix","ArrayAny","anyArray","xsize","size","ysize","length"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory';\nimport { DimensionError } from '../../error/DimensionError';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm05 } from '../../type/matrix/utils/algorithm05';\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nvar name = 'subtract';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];\nexport var createSubtract = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      addScalar = _ref.addScalar,\n      unaryMinus = _ref.unaryMinus,\n      DenseMatrix = _ref.DenseMatrix;\n  // TODO: split function subtract in two: subtract and subtractScalar\n  var algorithm01 = createAlgorithm01({\n    typed: typed\n  });\n  var algorithm03 = createAlgorithm03({\n    typed: typed\n  });\n  var algorithm05 = createAlgorithm05({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm10 = createAlgorithm10({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n\n  var subtract = typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x - y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.sub(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.minus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.sub(y);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (x.value === null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n\n      if (y.value === null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n\n      var res = x.clone();\n      res.value = subtract(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm05(x, y, subtract);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm03(y, x, subtract, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm01(x, y, subtract, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm13(x, y, subtract);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return subtract(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return subtract(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return subtract(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm10(x, unaryMinus(y), addScalar);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, subtract);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm10(y, x, subtract, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, subtract, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, subtract, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, subtract, true).valueOf();\n    }\n  });\n  return subtract;\n});\n/**\n * Check whether matrix x and y have the same number of dimensions.\n * Throws a DimensionError when dimensions are not equal\n * @param {Matrix} x\n * @param {Matrix} y\n */\n\nfunction checkEqualDimensions(x, y) {\n  var xsize = x.size();\n  var ysize = y.size();\n\n  if (xsize.length !== ysize.length) {\n    throw new DimensionError(xsize.length, ysize.length);\n  }\n}"]},"metadata":{},"sourceType":"module"}