{"ast":null,"code":"import { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01';\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10';\nimport { createAlgorithm08 } from '../../type/matrix/utils/algorithm08';\nimport { factory } from '../../utils/factory';\nimport { rightLogShiftNumber } from '../../plain/number';\nvar name = 'rightLogShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createRightLogShift = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      zeros = _ref.zeros,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm01 = createAlgorithm01({\n    typed: typed\n  });\n  var algorithm02 = createAlgorithm02({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm08 = createAlgorithm08({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm10 = createAlgorithm10({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightLogShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightLogShift(4, 2)               // returns number 1\n   *\n   *    math.rightLogShift([16, -32, 64], 4)   // returns Array [1, 2, 3]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift\n   *\n   * @param  {number | Array | Matrix} x Value to be shifted\n   * @param  {number} y Amount of shifts\n   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times\n   */\n\n  var rightLogShift = typed(name, {\n    'number, number': rightLogShiftNumber,\n    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm08(x, y, rightLogShift, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, rightLogShift, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm01(x, y, rightLogShift, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, rightLogShift);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return rightLogShift(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return rightLogShift(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return rightLogShift(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return algorithm11(x, y, rightLogShift, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return algorithm14(x, y, rightLogShift, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm10(y, x, rightLogShift, true);\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm14(y, x, rightLogShift, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return rightLogShift(matrix(x), y).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return rightLogShift(x, matrix(y)).valueOf();\n    }\n  });\n  return rightLogShift;\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/bitwise/rightLogShift.js"],"names":["createAlgorithm02","createAlgorithm11","createAlgorithm13","createAlgorithm14","createAlgorithm01","createAlgorithm10","createAlgorithm08","factory","rightLogShiftNumber","name","dependencies","createRightLogShift","_ref","typed","matrix","equalScalar","zeros","DenseMatrix","algorithm01","algorithm02","algorithm08","algorithm10","algorithm11","algorithm13","algorithm14","rightLogShift","SparseMatrixSparseMatrix","x","y","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixNumberBigNumber","clone","DenseMatrixNumberBigNumber","numberBigNumberSparseMatrix","size","storage","numberBigNumberDenseMatrix","ArrayNumberBigNumber","numberBigNumberArray"],"mappings":"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","sourcesContent":["import { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01';\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10';\nimport { createAlgorithm08 } from '../../type/matrix/utils/algorithm08';\nimport { factory } from '../../utils/factory';\nimport { rightLogShiftNumber } from '../../plain/number';\nvar name = 'rightLogShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createRightLogShift = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      zeros = _ref.zeros,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm01 = createAlgorithm01({\n    typed: typed\n  });\n  var algorithm02 = createAlgorithm02({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm08 = createAlgorithm08({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm10 = createAlgorithm10({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightLogShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightLogShift(4, 2)               // returns number 1\n   *\n   *    math.rightLogShift([16, -32, 64], 4)   // returns Array [1, 2, 3]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift\n   *\n   * @param  {number | Array | Matrix} x Value to be shifted\n   * @param  {number} y Amount of shifts\n   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times\n   */\n\n  var rightLogShift = typed(name, {\n    'number, number': rightLogShiftNumber,\n    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm08(x, y, rightLogShift, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, rightLogShift, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm01(x, y, rightLogShift, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, rightLogShift);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return rightLogShift(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return rightLogShift(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return rightLogShift(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return algorithm11(x, y, rightLogShift, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return algorithm14(x, y, rightLogShift, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm10(y, x, rightLogShift, true);\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm14(y, x, rightLogShift, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return rightLogShift(matrix(x), y).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return rightLogShift(x, matrix(y)).valueOf();\n    }\n  });\n  return rightLogShift;\n});"]},"metadata":{},"sourceType":"module"}