{"ast":null,"code":"import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual';\nimport { nearlyEqual } from '../../utils/number';\nimport { factory } from '../../utils/factory';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm07 } from '../../type/matrix/utils/algorithm07';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nvar name = 'smaller';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];\nexport var createSmaller = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      matrix = _ref.matrix,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm03 = createAlgorithm03({\n    typed: typed\n  });\n  var algorithm07 = createAlgorithm07({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm12 = createAlgorithm12({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Test whether value x is smaller than y.\n   *\n   * The function returns true when x is smaller than y and the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smaller(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(2, 3)            // returns true\n   *    math.smaller(5, 2 * 2)        // returns false\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.smaller(a, b)            // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n\n  var smaller = typed(name, {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x < y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return x < y && !nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.compare(y) === -1;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return smaller(x.value, y.value);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, smaller);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, smaller, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, smaller, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, smaller);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return smaller(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return smaller(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return smaller(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, smaller, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, smaller, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, smaller, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, smaller, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, smaller, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, smaller, true).valueOf();\n    }\n  });\n  return smaller;\n});\nexport var createSmallerNumber = /* #__PURE__ */factory(name, ['typed', 'config'], function (_ref2) {\n  var typed = _ref2.typed,\n      config = _ref2.config;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x < y && !nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/relational/smaller.js"],"names":["nearlyEqual","bigNearlyEqual","factory","createAlgorithm03","createAlgorithm07","createAlgorithm12","createAlgorithm14","createAlgorithm13","name","dependencies","createSmaller","_ref","typed","config","matrix","DenseMatrix","algorithm03","algorithm07","algorithm12","algorithm13","algorithm14","smaller","booleanBoolean","x","y","numberNumber","epsilon","BigNumberBigNumber","lt","FractionFraction","compare","ComplexComplex","TypeError","UnitUnit","equalBase","Error","value","SparseMatrixSparseMatrix","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixAny","DenseMatrixAny","anySparseMatrix","anyDenseMatrix","ArrayAny","anyArray","createSmallerNumber","_ref2"],"mappings":"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","sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual';\nimport { nearlyEqual } from '../../utils/number';\nimport { factory } from '../../utils/factory';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm07 } from '../../type/matrix/utils/algorithm07';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nvar name = 'smaller';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];\nexport var createSmaller = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      matrix = _ref.matrix,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm03 = createAlgorithm03({\n    typed: typed\n  });\n  var algorithm07 = createAlgorithm07({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm12 = createAlgorithm12({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Test whether value x is smaller than y.\n   *\n   * The function returns true when x is smaller than y and the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smaller(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(2, 3)            // returns true\n   *    math.smaller(5, 2 * 2)        // returns false\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.smaller(a, b)            // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n\n  var smaller = typed(name, {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x < y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return x < y && !nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.compare(y) === -1;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return smaller(x.value, y.value);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm07(x, y, smaller);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, smaller, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, smaller, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, smaller);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return smaller(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return smaller(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return smaller(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, smaller, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, smaller, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, smaller, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, smaller, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, smaller, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, smaller, true).valueOf();\n    }\n  });\n  return smaller;\n});\nexport var createSmallerNumber = /* #__PURE__ */factory(name, ['typed', 'config'], function (_ref2) {\n  var typed = _ref2.typed,\n      config = _ref2.config;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x < y && !nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}