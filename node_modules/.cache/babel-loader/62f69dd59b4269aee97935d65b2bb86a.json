{"ast":null,"code":"import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory';\nvar name = 'BigNumber';\nvar dependencies = ['?on', 'config'];\nexport var createBigNumberClass = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var on = _ref.on,\n      config = _ref.config;\n  var BigNumber = Decimal.clone({\n    precision: config.precision\n  });\n  /**\n   * Attach type information\n   */\n\n  BigNumber.prototype.type = 'BigNumber';\n  BigNumber.prototype.isBigNumber = true;\n  /**\n   * Get a JSON representation of a BigNumber containing\n   * type information\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   */\n\n  BigNumber.prototype.toJSON = function () {\n    return {\n      mathjs: 'BigNumber',\n      value: this.toString()\n    };\n  };\n  /**\n   * Instantiate a BigNumber from a JSON object\n   * @param {Object} json  a JSON object structured as:\n   *                       `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   * @return {BigNumber}\n   */\n\n\n  BigNumber.fromJSON = function (json) {\n    return new BigNumber(json.value);\n  };\n\n  if (on) {\n    // listen for changed in the configuration, automatically apply changed precision\n    on('config', function (curr, prev) {\n      if (curr.precision !== prev.precision) {\n        BigNumber.config({\n          precision: curr.precision\n        });\n      }\n    });\n  }\n\n  return BigNumber;\n}, {\n  isClass: true\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/type/bignumber/BigNumber.js"],"names":["Decimal","factory","name","dependencies","createBigNumberClass","_ref","on","config","BigNumber","clone","precision","prototype","type","isBigNumber","toJSON","mathjs","value","toString","fromJSON","json","curr","prev","isClass"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,YAApB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,YAAY,GAAG,CAAC,KAAD,EAAQ,QAAR,CAAnB;AACA,OAAO,IAAIC,oBAAoB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAC3F,MAAIC,EAAE,GAAGD,IAAI,CAACC,EAAd;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAEA,MAAIC,SAAS,GAAGR,OAAO,CAACS,KAAR,CAAc;AAC5BC,IAAAA,SAAS,EAAEH,MAAM,CAACG;AADU,GAAd,CAAhB;AAGA;;;;AAIAF,EAAAA,SAAS,CAACG,SAAV,CAAoBC,IAApB,GAA2B,WAA3B;AACAJ,EAAAA,SAAS,CAACG,SAAV,CAAoBE,WAApB,GAAkC,IAAlC;AACA;;;;;;;AAOAL,EAAAA,SAAS,CAACG,SAAV,CAAoBG,MAApB,GAA6B,YAAY;AACvC,WAAO;AACLC,MAAAA,MAAM,EAAE,WADH;AAELC,MAAAA,KAAK,EAAE,KAAKC,QAAL;AAFF,KAAP;AAID,GALD;AAMA;;;;;;;;AAQAT,EAAAA,SAAS,CAACU,QAAV,GAAqB,UAAUC,IAAV,EAAgB;AACnC,WAAO,IAAIX,SAAJ,CAAcW,IAAI,CAACH,KAAnB,CAAP;AACD,GAFD;;AAIA,MAAIV,EAAJ,EAAQ;AACN;AACAA,IAAAA,EAAE,CAAC,QAAD,EAAW,UAAUc,IAAV,EAAgBC,IAAhB,EAAsB;AACjC,UAAID,IAAI,CAACV,SAAL,KAAmBW,IAAI,CAACX,SAA5B,EAAuC;AACrCF,QAAAA,SAAS,CAACD,MAAV,CAAiB;AACfG,UAAAA,SAAS,EAAEU,IAAI,CAACV;AADD,SAAjB;AAGD;AACF,KANC,CAAF;AAOD;;AAED,SAAOF,SAAP;AACD,CAjDuD,EAiDrD;AACDc,EAAAA,OAAO,EAAE;AADR,CAjDqD,CAAjD","sourcesContent":["import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory';\nvar name = 'BigNumber';\nvar dependencies = ['?on', 'config'];\nexport var createBigNumberClass = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var on = _ref.on,\n      config = _ref.config;\n  var BigNumber = Decimal.clone({\n    precision: config.precision\n  });\n  /**\n   * Attach type information\n   */\n\n  BigNumber.prototype.type = 'BigNumber';\n  BigNumber.prototype.isBigNumber = true;\n  /**\n   * Get a JSON representation of a BigNumber containing\n   * type information\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   */\n\n  BigNumber.prototype.toJSON = function () {\n    return {\n      mathjs: 'BigNumber',\n      value: this.toString()\n    };\n  };\n  /**\n   * Instantiate a BigNumber from a JSON object\n   * @param {Object} json  a JSON object structured as:\n   *                       `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`\n   * @return {BigNumber}\n   */\n\n\n  BigNumber.fromJSON = function (json) {\n    return new BigNumber(json.value);\n  };\n\n  if (on) {\n    // listen for changed in the configuration, automatically apply changed precision\n    on('config', function (curr, prev) {\n      if (curr.precision !== prev.precision) {\n        BigNumber.config({\n          precision: curr.precision\n        });\n      }\n    });\n  }\n\n  return BigNumber;\n}, {\n  isClass: true\n});"]},"metadata":{},"sourceType":"module"}