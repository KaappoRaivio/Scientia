{"ast":null,"code":"import { filter, filterRegExp } from '../../utils/array';\nimport { maxArgumentCount } from '../../utils/function';\nimport { factory } from '../../utils/factory';\nvar name = 'filter';\nvar dependencies = ['typed'];\nexport var createFilter = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Filter the items in an array or one dimensional matrix.\n   *\n   * Syntax:\n   *\n   *    math.filter(x, test)\n   *\n   * Examples:\n   *\n   *    function isPositive (x) {\n   *      return x > 0\n   *    }\n   *    math.filter([6, -2, -1, 4, 3], isPositive) // returns [6, 4, 3]\n   *\n   *    math.filter([\"23\", \"foo\", \"100\", \"55\", \"bar\"], /[0-9]+/) // returns [\"23\", \"100\", \"55\"]\n   *\n   * See also:\n   *\n   *    forEach, map, sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to filter\n   * @param {Function | RegExp} test\n   *        A function or regular expression to test items.\n   *        All entries for which `test` returns true are returned.\n   *        When `test` is a function, it is invoked with three parameters:\n   *        the value of the element, the index of the element, and the\n   *        matrix/array being traversed. The function must return a boolean.\n   * @return {Matrix | Array} Returns the filtered matrix.\n   */\n\n  return typed('filter', {\n    'Array, function': _filterCallback,\n    'Matrix, function': function MatrixFunction(x, test) {\n      return x.create(_filterCallback(x.toArray(), test));\n    },\n    'Array, RegExp': filterRegExp,\n    'Matrix, RegExp': function MatrixRegExp(x, test) {\n      return x.create(filterRegExp(x.toArray(), test));\n    }\n  });\n});\n/**\n * Filter values in a callback given a callback function\n * @param {Array} x\n * @param {Function} callback\n * @return {Array} Returns the filtered array\n * @private\n */\n\nfunction _filterCallback(x, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n  return filter(x, function (value, index, array) {\n    // invoke the callback function with the right number of arguments\n    if (args === 1) {\n      return callback(value);\n    } else if (args === 2) {\n      return callback(value, [index]);\n    } else {\n      // 3 or -1\n      return callback(value, [index], array);\n    }\n  });\n}","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/matrix/filter.js"],"names":["filter","filterRegExp","maxArgumentCount","factory","name","dependencies","createFilter","_ref","typed","_filterCallback","MatrixFunction","x","test","create","toArray","MatrixRegExp","callback","args","value","index","array"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,YAAjB,QAAqC,mBAArC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACnF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAAOA,KAAK,CAAC,QAAD,EAAW;AACrB,uBAAmBC,eADE;AAErB,wBAAoB,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,IAA3B,EAAiC;AACnD,aAAOD,CAAC,CAACE,MAAF,CAASJ,eAAe,CAACE,CAAC,CAACG,OAAF,EAAD,EAAcF,IAAd,CAAxB,CAAP;AACD,KAJoB;AAKrB,qBAAiBX,YALI;AAMrB,sBAAkB,SAASc,YAAT,CAAsBJ,CAAtB,EAAyBC,IAAzB,EAA+B;AAC/C,aAAOD,CAAC,CAACE,MAAF,CAASZ,YAAY,CAACU,CAAC,CAACG,OAAF,EAAD,EAAcF,IAAd,CAArB,CAAP;AACD;AARoB,GAAX,CAAZ;AAUD,CA1C+C,CAAzC;AA2CP;;;;;;;;AAQA,SAASH,eAAT,CAAyBE,CAAzB,EAA4BK,QAA5B,EAAsC;AACpC;AACA,MAAIC,IAAI,GAAGf,gBAAgB,CAACc,QAAD,CAA3B;AACA,SAAOhB,MAAM,CAACW,CAAD,EAAI,UAAUO,KAAV,EAAiBC,KAAjB,EAAwBC,KAAxB,EAA+B;AAC9C;AACA,QAAIH,IAAI,KAAK,CAAb,EAAgB;AACd,aAAOD,QAAQ,CAACE,KAAD,CAAf;AACD,KAFD,MAEO,IAAID,IAAI,KAAK,CAAb,EAAgB;AACrB,aAAOD,QAAQ,CAACE,KAAD,EAAQ,CAACC,KAAD,CAAR,CAAf;AACD,KAFM,MAEA;AACL;AACA,aAAOH,QAAQ,CAACE,KAAD,EAAQ,CAACC,KAAD,CAAR,EAAiBC,KAAjB,CAAf;AACD;AACF,GAVY,CAAb;AAWD","sourcesContent":["import { filter, filterRegExp } from '../../utils/array';\nimport { maxArgumentCount } from '../../utils/function';\nimport { factory } from '../../utils/factory';\nvar name = 'filter';\nvar dependencies = ['typed'];\nexport var createFilter = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Filter the items in an array or one dimensional matrix.\n   *\n   * Syntax:\n   *\n   *    math.filter(x, test)\n   *\n   * Examples:\n   *\n   *    function isPositive (x) {\n   *      return x > 0\n   *    }\n   *    math.filter([6, -2, -1, 4, 3], isPositive) // returns [6, 4, 3]\n   *\n   *    math.filter([\"23\", \"foo\", \"100\", \"55\", \"bar\"], /[0-9]+/) // returns [\"23\", \"100\", \"55\"]\n   *\n   * See also:\n   *\n   *    forEach, map, sort\n   *\n   * @param {Matrix | Array} x    A one dimensional matrix or array to filter\n   * @param {Function | RegExp} test\n   *        A function or regular expression to test items.\n   *        All entries for which `test` returns true are returned.\n   *        When `test` is a function, it is invoked with three parameters:\n   *        the value of the element, the index of the element, and the\n   *        matrix/array being traversed. The function must return a boolean.\n   * @return {Matrix | Array} Returns the filtered matrix.\n   */\n  return typed('filter', {\n    'Array, function': _filterCallback,\n    'Matrix, function': function MatrixFunction(x, test) {\n      return x.create(_filterCallback(x.toArray(), test));\n    },\n    'Array, RegExp': filterRegExp,\n    'Matrix, RegExp': function MatrixRegExp(x, test) {\n      return x.create(filterRegExp(x.toArray(), test));\n    }\n  });\n});\n/**\n * Filter values in a callback given a callback function\n * @param {Array} x\n * @param {Function} callback\n * @return {Array} Returns the filtered array\n * @private\n */\n\nfunction _filterCallback(x, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n  return filter(x, function (value, index, array) {\n    // invoke the callback function with the right number of arguments\n    if (args === 1) {\n      return callback(value);\n    } else if (args === 2) {\n      return callback(value, [index]);\n    } else {\n      // 3 or -1\n      return callback(value, [index], array);\n    }\n  });\n}"]},"metadata":{},"sourceType":"module"}