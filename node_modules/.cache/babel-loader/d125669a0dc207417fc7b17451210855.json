{"ast":null,"code":"class Interpolator {\n  constructor() {\n    this.previousData = 0;\n    this.currentData = 0;\n    this.dataPoints = [[new Date().getTime(), 0]];\n  }\n\n  addDataPoint(timeStamp, data) {\n    // console.log(this.dataPoints)\n    // console.log(this.dataPoints)\n    this.dataPoints.push([timeStamp, data]);\n\n    while (this.dataPoints.length > 20) {\n      this.dataPoints.shift();\n    }\n  }\n\n  interpolate(timeStamp) {\n    let latest = this.dataPoints[this.dataPoints.length - 1][0];\n    let diff = timeStamp - latest;\n    let averageDiff = this.getAverageDeltaTime();\n    let progress = diff / averageDiff; // console.log(averageDiff)\n\n    return this.getLatestPairSlope()(progress * 1000);\n  }\n\n  getAverageDeltaTime() {\n    let previous = this.dataPoints[0][0];\n    let diffs = [];\n\n    for (let i = 1; i < this.dataPoints.length; i++) {\n      let current = this.dataPoints[i][0];\n      let diff = current - previous;\n      diffs.push(diff);\n      previous = current;\n    }\n\n    return diffs.reduce((a, b) => a + b, 0) / diffs.length;\n  }\n\n  getLatestPairSlope() {\n    let latest = this.dataPoints[this.dataPoints.length - 1];\n    let other = this.dataPoints[this.dataPoints.length - 2];\n    return x => {\n      // console.log(latest)\n      // if (latest === undefined || other === undefined) {\n      //     return [0, 0, 0, 0]\n      // }\n      // let yDiffs = latest[1].map((item, index) => item - other[1][index]);\n      // let k = (latest[1] - other[1]) / (latest[0] - other[0]);\n      // let slopes = yDiffs.map(item => item / (latest[0] - other[0]))\n      // let constants = other[1];\n      // return slopes.map((item, index) => item * x + constants[index]);\n      // console.log(x + 0)\n      let k = (latest[1] - other[1]) / (latest[0] - other[0]);\n      let b = other[1][0]; // return this.dataPoints[this.dataPoints.length - 1][1]\n\n      console.log(k.toFixed(5), x.toFixed(0), b.toFixed(0), (latest[0] - other[0]).toFixed(0), this.dataPoints[this.dataPoints.length - 1][1]); // return Math.min(k*x + b, latest[1][0])\n\n      return k * x + b;\n    };\n  }\n\n}\n\nexport default Interpolator;","map":{"version":3,"sources":["/home/kaappo/git/kments/src/components/misc/interpolate.js"],"names":["Interpolator","constructor","previousData","currentData","dataPoints","Date","getTime","addDataPoint","timeStamp","data","push","length","shift","interpolate","latest","diff","averageDiff","getAverageDeltaTime","progress","getLatestPairSlope","previous","diffs","i","current","reduce","a","b","other","x","k","console","log","toFixed"],"mappings":"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","sourcesContent":["class Interpolator {\n    constructor () {\n        this.previousData = 0;\n        this.currentData = 0;\n\n\n        this.dataPoints = [\n            [new Date().getTime(), 0]\n        ];\n    }\n\n    addDataPoint (timeStamp, data) {\n        // console.log(this.dataPoints)\n        // console.log(this.dataPoints)\n        this.dataPoints.push([timeStamp, data]);\n        while (this.dataPoints.length > 20) {\n            this.dataPoints.shift();\n        }\n        \n    }\n\n    interpolate (timeStamp) {\n        let latest = this.dataPoints[this.dataPoints.length - 1][0];\n        let diff = timeStamp - latest;\n\n        let averageDiff = this.getAverageDeltaTime();\n\n        let progress = diff / averageDiff;\n        // console.log(averageDiff)\n        return this.getLatestPairSlope()(progress * 1000)\n    }\n\n    getAverageDeltaTime () {\n        let previous = this.dataPoints[0][0];\n        let diffs = [];\n\n        for (let i = 1; i < this.dataPoints.length; i++) {\n            let current = this.dataPoints[i][0];\n            \n            let diff = current - previous;\n            diffs.push(diff);\n\n            previous = current;\n        }\n        return diffs.reduce((a, b) => a + b, 0) / diffs.length;\n    }\n\n    getLatestPairSlope () {\n        let latest = this.dataPoints[this.dataPoints.length - 1]\n        let other = this.dataPoints[this.dataPoints.length - 2]\n\n        return (x) => {\n            // console.log(latest)\n            // if (latest === undefined || other === undefined) {\n            //     return [0, 0, 0, 0]\n            // }\n            // let yDiffs = latest[1].map((item, index) => item - other[1][index]);\n            // let k = (latest[1] - other[1]) / (latest[0] - other[0]);\n            // let slopes = yDiffs.map(item => item / (latest[0] - other[0]))\n            // let constants = other[1];\n\n            // return slopes.map((item, index) => item * x + constants[index]);\n            // console.log(x + 0)\n            let k = (latest[1] - other[1]) / (latest[0] - other[0]);\n            let b = other[1][0];\n\n            // return this.dataPoints[this.dataPoints.length - 1][1]\n            console.log(k.toFixed(5), x.toFixed(0), b.toFixed(0), (latest[0] - other[0]).toFixed(0), this.dataPoints[this.dataPoints.length - 1][1])\n            // return Math.min(k*x + b, latest[1][0])\n            return k*x + b;\n        }\n    }\n}\n\nexport default Interpolator;"]},"metadata":{},"sourceType":"module"}