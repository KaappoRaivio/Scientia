{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { unaryPlusNumber } from '../../plain/number';\nvar name = 'unaryPlus';\nvar dependencies = ['typed', 'config', 'BigNumber'];\nexport var createUnaryPlus = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      BigNumber = _ref.BigNumber;\n  /**\n   * Unary plus operation.\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.unaryPlus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryPlus(3.5)      // returns 3.5\n   *    math.unaryPlus(1)     // returns 1\n   *\n   * See also:\n   *\n   *    unaryMinus, add, subtract\n   *\n   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\n   *            Input value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\n   */\n\n  var unaryPlus = typed(name, {\n    number: unaryPlusNumber,\n    Complex: function Complex(x) {\n      return x; // complex numbers are immutable\n    },\n    BigNumber: function BigNumber(x) {\n      return x; // bignumbers are immutable\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since unaryPlus(0) = 0\n      return deepMap(x, unaryPlus, true);\n    },\n    'boolean | string': function booleanString(x) {\n      // convert to a number or bignumber\n      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;\n    }\n  });\n  return unaryPlus;\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/arithmetic/unaryPlus.js"],"names":["factory","deepMap","unaryPlusNumber","name","dependencies","createUnaryPlus","_ref","typed","config","BigNumber","unaryPlus","number","Complex","x","Fraction","Unit","clone","ArrayMatrix","booleanString"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,WAApB,CAAnB;AACA,OAAO,IAAIC,eAAe,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACtF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAAA,MAEIC,SAAS,GAAGH,IAAI,CAACG,SAFrB;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,MAAIC,SAAS,GAAGH,KAAK,CAACJ,IAAD,EAAO;AAC1BQ,IAAAA,MAAM,EAAET,eADkB;AAE1BU,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAC3B,aAAOA,CAAP,CAD2B,CACjB;AACX,KAJyB;AAK1BJ,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBI,CAAnB,EAAsB;AAC/B,aAAOA,CAAP,CAD+B,CACrB;AACX,KAPyB;AAQ1BC,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBD,CAAlB,EAAqB;AAC7B,aAAOA,CAAP,CAD6B,CACnB;AACX,KAVyB;AAW1BE,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAcF,CAAd,EAAiB;AACrB,aAAOA,CAAC,CAACG,KAAF,EAAP;AACD,KAbyB;AAc1B,sBAAkB,SAASC,WAAT,CAAqBJ,CAArB,EAAwB;AACxC;AACA,aAAOZ,OAAO,CAACY,CAAD,EAAIH,SAAJ,EAAe,IAAf,CAAd;AACD,KAjByB;AAkB1B,wBAAoB,SAASQ,aAAT,CAAuBL,CAAvB,EAA0B;AAC5C;AACA,aAAOL,MAAM,CAACG,MAAP,KAAkB,WAAlB,GAAgC,IAAIF,SAAJ,CAAc,CAACI,CAAf,CAAhC,GAAoD,CAACA,CAA5D;AACD;AArByB,GAAP,CAArB;AAuBA,SAAOH,SAAP;AACD,CArDkD,CAA5C","sourcesContent":["import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { unaryPlusNumber } from '../../plain/number';\nvar name = 'unaryPlus';\nvar dependencies = ['typed', 'config', 'BigNumber'];\nexport var createUnaryPlus = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      BigNumber = _ref.BigNumber;\n\n  /**\n   * Unary plus operation.\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.unaryPlus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryPlus(3.5)      // returns 3.5\n   *    math.unaryPlus(1)     // returns 1\n   *\n   * See also:\n   *\n   *    unaryMinus, add, subtract\n   *\n   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\n   *            Input value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\n   */\n  var unaryPlus = typed(name, {\n    number: unaryPlusNumber,\n    Complex: function Complex(x) {\n      return x; // complex numbers are immutable\n    },\n    BigNumber: function BigNumber(x) {\n      return x; // bignumbers are immutable\n    },\n    Fraction: function Fraction(x) {\n      return x; // fractions are immutable\n    },\n    Unit: function Unit(x) {\n      return x.clone();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since unaryPlus(0) = 0\n      return deepMap(x, unaryPlus, true);\n    },\n    'boolean | string': function booleanString(x) {\n      // convert to a number or bignumber\n      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;\n    }\n  });\n  return unaryPlus;\n});"]},"metadata":{},"sourceType":"module"}