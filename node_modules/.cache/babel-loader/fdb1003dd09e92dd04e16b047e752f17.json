{"ast":null,"code":"import { isNode } from '../../utils/is';\nimport { factory } from '../../utils/factory';\nvar name = 'ParenthesisNode';\nvar dependencies = ['Node'];\nexport var createParenthesisNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n  /**\n   * @constructor ParenthesisNode\n   * @extends {Node}\n   * A parenthesis node describes manual parenthesis from the user input\n   * @param {Node} content\n   * @extends {Node}\n   */\n\n  function ParenthesisNode(content) {\n    if (!(this instanceof ParenthesisNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input\n\n\n    if (!isNode(content)) {\n      throw new TypeError('Node expected for parameter \"content\"');\n    }\n\n    this.content = content;\n  }\n\n  ParenthesisNode.prototype = new Node();\n  ParenthesisNode.prototype.type = 'ParenthesisNode';\n  ParenthesisNode.prototype.isParenthesisNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ParenthesisNode.prototype._compile = function (math, argNames) {\n    return this.content._compile(math, argNames);\n  };\n  /**\n   * Get the content of the current Node.\n   * @return {Node} content\n   * @override\n   **/\n\n\n  ParenthesisNode.prototype.getContent = function () {\n    return this.content.getContent();\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ParenthesisNode.prototype.forEach = function (callback) {\n    callback(this.content, 'content', this);\n  };\n  /**\n   * Create a new ParenthesisNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ParenthesisNode} Returns a clone of the node\n   */\n\n\n  ParenthesisNode.prototype.map = function (callback) {\n    var content = callback(this.content, 'content', this);\n    return new ParenthesisNode(content);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ParenthesisNode}\n   */\n\n\n  ParenthesisNode.prototype.clone = function () {\n    return new ParenthesisNode(this.content);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ParenthesisNode.prototype._toString = function (options) {\n    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n      return '(' + this.content.toString(options) + ')';\n    }\n\n    return this.content.toString(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ParenthesisNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ParenthesisNode',\n      content: this.content\n    };\n  };\n  /**\n   * Instantiate an ParenthesisNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ParenthesisNode\", \"content\": ...}`,\n   *                       where mathjs is optional\n   * @returns {ParenthesisNode}\n   */\n\n\n  ParenthesisNode.fromJSON = function (json) {\n    return new ParenthesisNode(json.content);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ParenthesisNode.prototype.toHTML = function (options) {\n    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n      return '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + this.content.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return this.content.toHTML(options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ParenthesisNode.prototype._toTex = function (options) {\n    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n      return \"\\\\left(\".concat(this.content.toTex(options), \"\\\\right)\");\n    }\n\n    return this.content.toTex(options);\n  };\n\n  return ParenthesisNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/expression/node/ParenthesisNode.js"],"names":["isNode","factory","name","dependencies","createParenthesisNode","_ref","Node","ParenthesisNode","content","SyntaxError","TypeError","prototype","type","isParenthesisNode","_compile","math","argNames","getContent","forEach","callback","map","clone","_toString","options","parenthesis","toString","toJSON","mathjs","fromJSON","json","toHTML","_toTex","concat","toTex","isClass"],"mappings":"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","sourcesContent":["import { isNode } from '../../utils/is';\nimport { factory } from '../../utils/factory';\nvar name = 'ParenthesisNode';\nvar dependencies = ['Node'];\nexport var createParenthesisNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n\n  /**\n   * @constructor ParenthesisNode\n   * @extends {Node}\n   * A parenthesis node describes manual parenthesis from the user input\n   * @param {Node} content\n   * @extends {Node}\n   */\n  function ParenthesisNode(content) {\n    if (!(this instanceof ParenthesisNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // validate input\n\n\n    if (!isNode(content)) {\n      throw new TypeError('Node expected for parameter \"content\"');\n    }\n\n    this.content = content;\n  }\n\n  ParenthesisNode.prototype = new Node();\n  ParenthesisNode.prototype.type = 'ParenthesisNode';\n  ParenthesisNode.prototype.isParenthesisNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ParenthesisNode.prototype._compile = function (math, argNames) {\n    return this.content._compile(math, argNames);\n  };\n  /**\n   * Get the content of the current Node.\n   * @return {Node} content\n   * @override\n   **/\n\n\n  ParenthesisNode.prototype.getContent = function () {\n    return this.content.getContent();\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ParenthesisNode.prototype.forEach = function (callback) {\n    callback(this.content, 'content', this);\n  };\n  /**\n   * Create a new ParenthesisNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node) : Node} callback\n   * @returns {ParenthesisNode} Returns a clone of the node\n   */\n\n\n  ParenthesisNode.prototype.map = function (callback) {\n    var content = callback(this.content, 'content', this);\n    return new ParenthesisNode(content);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ParenthesisNode}\n   */\n\n\n  ParenthesisNode.prototype.clone = function () {\n    return new ParenthesisNode(this.content);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ParenthesisNode.prototype._toString = function (options) {\n    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n      return '(' + this.content.toString(options) + ')';\n    }\n\n    return this.content.toString(options);\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ParenthesisNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ParenthesisNode',\n      content: this.content\n    };\n  };\n  /**\n   * Instantiate an ParenthesisNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ParenthesisNode\", \"content\": ...}`,\n   *                       where mathjs is optional\n   * @returns {ParenthesisNode}\n   */\n\n\n  ParenthesisNode.fromJSON = function (json) {\n    return new ParenthesisNode(json.content);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ParenthesisNode.prototype.toHTML = function (options) {\n    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n      return '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + this.content.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n    }\n\n    return this.content.toHTML(options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ParenthesisNode.prototype._toTex = function (options) {\n    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n      return \"\\\\left(\".concat(this.content.toTex(options), \"\\\\right)\");\n    }\n\n    return this.content.toTex(options);\n  };\n\n  return ParenthesisNode;\n}, {\n  isClass: true,\n  isNode: true\n});"]},"metadata":{},"sourceType":"module"}