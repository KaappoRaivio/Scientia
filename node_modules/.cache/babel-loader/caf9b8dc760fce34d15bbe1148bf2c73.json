{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport './../utils/polyfills';\nimport { deepFlatten, isLegacyFactory, lazy, traverse, values } from './../utils/object';\nimport * as emitter from './../utils/emitter';\nimport { importFactory } from './function/import';\nimport { configFactory } from './function/config';\nimport { factory, isFactory } from '../utils/factory';\nimport { isAccessorNode, isArray, isArrayNode, isAssignmentNode, isBigNumber, isBlockNode, isBoolean, isChain, isCollection, isComplex, isConditionalNode, isConstantNode, isDate, isDenseMatrix, isFraction, isFunction, isFunctionAssignmentNode, isFunctionNode, isHelp, isIndex, isIndexNode, isMatrix, isNode, isNull, isNumber, isObject, isObjectNode, isOperatorNode, isParenthesisNode, isRange, isRangeNode, isRegExp, isResultSet, isSparseMatrix, isString, isSymbolNode, isUndefined, isUnit } from '../utils/is';\nimport { initial, last } from '../utils/array';\nimport { warnOnce } from '../utils/log';\nimport { ArgumentsError } from '../error/ArgumentsError';\nimport { DimensionError } from '../error/DimensionError';\nimport { IndexError } from '../error/IndexError';\nimport { DEFAULT_CONFIG } from './config';\n/**\n * Create a mathjs instance from given factory functions and optionally config\n *\n * Usage:\n *\n *     const mathjs1 = create({ createAdd, createMultiply, ...})\n *     const config = { number: 'BigNumber' }\n *     const mathjs2 = create(all, config)\n *\n * @param {Object} [factories] An object with factory functions\n *                             The object can contain nested objects,\n *                             all nested objects will be flattened.\n * @param {Object} [config]    Available options:\n *                            {number} epsilon\n *                              Minimum relative difference between two\n *                              compared values, used by all comparison functions.\n *                            {string} matrix\n *                              A string 'Matrix' (default) or 'Array'.\n *                            {string} number\n *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n *                            {number} precision\n *                              The number of significant digits for BigNumbers.\n *                              Not applicable for Numbers.\n *                            {boolean} predictable\n *                              Predictable output type of functions. When true,\n *                              output type depends only on the input types. When\n *                              false (default), output type can vary depending\n *                              on input values. For example `math.sqrt(-4)`\n *                              returns `complex('2i')` when predictable is false, and\n *                              returns `NaN` when true.\n *                            {string} randomSeed\n *                              Random seed for seeded pseudo random number generator.\n *                              Set to null to randomly seed.\n * @returns {Object} Returns a bare-bone math.js instance containing\n *                   functions:\n *                   - `import` to add new functions\n *                   - `config` to change configuration\n *                   - `on`, `off`, `once`, `emit` for events\n */\n\nexport function create(factories, config) {\n  var configInternal = _extends({}, DEFAULT_CONFIG, config); // simple test for ES5 support\n\n\n  if (typeof Object.create !== 'function') {\n    throw new Error('ES5 not supported by this JavaScript engine. ' + 'Please load the es5-shim and es5-sham library for compatibility.');\n  } // create the mathjs instance\n\n\n  var math = emitter.mixin({\n    // only here for backward compatibility for legacy factory functions\n    isNumber: isNumber,\n    isComplex: isComplex,\n    isBigNumber: isBigNumber,\n    isFraction: isFraction,\n    isUnit: isUnit,\n    isString: isString,\n    isArray: isArray,\n    isMatrix: isMatrix,\n    isCollection: isCollection,\n    isDenseMatrix: isDenseMatrix,\n    isSparseMatrix: isSparseMatrix,\n    isRange: isRange,\n    isIndex: isIndex,\n    isBoolean: isBoolean,\n    isResultSet: isResultSet,\n    isHelp: isHelp,\n    isFunction: isFunction,\n    isDate: isDate,\n    isRegExp: isRegExp,\n    isObject: isObject,\n    isNull: isNull,\n    isUndefined: isUndefined,\n    isAccessorNode: isAccessorNode,\n    isArrayNode: isArrayNode,\n    isAssignmentNode: isAssignmentNode,\n    isBlockNode: isBlockNode,\n    isConditionalNode: isConditionalNode,\n    isConstantNode: isConstantNode,\n    isFunctionAssignmentNode: isFunctionAssignmentNode,\n    isFunctionNode: isFunctionNode,\n    isIndexNode: isIndexNode,\n    isNode: isNode,\n    isObjectNode: isObjectNode,\n    isOperatorNode: isOperatorNode,\n    isParenthesisNode: isParenthesisNode,\n    isRangeNode: isRangeNode,\n    isSymbolNode: isSymbolNode,\n    isChain: isChain\n  }); // load config function and apply provided config\n\n  math.config = configFactory(configInternal, math.emit);\n  math.expression = {\n    transform: {},\n    mathWithTransform: {\n      config: math.config\n    }\n  }; // cached factories and instances used by function load\n\n  var legacyFactories = [];\n  var legacyInstances = [];\n  /**\n   * Load a function or data type from a factory.\n   * If the function or data type already exists, the existing instance is\n   * returned.\n   * @param {Function} factory\n   * @returns {*}\n   */\n\n  function load(factory) {\n    if (isFactory(factory)) {\n      return factory(math);\n    }\n\n    var firstProperty = factory[Object.keys(factory)[0]];\n\n    if (isFactory(firstProperty)) {\n      return firstProperty(math);\n    }\n\n    if (!isLegacyFactory(factory)) {\n      console.warn('Factory object with properties `type`, `name`, and `factory` expected', factory);\n      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');\n    }\n\n    var index = legacyFactories.indexOf(factory);\n    var instance;\n\n    if (index === -1) {\n      // doesn't yet exist\n      if (factory.math === true) {\n        // pass with math namespace\n        instance = factory.factory(math.type, configInternal, load, math.typed, math);\n      } else {\n        instance = factory.factory(math.type, configInternal, load, math.typed);\n      } // append to the cache\n\n\n      legacyFactories.push(factory);\n      legacyInstances.push(instance);\n    } else {\n      // already existing function, return the cached instance\n      instance = legacyInstances[index];\n    }\n\n    return instance;\n  }\n\n  var importedFactories = {}; // load the import function\n\n  function lazyTyped() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return math.typed.apply(math.typed, args);\n  }\n\n  var internalImport = importFactory(lazyTyped, load, math, importedFactories);\n  math[\"import\"] = internalImport; // listen for changes in config, import all functions again when changed\n  // TODO: move this listener into the import function?\n\n  math.on('config', function () {\n    values(importedFactories).forEach(function (factory) {\n      if (factory && factory.meta && factory.meta.recreateOnConfigChange) {\n        // FIXME: only re-create when the current instance is the same as was initially created\n        // FIXME: delete the functions/constants before importing them again?\n        internalImport(factory, {\n          override: true\n        });\n      }\n    });\n  }); // the create function exposed on the mathjs instance is bound to\n  // the factory functions passed before\n\n  math.create = create.bind(null, factories); // export factory function\n\n  math.factory = factory; // import the factory functions like createAdd as an array instead of object,\n  // else they will get a different naming (`createAdd` instead of `add`).\n\n  math[\"import\"](values(deepFlatten(factories))); // TODO: deprecated since v6.0.0. Clean up some day\n\n  var movedNames = ['type.isNumber', 'type.isComplex', 'type.isBigNumber', 'type.isFraction', 'type.isUnit', 'type.isString', 'type.isArray', 'type.isMatrix', 'type.isDenseMatrix', 'type.isSparseMatrix', 'type.isCollection', 'type.isRange', 'type.isIndex', 'type.isBoolean', 'type.isResultSet', 'type.isHelp', 'type.isFunction', 'type.isDate', 'type.isRegExp', 'type.isObject', 'type.isNull', 'type.isUndefined', 'type.isAccessorNode', 'type.isArrayNode', 'type.isAssignmentNode', 'type.isBlockNode', 'type.isConditionalNode', 'type.isConstantNode', 'type.isFunctionAssignmentNode', 'type.isFunctionNode', 'type.isIndexNode', 'type.isNode', 'type.isObjectNode', 'type.isOperatorNode', 'type.isParenthesisNode', 'type.isRangeNode', 'type.isSymbolNode', 'type.isChain', 'type.BigNumber', 'type.Chain', 'type.Complex', 'type.Fraction', 'type.Matrix', 'type.DenseMatrix', 'type.SparseMatrix', 'type.Spa', 'type.FibonacciHeap', 'type.ImmutableDenseMatrix', 'type.Index', 'type.Range', 'type.ResultSet', 'type.Unit', 'type.Help', 'type.Parser', 'expression.parse', 'expression.Parser', 'expression.node.AccessorNode', 'expression.node.ArrayNode', 'expression.node.AssignmentNode', 'expression.node.BlockNode', 'expression.node.ConditionalNode', 'expression.node.ConstantNode', 'expression.node.IndexNode', 'expression.node.FunctionAssignmentNode', 'expression.node.FunctionNode', 'expression.node.Node', 'expression.node.ObjectNode', 'expression.node.OperatorNode', 'expression.node.ParenthesisNode', 'expression.node.RangeNode', 'expression.node.RelationalNode', 'expression.node.SymbolNode', 'json.reviver', 'error.ArgumentsError', 'error.DimensionError', 'error.IndexError'];\n  movedNames.forEach(function (fullName) {\n    var parts = fullName.split('.');\n    var path = initial(parts);\n    var name = last(parts);\n    var obj = traverse(math, path);\n    lazy(obj, name, function () {\n      warnOnce(\"math.\".concat(fullName, \" is moved to math.\").concat(name, \" in v6.0.0. \") + 'Please use the new location instead.');\n      return math[name];\n    });\n  });\n  lazy(math.expression, 'docs', function () {\n    throw new Error('math.expression.docs has been moved. ' + 'Please import via \"import { docs } from \\'mathjs\\'\"');\n  });\n  math.ArgumentsError = ArgumentsError;\n  math.DimensionError = DimensionError;\n  math.IndexError = IndexError;\n  return math;\n}","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/core/create.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","deepFlatten","isLegacyFactory","lazy","traverse","values","emitter","importFactory","configFactory","factory","isFactory","isAccessorNode","isArray","isArrayNode","isAssignmentNode","isBigNumber","isBlockNode","isBoolean","isChain","isCollection","isComplex","isConditionalNode","isConstantNode","isDate","isDenseMatrix","isFraction","isFunction","isFunctionAssignmentNode","isFunctionNode","isHelp","isIndex","isIndexNode","isMatrix","isNode","isNull","isNumber","isObject","isObjectNode","isOperatorNode","isParenthesisNode","isRange","isRangeNode","isRegExp","isResultSet","isSparseMatrix","isString","isSymbolNode","isUndefined","isUnit","initial","last","warnOnce","ArgumentsError","DimensionError","IndexError","DEFAULT_CONFIG","create","factories","config","configInternal","Error","math","mixin","emit","expression","transform","mathWithTransform","legacyFactories","legacyInstances","load","firstProperty","keys","console","warn","index","indexOf","instance","type","typed","push","importedFactories","lazyTyped","_len","args","Array","_key","internalImport","on","forEach","meta","recreateOnConfigChange","override","bind","movedNames","fullName","parts","split","path","name","obj","concat"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport './../utils/polyfills';\nimport { deepFlatten, isLegacyFactory, lazy, traverse, values } from './../utils/object';\nimport * as emitter from './../utils/emitter';\nimport { importFactory } from './function/import';\nimport { configFactory } from './function/config';\nimport { factory, isFactory } from '../utils/factory';\nimport { isAccessorNode, isArray, isArrayNode, isAssignmentNode, isBigNumber, isBlockNode, isBoolean, isChain, isCollection, isComplex, isConditionalNode, isConstantNode, isDate, isDenseMatrix, isFraction, isFunction, isFunctionAssignmentNode, isFunctionNode, isHelp, isIndex, isIndexNode, isMatrix, isNode, isNull, isNumber, isObject, isObjectNode, isOperatorNode, isParenthesisNode, isRange, isRangeNode, isRegExp, isResultSet, isSparseMatrix, isString, isSymbolNode, isUndefined, isUnit } from '../utils/is';\nimport { initial, last } from '../utils/array';\nimport { warnOnce } from '../utils/log';\nimport { ArgumentsError } from '../error/ArgumentsError';\nimport { DimensionError } from '../error/DimensionError';\nimport { IndexError } from '../error/IndexError';\nimport { DEFAULT_CONFIG } from './config';\n/**\n * Create a mathjs instance from given factory functions and optionally config\n *\n * Usage:\n *\n *     const mathjs1 = create({ createAdd, createMultiply, ...})\n *     const config = { number: 'BigNumber' }\n *     const mathjs2 = create(all, config)\n *\n * @param {Object} [factories] An object with factory functions\n *                             The object can contain nested objects,\n *                             all nested objects will be flattened.\n * @param {Object} [config]    Available options:\n *                            {number} epsilon\n *                              Minimum relative difference between two\n *                              compared values, used by all comparison functions.\n *                            {string} matrix\n *                              A string 'Matrix' (default) or 'Array'.\n *                            {string} number\n *                              A string 'number' (default), 'BigNumber', or 'Fraction'\n *                            {number} precision\n *                              The number of significant digits for BigNumbers.\n *                              Not applicable for Numbers.\n *                            {boolean} predictable\n *                              Predictable output type of functions. When true,\n *                              output type depends only on the input types. When\n *                              false (default), output type can vary depending\n *                              on input values. For example `math.sqrt(-4)`\n *                              returns `complex('2i')` when predictable is false, and\n *                              returns `NaN` when true.\n *                            {string} randomSeed\n *                              Random seed for seeded pseudo random number generator.\n *                              Set to null to randomly seed.\n * @returns {Object} Returns a bare-bone math.js instance containing\n *                   functions:\n *                   - `import` to add new functions\n *                   - `config` to change configuration\n *                   - `on`, `off`, `once`, `emit` for events\n */\n\nexport function create(factories, config) {\n  var configInternal = _extends({}, DEFAULT_CONFIG, config); // simple test for ES5 support\n\n\n  if (typeof Object.create !== 'function') {\n    throw new Error('ES5 not supported by this JavaScript engine. ' + 'Please load the es5-shim and es5-sham library for compatibility.');\n  } // create the mathjs instance\n\n\n  var math = emitter.mixin({\n    // only here for backward compatibility for legacy factory functions\n    isNumber: isNumber,\n    isComplex: isComplex,\n    isBigNumber: isBigNumber,\n    isFraction: isFraction,\n    isUnit: isUnit,\n    isString: isString,\n    isArray: isArray,\n    isMatrix: isMatrix,\n    isCollection: isCollection,\n    isDenseMatrix: isDenseMatrix,\n    isSparseMatrix: isSparseMatrix,\n    isRange: isRange,\n    isIndex: isIndex,\n    isBoolean: isBoolean,\n    isResultSet: isResultSet,\n    isHelp: isHelp,\n    isFunction: isFunction,\n    isDate: isDate,\n    isRegExp: isRegExp,\n    isObject: isObject,\n    isNull: isNull,\n    isUndefined: isUndefined,\n    isAccessorNode: isAccessorNode,\n    isArrayNode: isArrayNode,\n    isAssignmentNode: isAssignmentNode,\n    isBlockNode: isBlockNode,\n    isConditionalNode: isConditionalNode,\n    isConstantNode: isConstantNode,\n    isFunctionAssignmentNode: isFunctionAssignmentNode,\n    isFunctionNode: isFunctionNode,\n    isIndexNode: isIndexNode,\n    isNode: isNode,\n    isObjectNode: isObjectNode,\n    isOperatorNode: isOperatorNode,\n    isParenthesisNode: isParenthesisNode,\n    isRangeNode: isRangeNode,\n    isSymbolNode: isSymbolNode,\n    isChain: isChain\n  }); // load config function and apply provided config\n\n  math.config = configFactory(configInternal, math.emit);\n  math.expression = {\n    transform: {},\n    mathWithTransform: {\n      config: math.config\n    }\n  }; // cached factories and instances used by function load\n\n  var legacyFactories = [];\n  var legacyInstances = [];\n  /**\n   * Load a function or data type from a factory.\n   * If the function or data type already exists, the existing instance is\n   * returned.\n   * @param {Function} factory\n   * @returns {*}\n   */\n\n  function load(factory) {\n    if (isFactory(factory)) {\n      return factory(math);\n    }\n\n    var firstProperty = factory[Object.keys(factory)[0]];\n\n    if (isFactory(firstProperty)) {\n      return firstProperty(math);\n    }\n\n    if (!isLegacyFactory(factory)) {\n      console.warn('Factory object with properties `type`, `name`, and `factory` expected', factory);\n      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');\n    }\n\n    var index = legacyFactories.indexOf(factory);\n    var instance;\n\n    if (index === -1) {\n      // doesn't yet exist\n      if (factory.math === true) {\n        // pass with math namespace\n        instance = factory.factory(math.type, configInternal, load, math.typed, math);\n      } else {\n        instance = factory.factory(math.type, configInternal, load, math.typed);\n      } // append to the cache\n\n\n      legacyFactories.push(factory);\n      legacyInstances.push(instance);\n    } else {\n      // already existing function, return the cached instance\n      instance = legacyInstances[index];\n    }\n\n    return instance;\n  }\n\n  var importedFactories = {}; // load the import function\n\n  function lazyTyped() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return math.typed.apply(math.typed, args);\n  }\n\n  var internalImport = importFactory(lazyTyped, load, math, importedFactories);\n  math[\"import\"] = internalImport; // listen for changes in config, import all functions again when changed\n  // TODO: move this listener into the import function?\n\n  math.on('config', function () {\n    values(importedFactories).forEach(function (factory) {\n      if (factory && factory.meta && factory.meta.recreateOnConfigChange) {\n        // FIXME: only re-create when the current instance is the same as was initially created\n        // FIXME: delete the functions/constants before importing them again?\n        internalImport(factory, {\n          override: true\n        });\n      }\n    });\n  }); // the create function exposed on the mathjs instance is bound to\n  // the factory functions passed before\n\n  math.create = create.bind(null, factories); // export factory function\n\n  math.factory = factory; // import the factory functions like createAdd as an array instead of object,\n  // else they will get a different naming (`createAdd` instead of `add`).\n\n  math[\"import\"](values(deepFlatten(factories))); // TODO: deprecated since v6.0.0. Clean up some day\n\n  var movedNames = ['type.isNumber', 'type.isComplex', 'type.isBigNumber', 'type.isFraction', 'type.isUnit', 'type.isString', 'type.isArray', 'type.isMatrix', 'type.isDenseMatrix', 'type.isSparseMatrix', 'type.isCollection', 'type.isRange', 'type.isIndex', 'type.isBoolean', 'type.isResultSet', 'type.isHelp', 'type.isFunction', 'type.isDate', 'type.isRegExp', 'type.isObject', 'type.isNull', 'type.isUndefined', 'type.isAccessorNode', 'type.isArrayNode', 'type.isAssignmentNode', 'type.isBlockNode', 'type.isConditionalNode', 'type.isConstantNode', 'type.isFunctionAssignmentNode', 'type.isFunctionNode', 'type.isIndexNode', 'type.isNode', 'type.isObjectNode', 'type.isOperatorNode', 'type.isParenthesisNode', 'type.isRangeNode', 'type.isSymbolNode', 'type.isChain', 'type.BigNumber', 'type.Chain', 'type.Complex', 'type.Fraction', 'type.Matrix', 'type.DenseMatrix', 'type.SparseMatrix', 'type.Spa', 'type.FibonacciHeap', 'type.ImmutableDenseMatrix', 'type.Index', 'type.Range', 'type.ResultSet', 'type.Unit', 'type.Help', 'type.Parser', 'expression.parse', 'expression.Parser', 'expression.node.AccessorNode', 'expression.node.ArrayNode', 'expression.node.AssignmentNode', 'expression.node.BlockNode', 'expression.node.ConditionalNode', 'expression.node.ConstantNode', 'expression.node.IndexNode', 'expression.node.FunctionAssignmentNode', 'expression.node.FunctionNode', 'expression.node.Node', 'expression.node.ObjectNode', 'expression.node.OperatorNode', 'expression.node.ParenthesisNode', 'expression.node.RangeNode', 'expression.node.RelationalNode', 'expression.node.SymbolNode', 'json.reviver', 'error.ArgumentsError', 'error.DimensionError', 'error.IndexError'];\n  movedNames.forEach(function (fullName) {\n    var parts = fullName.split('.');\n    var path = initial(parts);\n    var name = last(parts);\n    var obj = traverse(math, path);\n    lazy(obj, name, function () {\n      warnOnce(\"math.\".concat(fullName, \" is moved to math.\").concat(name, \" in v6.0.0. \") + 'Please use the new location instead.');\n      return math[name];\n    });\n  });\n  lazy(math.expression, 'docs', function () {\n    throw new Error('math.expression.docs has been moved. ' + 'Please import via \"import { docs } from \\'mathjs\\'\"');\n  });\n  math.ArgumentsError = ArgumentsError;\n  math.DimensionError = DimensionError;\n  math.IndexError = IndexError;\n  return math;\n}"]},"metadata":{},"sourceType":"module"}