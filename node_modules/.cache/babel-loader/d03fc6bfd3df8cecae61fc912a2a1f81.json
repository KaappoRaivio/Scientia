{"ast":null,"code":"/* eslint no-template-curly-in-string: \"off\" */\nimport escapeLatexLib from 'escape-latex';\nimport { hasOwnProperty } from './object';\nexport var latexSymbols = {\n  // GREEK LETTERS\n  Alpha: 'A',\n  alpha: '\\\\alpha',\n  Beta: 'B',\n  beta: '\\\\beta',\n  Gamma: '\\\\Gamma',\n  gamma: '\\\\gamma',\n  Delta: '\\\\Delta',\n  delta: '\\\\delta',\n  Epsilon: 'E',\n  epsilon: '\\\\epsilon',\n  varepsilon: '\\\\varepsilon',\n  Zeta: 'Z',\n  zeta: '\\\\zeta',\n  Eta: 'H',\n  eta: '\\\\eta',\n  Theta: '\\\\Theta',\n  theta: '\\\\theta',\n  vartheta: '\\\\vartheta',\n  Iota: 'I',\n  iota: '\\\\iota',\n  Kappa: 'K',\n  kappa: '\\\\kappa',\n  varkappa: '\\\\varkappa',\n  Lambda: '\\\\Lambda',\n  lambda: '\\\\lambda',\n  Mu: 'M',\n  mu: '\\\\mu',\n  Nu: 'N',\n  nu: '\\\\nu',\n  Xi: '\\\\Xi',\n  xi: '\\\\xi',\n  Omicron: 'O',\n  omicron: 'o',\n  Pi: '\\\\Pi',\n  pi: '\\\\pi',\n  varpi: '\\\\varpi',\n  Rho: 'P',\n  rho: '\\\\rho',\n  varrho: '\\\\varrho',\n  Sigma: '\\\\Sigma',\n  sigma: '\\\\sigma',\n  varsigma: '\\\\varsigma',\n  Tau: 'T',\n  tau: '\\\\tau',\n  Upsilon: \"\\\\Upsilon\",\n  upsilon: \"\\\\upsilon\",\n  Phi: '\\\\Phi',\n  phi: '\\\\phi',\n  varphi: '\\\\varphi',\n  Chi: 'X',\n  chi: '\\\\chi',\n  Psi: '\\\\Psi',\n  psi: '\\\\psi',\n  Omega: '\\\\Omega',\n  omega: '\\\\omega',\n  // logic\n  \"true\": '\\\\mathrm{True}',\n  \"false\": '\\\\mathrm{False}',\n  // other\n  i: 'i',\n  // TODO use \\i ??\n  inf: '\\\\infty',\n  Inf: '\\\\infty',\n  infinity: '\\\\infty',\n  Infinity: '\\\\infty',\n  oo: '\\\\infty',\n  lim: '\\\\lim',\n  undefined: '\\\\mathbf{?}'\n};\nexport var latexOperators = {\n  transpose: '^\\\\top',\n  ctranspose: '^H',\n  factorial: '!',\n  pow: '^',\n  dotPow: '.^\\\\wedge',\n  // TODO find ideal solution\n  unaryPlus: '+',\n  unaryMinus: '-',\n  bitNot: '\\\\~',\n  // TODO find ideal solution\n  not: '\\\\neg',\n  multiply: '\\\\cdot',\n  divide: '\\\\frac',\n  // TODO how to handle that properly?\n  dotMultiply: '.\\\\cdot',\n  // TODO find ideal solution\n  dotDivide: '.:',\n  // TODO find ideal solution\n  mod: '\\\\mod',\n  add: '+',\n  subtract: '-',\n  to: '\\\\rightarrow',\n  leftShift: '<<',\n  rightArithShift: '>>',\n  rightLogShift: '>>>',\n  equal: '=',\n  unequal: '\\\\neq',\n  smaller: '<',\n  larger: '>',\n  smallerEq: '\\\\leq',\n  largerEq: '\\\\geq',\n  bitAnd: '\\\\&',\n  bitXor: \"\\\\underline{|}\",\n  bitOr: '|',\n  and: '\\\\wedge',\n  xor: '\\\\veebar',\n  or: '\\\\vee'\n};\nexport var latexFunctions = {\n  // arithmetic\n  abs: {\n    1: '\\\\left|${args[0]}\\\\right|'\n  },\n  add: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.add, \"${args[1]}\\\\right)\")\n  },\n  cbrt: {\n    1: '\\\\sqrt[3]{${args[0]}}'\n  },\n  ceil: {\n    1: '\\\\left\\\\lceil${args[0]}\\\\right\\\\rceil'\n  },\n  cube: {\n    1: '\\\\left(${args[0]}\\\\right)^3'\n  },\n  divide: {\n    2: '\\\\frac{${args[0]}}{${args[1]}}'\n  },\n  dotDivide: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.dotDivide, \"${args[1]}\\\\right)\")\n  },\n  dotMultiply: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.dotMultiply, \"${args[1]}\\\\right)\")\n  },\n  dotPow: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.dotPow, \"${args[1]}\\\\right)\")\n  },\n  exp: {\n    1: '\\\\exp\\\\left(${args[0]}\\\\right)'\n  },\n  expm1: \"\\\\left(e\".concat(latexOperators.pow, \"{${args[0]}}-1\\\\right)\"),\n  fix: {\n    1: '\\\\mathrm{${name}}\\\\left(${args[0]}\\\\right)'\n  },\n  floor: {\n    1: '\\\\left\\\\lfloor${args[0]}\\\\right\\\\rfloor'\n  },\n  gcd: '\\\\gcd\\\\left(${args}\\\\right)',\n  hypot: '\\\\hypot\\\\left(${args}\\\\right)',\n  log: {\n    1: '\\\\ln\\\\left(${args[0]}\\\\right)',\n    2: '\\\\log_{${args[1]}}\\\\left(${args[0]}\\\\right)'\n  },\n  log10: {\n    1: '\\\\log_{10}\\\\left(${args[0]}\\\\right)'\n  },\n  log1p: {\n    1: '\\\\ln\\\\left(${args[0]}+1\\\\right)',\n    2: '\\\\log_{${args[1]}}\\\\left(${args[0]}+1\\\\right)'\n  },\n  log2: '\\\\log_{2}\\\\left(${args[0]}\\\\right)',\n  mod: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.mod, \"${args[1]}\\\\right)\")\n  },\n  multiply: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.multiply, \"${args[1]}\\\\right)\")\n  },\n  norm: {\n    1: '\\\\left\\\\|${args[0]}\\\\right\\\\|',\n    2: undefined // use default template\n\n  },\n  nthRoot: {\n    2: '\\\\sqrt[${args[1]}]{${args[0]}}'\n  },\n  nthRoots: {\n    2: '\\\\{y : $y^{args[1]} = {${args[0]}}\\\\}'\n  },\n  pow: {\n    2: \"\\\\left(${args[0]}\\\\right)\".concat(latexOperators.pow, \"{${args[1]}}\")\n  },\n  round: {\n    1: '\\\\left\\\\lfloor${args[0]}\\\\right\\\\rceil',\n    2: undefined // use default template\n\n  },\n  sign: {\n    1: '\\\\mathrm{${name}}\\\\left(${args[0]}\\\\right)'\n  },\n  sqrt: {\n    1: '\\\\sqrt{${args[0]}}'\n  },\n  square: {\n    1: '\\\\left(${args[0]}\\\\right)^2'\n  },\n  subtract: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.subtract, \"${args[1]}\\\\right)\")\n  },\n  unaryMinus: {\n    1: \"\".concat(latexOperators.unaryMinus, \"\\\\left(${args[0]}\\\\right)\")\n  },\n  unaryPlus: {\n    1: \"\".concat(latexOperators.unaryPlus, \"\\\\left(${args[0]}\\\\right)\")\n  },\n  // bitwise\n  bitAnd: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.bitAnd, \"${args[1]}\\\\right)\")\n  },\n  bitNot: {\n    1: latexOperators.bitNot + '\\\\left(${args[0]}\\\\right)'\n  },\n  bitOr: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.bitOr, \"${args[1]}\\\\right)\")\n  },\n  bitXor: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.bitXor, \"${args[1]}\\\\right)\")\n  },\n  leftShift: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.leftShift, \"${args[1]}\\\\right)\")\n  },\n  rightArithShift: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.rightArithShift, \"${args[1]}\\\\right)\")\n  },\n  rightLogShift: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.rightLogShift, \"${args[1]}\\\\right)\")\n  },\n  // combinatorics\n  bellNumbers: {\n    1: '\\\\mathrm{B}_{${args[0]}}'\n  },\n  catalan: {\n    1: '\\\\mathrm{C}_{${args[0]}}'\n  },\n  stirlingS2: {\n    2: '\\\\mathrm{S}\\\\left(${args}\\\\right)'\n  },\n  // complex\n  arg: {\n    1: '\\\\arg\\\\left(${args[0]}\\\\right)'\n  },\n  conj: {\n    1: '\\\\left(${args[0]}\\\\right)^*'\n  },\n  im: {\n    1: '\\\\Im\\\\left\\\\lbrace${args[0]}\\\\right\\\\rbrace'\n  },\n  re: {\n    1: '\\\\Re\\\\left\\\\lbrace${args[0]}\\\\right\\\\rbrace'\n  },\n  // logical\n  and: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.and, \"${args[1]}\\\\right)\")\n  },\n  not: {\n    1: latexOperators.not + '\\\\left(${args[0]}\\\\right)'\n  },\n  or: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.or, \"${args[1]}\\\\right)\")\n  },\n  xor: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.xor, \"${args[1]}\\\\right)\")\n  },\n  // matrix\n  cross: {\n    2: '\\\\left(${args[0]}\\\\right)\\\\times\\\\left(${args[1]}\\\\right)'\n  },\n  ctranspose: {\n    1: \"\\\\left(${args[0]}\\\\right)\".concat(latexOperators.ctranspose)\n  },\n  det: {\n    1: '\\\\det\\\\left(${args[0]}\\\\right)'\n  },\n  dot: {\n    2: '\\\\left(${args[0]}\\\\cdot${args[1]}\\\\right)'\n  },\n  expm: {\n    1: '\\\\exp\\\\left(${args[0]}\\\\right)'\n  },\n  inv: {\n    1: '\\\\left(${args[0]}\\\\right)^{-1}'\n  },\n  sqrtm: {\n    1: \"{${args[0]}}\".concat(latexOperators.pow, \"{\\\\frac{1}{2}}\")\n  },\n  trace: {\n    1: '\\\\mathrm{tr}\\\\left(${args[0]}\\\\right)'\n  },\n  transpose: {\n    1: \"\\\\left(${args[0]}\\\\right)\".concat(latexOperators.transpose)\n  },\n  // probability\n  combinations: {\n    2: '\\\\binom{${args[0]}}{${args[1]}}'\n  },\n  combinationsWithRep: {\n    2: '\\\\left(\\\\!\\\\!{\\\\binom{${args[0]}}{${args[1]}}}\\\\!\\\\!\\\\right)'\n  },\n  factorial: {\n    1: \"\\\\left(${args[0]}\\\\right)\".concat(latexOperators.factorial)\n  },\n  gamma: {\n    1: '\\\\Gamma\\\\left(${args[0]}\\\\right)'\n  },\n  // relational\n  equal: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.equal, \"${args[1]}\\\\right)\")\n  },\n  larger: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.larger, \"${args[1]}\\\\right)\")\n  },\n  largerEq: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.largerEq, \"${args[1]}\\\\right)\")\n  },\n  smaller: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.smaller, \"${args[1]}\\\\right)\")\n  },\n  smallerEq: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.smallerEq, \"${args[1]}\\\\right)\")\n  },\n  unequal: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.unequal, \"${args[1]}\\\\right)\")\n  },\n  // special\n  erf: {\n    1: 'erf\\\\left(${args[0]}\\\\right)'\n  },\n  // statistics\n  max: '\\\\max\\\\left(${args}\\\\right)',\n  min: '\\\\min\\\\left(${args}\\\\right)',\n  variance: '\\\\mathrm{Var}\\\\left(${args}\\\\right)',\n  // trigonometry\n  acos: {\n    1: '\\\\cos^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  acosh: {\n    1: '\\\\cosh^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  acot: {\n    1: '\\\\cot^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  acoth: {\n    1: '\\\\coth^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  acsc: {\n    1: '\\\\csc^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  acsch: {\n    1: '\\\\mathrm{csch}^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  asec: {\n    1: '\\\\sec^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  asech: {\n    1: '\\\\mathrm{sech}^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  asin: {\n    1: '\\\\sin^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  asinh: {\n    1: '\\\\sinh^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  atan: {\n    1: '\\\\tan^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  atan2: {\n    2: '\\\\mathrm{atan2}\\\\left(${args}\\\\right)'\n  },\n  atanh: {\n    1: '\\\\tanh^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  cos: {\n    1: '\\\\cos\\\\left(${args[0]}\\\\right)'\n  },\n  cosh: {\n    1: '\\\\cosh\\\\left(${args[0]}\\\\right)'\n  },\n  cot: {\n    1: '\\\\cot\\\\left(${args[0]}\\\\right)'\n  },\n  coth: {\n    1: '\\\\coth\\\\left(${args[0]}\\\\right)'\n  },\n  csc: {\n    1: '\\\\csc\\\\left(${args[0]}\\\\right)'\n  },\n  csch: {\n    1: '\\\\mathrm{csch}\\\\left(${args[0]}\\\\right)'\n  },\n  sec: {\n    1: '\\\\sec\\\\left(${args[0]}\\\\right)'\n  },\n  sech: {\n    1: '\\\\mathrm{sech}\\\\left(${args[0]}\\\\right)'\n  },\n  sin: {\n    1: '\\\\sin\\\\left(${args[0]}\\\\right)'\n  },\n  sinh: {\n    1: '\\\\sinh\\\\left(${args[0]}\\\\right)'\n  },\n  tan: {\n    1: '\\\\tan\\\\left(${args[0]}\\\\right)'\n  },\n  tanh: {\n    1: '\\\\tanh\\\\left(${args[0]}\\\\right)'\n  },\n  // unit\n  to: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.to, \"${args[1]}\\\\right)\")\n  },\n  // utils\n  numeric: function numeric(node, options) {\n    // Not sure if this is strictly right but should work correctly for the vast majority of use cases.\n    return node.args[0].toTex();\n  },\n  // type\n  number: {\n    0: '0',\n    1: '\\\\left(${args[0]}\\\\right)',\n    2: '\\\\left(\\\\left(${args[0]}\\\\right)${args[1]}\\\\right)'\n  },\n  string: {\n    0: '\\\\mathtt{\"\"}',\n    1: '\\\\mathrm{string}\\\\left(${args[0]}\\\\right)'\n  },\n  bignumber: {\n    0: '0',\n    1: '\\\\left(${args[0]}\\\\right)'\n  },\n  complex: {\n    0: '0',\n    1: '\\\\left(${args[0]}\\\\right)',\n    2: \"\\\\left(\\\\left(${args[0]}\\\\right)+\".concat(latexSymbols.i, \"\\\\cdot\\\\left(${args[1]}\\\\right)\\\\right)\")\n  },\n  matrix: {\n    0: '\\\\begin{bmatrix}\\\\end{bmatrix}',\n    1: '\\\\left(${args[0]}\\\\right)',\n    2: '\\\\left(${args[0]}\\\\right)'\n  },\n  sparse: {\n    0: '\\\\begin{bsparse}\\\\end{bsparse}',\n    1: '\\\\left(${args[0]}\\\\right)'\n  },\n  unit: {\n    1: '\\\\left(${args[0]}\\\\right)',\n    2: '\\\\left(\\\\left(${args[0]}\\\\right)${args[1]}\\\\right)'\n  }\n};\nexport var defaultTemplate = '\\\\mathrm{${name}}\\\\left(${args}\\\\right)';\nvar latexUnits = {\n  deg: '^\\\\circ'\n};\nexport function escapeLatex(string) {\n  return escapeLatexLib(string, {\n    preserveFormatting: true\n  });\n} // @param {string} name\n// @param {boolean} isUnit\n\nexport function toSymbol(name, isUnit) {\n  isUnit = typeof isUnit === 'undefined' ? false : isUnit;\n\n  if (isUnit) {\n    if (hasOwnProperty(latexUnits, name)) {\n      return latexUnits[name];\n    }\n\n    return '\\\\mathrm{' + escapeLatex(name) + '}';\n  }\n\n  if (hasOwnProperty(latexSymbols, name)) {\n    return latexSymbols[name];\n  }\n\n  return escapeLatex(name);\n}","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/utils/latex.js"],"names":["escapeLatexLib","hasOwnProperty","latexSymbols","Alpha","alpha","Beta","beta","Gamma","gamma","Delta","delta","Epsilon","epsilon","varepsilon","Zeta","zeta","Eta","eta","Theta","theta","vartheta","Iota","iota","Kappa","kappa","varkappa","Lambda","lambda","Mu","mu","Nu","nu","Xi","xi","Omicron","omicron","Pi","pi","varpi","Rho","rho","varrho","Sigma","sigma","varsigma","Tau","tau","Upsilon","upsilon","Phi","phi","varphi","Chi","chi","Psi","psi","Omega","omega","i","inf","Inf","infinity","Infinity","oo","lim","undefined","latexOperators","transpose","ctranspose","factorial","pow","dotPow","unaryPlus","unaryMinus","bitNot","not","multiply","divide","dotMultiply","dotDivide","mod","add","subtract","to","leftShift","rightArithShift","rightLogShift","equal","unequal","smaller","larger","smallerEq","largerEq","bitAnd","bitXor","bitOr","and","xor","or","latexFunctions","abs","concat","cbrt","ceil","cube","exp","expm1","fix","floor","gcd","hypot","log","log10","log1p","log2","norm","nthRoot","nthRoots","round","sign","sqrt","square","bellNumbers","catalan","stirlingS2","arg","conj","im","re","cross","det","dot","expm","inv","sqrtm","trace","combinations","combinationsWithRep","erf","max","min","variance","acos","acosh","acot","acoth","acsc","acsch","asec","asech","asin","asinh","atan","atan2","atanh","cos","cosh","cot","coth","csc","csch","sec","sech","sin","sinh","tan","tanh","numeric","node","options","args","toTex","number","string","bignumber","complex","matrix","sparse","unit","defaultTemplate","latexUnits","deg","escapeLatex","preserveFormatting","toSymbol","name","isUnit"],"mappings":"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","sourcesContent":["/* eslint no-template-curly-in-string: \"off\" */\nimport escapeLatexLib from 'escape-latex';\nimport { hasOwnProperty } from './object';\nexport var latexSymbols = {\n  // GREEK LETTERS\n  Alpha: 'A',\n  alpha: '\\\\alpha',\n  Beta: 'B',\n  beta: '\\\\beta',\n  Gamma: '\\\\Gamma',\n  gamma: '\\\\gamma',\n  Delta: '\\\\Delta',\n  delta: '\\\\delta',\n  Epsilon: 'E',\n  epsilon: '\\\\epsilon',\n  varepsilon: '\\\\varepsilon',\n  Zeta: 'Z',\n  zeta: '\\\\zeta',\n  Eta: 'H',\n  eta: '\\\\eta',\n  Theta: '\\\\Theta',\n  theta: '\\\\theta',\n  vartheta: '\\\\vartheta',\n  Iota: 'I',\n  iota: '\\\\iota',\n  Kappa: 'K',\n  kappa: '\\\\kappa',\n  varkappa: '\\\\varkappa',\n  Lambda: '\\\\Lambda',\n  lambda: '\\\\lambda',\n  Mu: 'M',\n  mu: '\\\\mu',\n  Nu: 'N',\n  nu: '\\\\nu',\n  Xi: '\\\\Xi',\n  xi: '\\\\xi',\n  Omicron: 'O',\n  omicron: 'o',\n  Pi: '\\\\Pi',\n  pi: '\\\\pi',\n  varpi: '\\\\varpi',\n  Rho: 'P',\n  rho: '\\\\rho',\n  varrho: '\\\\varrho',\n  Sigma: '\\\\Sigma',\n  sigma: '\\\\sigma',\n  varsigma: '\\\\varsigma',\n  Tau: 'T',\n  tau: '\\\\tau',\n  Upsilon: \"\\\\Upsilon\",\n  upsilon: \"\\\\upsilon\",\n  Phi: '\\\\Phi',\n  phi: '\\\\phi',\n  varphi: '\\\\varphi',\n  Chi: 'X',\n  chi: '\\\\chi',\n  Psi: '\\\\Psi',\n  psi: '\\\\psi',\n  Omega: '\\\\Omega',\n  omega: '\\\\omega',\n  // logic\n  \"true\": '\\\\mathrm{True}',\n  \"false\": '\\\\mathrm{False}',\n  // other\n  i: 'i',\n  // TODO use \\i ??\n  inf: '\\\\infty',\n  Inf: '\\\\infty',\n  infinity: '\\\\infty',\n  Infinity: '\\\\infty',\n  oo: '\\\\infty',\n  lim: '\\\\lim',\n  undefined: '\\\\mathbf{?}'\n};\nexport var latexOperators = {\n  transpose: '^\\\\top',\n  ctranspose: '^H',\n  factorial: '!',\n  pow: '^',\n  dotPow: '.^\\\\wedge',\n  // TODO find ideal solution\n  unaryPlus: '+',\n  unaryMinus: '-',\n  bitNot: '\\\\~',\n  // TODO find ideal solution\n  not: '\\\\neg',\n  multiply: '\\\\cdot',\n  divide: '\\\\frac',\n  // TODO how to handle that properly?\n  dotMultiply: '.\\\\cdot',\n  // TODO find ideal solution\n  dotDivide: '.:',\n  // TODO find ideal solution\n  mod: '\\\\mod',\n  add: '+',\n  subtract: '-',\n  to: '\\\\rightarrow',\n  leftShift: '<<',\n  rightArithShift: '>>',\n  rightLogShift: '>>>',\n  equal: '=',\n  unequal: '\\\\neq',\n  smaller: '<',\n  larger: '>',\n  smallerEq: '\\\\leq',\n  largerEq: '\\\\geq',\n  bitAnd: '\\\\&',\n  bitXor: \"\\\\underline{|}\",\n  bitOr: '|',\n  and: '\\\\wedge',\n  xor: '\\\\veebar',\n  or: '\\\\vee'\n};\nexport var latexFunctions = {\n  // arithmetic\n  abs: {\n    1: '\\\\left|${args[0]}\\\\right|'\n  },\n  add: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.add, \"${args[1]}\\\\right)\")\n  },\n  cbrt: {\n    1: '\\\\sqrt[3]{${args[0]}}'\n  },\n  ceil: {\n    1: '\\\\left\\\\lceil${args[0]}\\\\right\\\\rceil'\n  },\n  cube: {\n    1: '\\\\left(${args[0]}\\\\right)^3'\n  },\n  divide: {\n    2: '\\\\frac{${args[0]}}{${args[1]}}'\n  },\n  dotDivide: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.dotDivide, \"${args[1]}\\\\right)\")\n  },\n  dotMultiply: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.dotMultiply, \"${args[1]}\\\\right)\")\n  },\n  dotPow: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.dotPow, \"${args[1]}\\\\right)\")\n  },\n  exp: {\n    1: '\\\\exp\\\\left(${args[0]}\\\\right)'\n  },\n  expm1: \"\\\\left(e\".concat(latexOperators.pow, \"{${args[0]}}-1\\\\right)\"),\n  fix: {\n    1: '\\\\mathrm{${name}}\\\\left(${args[0]}\\\\right)'\n  },\n  floor: {\n    1: '\\\\left\\\\lfloor${args[0]}\\\\right\\\\rfloor'\n  },\n  gcd: '\\\\gcd\\\\left(${args}\\\\right)',\n  hypot: '\\\\hypot\\\\left(${args}\\\\right)',\n  log: {\n    1: '\\\\ln\\\\left(${args[0]}\\\\right)',\n    2: '\\\\log_{${args[1]}}\\\\left(${args[0]}\\\\right)'\n  },\n  log10: {\n    1: '\\\\log_{10}\\\\left(${args[0]}\\\\right)'\n  },\n  log1p: {\n    1: '\\\\ln\\\\left(${args[0]}+1\\\\right)',\n    2: '\\\\log_{${args[1]}}\\\\left(${args[0]}+1\\\\right)'\n  },\n  log2: '\\\\log_{2}\\\\left(${args[0]}\\\\right)',\n  mod: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.mod, \"${args[1]}\\\\right)\")\n  },\n  multiply: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.multiply, \"${args[1]}\\\\right)\")\n  },\n  norm: {\n    1: '\\\\left\\\\|${args[0]}\\\\right\\\\|',\n    2: undefined // use default template\n\n  },\n  nthRoot: {\n    2: '\\\\sqrt[${args[1]}]{${args[0]}}'\n  },\n  nthRoots: {\n    2: '\\\\{y : $y^{args[1]} = {${args[0]}}\\\\}'\n  },\n  pow: {\n    2: \"\\\\left(${args[0]}\\\\right)\".concat(latexOperators.pow, \"{${args[1]}}\")\n  },\n  round: {\n    1: '\\\\left\\\\lfloor${args[0]}\\\\right\\\\rceil',\n    2: undefined // use default template\n\n  },\n  sign: {\n    1: '\\\\mathrm{${name}}\\\\left(${args[0]}\\\\right)'\n  },\n  sqrt: {\n    1: '\\\\sqrt{${args[0]}}'\n  },\n  square: {\n    1: '\\\\left(${args[0]}\\\\right)^2'\n  },\n  subtract: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.subtract, \"${args[1]}\\\\right)\")\n  },\n  unaryMinus: {\n    1: \"\".concat(latexOperators.unaryMinus, \"\\\\left(${args[0]}\\\\right)\")\n  },\n  unaryPlus: {\n    1: \"\".concat(latexOperators.unaryPlus, \"\\\\left(${args[0]}\\\\right)\")\n  },\n  // bitwise\n  bitAnd: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.bitAnd, \"${args[1]}\\\\right)\")\n  },\n  bitNot: {\n    1: latexOperators.bitNot + '\\\\left(${args[0]}\\\\right)'\n  },\n  bitOr: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.bitOr, \"${args[1]}\\\\right)\")\n  },\n  bitXor: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.bitXor, \"${args[1]}\\\\right)\")\n  },\n  leftShift: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.leftShift, \"${args[1]}\\\\right)\")\n  },\n  rightArithShift: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.rightArithShift, \"${args[1]}\\\\right)\")\n  },\n  rightLogShift: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.rightLogShift, \"${args[1]}\\\\right)\")\n  },\n  // combinatorics\n  bellNumbers: {\n    1: '\\\\mathrm{B}_{${args[0]}}'\n  },\n  catalan: {\n    1: '\\\\mathrm{C}_{${args[0]}}'\n  },\n  stirlingS2: {\n    2: '\\\\mathrm{S}\\\\left(${args}\\\\right)'\n  },\n  // complex\n  arg: {\n    1: '\\\\arg\\\\left(${args[0]}\\\\right)'\n  },\n  conj: {\n    1: '\\\\left(${args[0]}\\\\right)^*'\n  },\n  im: {\n    1: '\\\\Im\\\\left\\\\lbrace${args[0]}\\\\right\\\\rbrace'\n  },\n  re: {\n    1: '\\\\Re\\\\left\\\\lbrace${args[0]}\\\\right\\\\rbrace'\n  },\n  // logical\n  and: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.and, \"${args[1]}\\\\right)\")\n  },\n  not: {\n    1: latexOperators.not + '\\\\left(${args[0]}\\\\right)'\n  },\n  or: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.or, \"${args[1]}\\\\right)\")\n  },\n  xor: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.xor, \"${args[1]}\\\\right)\")\n  },\n  // matrix\n  cross: {\n    2: '\\\\left(${args[0]}\\\\right)\\\\times\\\\left(${args[1]}\\\\right)'\n  },\n  ctranspose: {\n    1: \"\\\\left(${args[0]}\\\\right)\".concat(latexOperators.ctranspose)\n  },\n  det: {\n    1: '\\\\det\\\\left(${args[0]}\\\\right)'\n  },\n  dot: {\n    2: '\\\\left(${args[0]}\\\\cdot${args[1]}\\\\right)'\n  },\n  expm: {\n    1: '\\\\exp\\\\left(${args[0]}\\\\right)'\n  },\n  inv: {\n    1: '\\\\left(${args[0]}\\\\right)^{-1}'\n  },\n  sqrtm: {\n    1: \"{${args[0]}}\".concat(latexOperators.pow, \"{\\\\frac{1}{2}}\")\n  },\n  trace: {\n    1: '\\\\mathrm{tr}\\\\left(${args[0]}\\\\right)'\n  },\n  transpose: {\n    1: \"\\\\left(${args[0]}\\\\right)\".concat(latexOperators.transpose)\n  },\n  // probability\n  combinations: {\n    2: '\\\\binom{${args[0]}}{${args[1]}}'\n  },\n  combinationsWithRep: {\n    2: '\\\\left(\\\\!\\\\!{\\\\binom{${args[0]}}{${args[1]}}}\\\\!\\\\!\\\\right)'\n  },\n  factorial: {\n    1: \"\\\\left(${args[0]}\\\\right)\".concat(latexOperators.factorial)\n  },\n  gamma: {\n    1: '\\\\Gamma\\\\left(${args[0]}\\\\right)'\n  },\n  // relational\n  equal: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.equal, \"${args[1]}\\\\right)\")\n  },\n  larger: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.larger, \"${args[1]}\\\\right)\")\n  },\n  largerEq: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.largerEq, \"${args[1]}\\\\right)\")\n  },\n  smaller: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.smaller, \"${args[1]}\\\\right)\")\n  },\n  smallerEq: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.smallerEq, \"${args[1]}\\\\right)\")\n  },\n  unequal: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.unequal, \"${args[1]}\\\\right)\")\n  },\n  // special\n  erf: {\n    1: 'erf\\\\left(${args[0]}\\\\right)'\n  },\n  // statistics\n  max: '\\\\max\\\\left(${args}\\\\right)',\n  min: '\\\\min\\\\left(${args}\\\\right)',\n  variance: '\\\\mathrm{Var}\\\\left(${args}\\\\right)',\n  // trigonometry\n  acos: {\n    1: '\\\\cos^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  acosh: {\n    1: '\\\\cosh^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  acot: {\n    1: '\\\\cot^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  acoth: {\n    1: '\\\\coth^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  acsc: {\n    1: '\\\\csc^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  acsch: {\n    1: '\\\\mathrm{csch}^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  asec: {\n    1: '\\\\sec^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  asech: {\n    1: '\\\\mathrm{sech}^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  asin: {\n    1: '\\\\sin^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  asinh: {\n    1: '\\\\sinh^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  atan: {\n    1: '\\\\tan^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  atan2: {\n    2: '\\\\mathrm{atan2}\\\\left(${args}\\\\right)'\n  },\n  atanh: {\n    1: '\\\\tanh^{-1}\\\\left(${args[0]}\\\\right)'\n  },\n  cos: {\n    1: '\\\\cos\\\\left(${args[0]}\\\\right)'\n  },\n  cosh: {\n    1: '\\\\cosh\\\\left(${args[0]}\\\\right)'\n  },\n  cot: {\n    1: '\\\\cot\\\\left(${args[0]}\\\\right)'\n  },\n  coth: {\n    1: '\\\\coth\\\\left(${args[0]}\\\\right)'\n  },\n  csc: {\n    1: '\\\\csc\\\\left(${args[0]}\\\\right)'\n  },\n  csch: {\n    1: '\\\\mathrm{csch}\\\\left(${args[0]}\\\\right)'\n  },\n  sec: {\n    1: '\\\\sec\\\\left(${args[0]}\\\\right)'\n  },\n  sech: {\n    1: '\\\\mathrm{sech}\\\\left(${args[0]}\\\\right)'\n  },\n  sin: {\n    1: '\\\\sin\\\\left(${args[0]}\\\\right)'\n  },\n  sinh: {\n    1: '\\\\sinh\\\\left(${args[0]}\\\\right)'\n  },\n  tan: {\n    1: '\\\\tan\\\\left(${args[0]}\\\\right)'\n  },\n  tanh: {\n    1: '\\\\tanh\\\\left(${args[0]}\\\\right)'\n  },\n  // unit\n  to: {\n    2: \"\\\\left(${args[0]}\".concat(latexOperators.to, \"${args[1]}\\\\right)\")\n  },\n  // utils\n  numeric: function numeric(node, options) {\n    // Not sure if this is strictly right but should work correctly for the vast majority of use cases.\n    return node.args[0].toTex();\n  },\n  // type\n  number: {\n    0: '0',\n    1: '\\\\left(${args[0]}\\\\right)',\n    2: '\\\\left(\\\\left(${args[0]}\\\\right)${args[1]}\\\\right)'\n  },\n  string: {\n    0: '\\\\mathtt{\"\"}',\n    1: '\\\\mathrm{string}\\\\left(${args[0]}\\\\right)'\n  },\n  bignumber: {\n    0: '0',\n    1: '\\\\left(${args[0]}\\\\right)'\n  },\n  complex: {\n    0: '0',\n    1: '\\\\left(${args[0]}\\\\right)',\n    2: \"\\\\left(\\\\left(${args[0]}\\\\right)+\".concat(latexSymbols.i, \"\\\\cdot\\\\left(${args[1]}\\\\right)\\\\right)\")\n  },\n  matrix: {\n    0: '\\\\begin{bmatrix}\\\\end{bmatrix}',\n    1: '\\\\left(${args[0]}\\\\right)',\n    2: '\\\\left(${args[0]}\\\\right)'\n  },\n  sparse: {\n    0: '\\\\begin{bsparse}\\\\end{bsparse}',\n    1: '\\\\left(${args[0]}\\\\right)'\n  },\n  unit: {\n    1: '\\\\left(${args[0]}\\\\right)',\n    2: '\\\\left(\\\\left(${args[0]}\\\\right)${args[1]}\\\\right)'\n  }\n};\nexport var defaultTemplate = '\\\\mathrm{${name}}\\\\left(${args}\\\\right)';\nvar latexUnits = {\n  deg: '^\\\\circ'\n};\nexport function escapeLatex(string) {\n  return escapeLatexLib(string, {\n    preserveFormatting: true\n  });\n} // @param {string} name\n// @param {boolean} isUnit\n\nexport function toSymbol(name, isUnit) {\n  isUnit = typeof isUnit === 'undefined' ? false : isUnit;\n\n  if (isUnit) {\n    if (hasOwnProperty(latexUnits, name)) {\n      return latexUnits[name];\n    }\n\n    return '\\\\mathrm{' + escapeLatex(name) + '}';\n  }\n\n  if (hasOwnProperty(latexSymbols, name)) {\n    return latexSymbols[name];\n  }\n\n  return escapeLatex(name);\n}"]},"metadata":{},"sourceType":"module"}