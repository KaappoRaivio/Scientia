{"ast":null,"code":"import { arraySize as size } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nvar name = 'dot';\nvar dependencies = ['typed', 'add', 'multiply'];\nexport var createDot = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      multiply = _ref.multiply;\n  /**\n   * Calculate the dot product of two vectors. The dot product of\n   * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:\n   *\n   *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn\n   *\n   * Syntax:\n   *\n   *    math.dot(x, y)\n   *\n   * Examples:\n   *\n   *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15\n   *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15\n   *\n   * See also:\n   *\n   *    multiply, cross\n   *\n   * @param  {Array | Matrix} x     First vector\n   * @param  {Array | Matrix} y     Second vector\n   * @return {number}               Returns the dot product of `x` and `y`\n   */\n\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      return _dot(x.toArray(), y.toArray());\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      return _dot(x.toArray(), y);\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      return _dot(x, y.toArray());\n    },\n    'Array, Array': _dot\n  });\n  /**\n   * Calculate the dot product for two arrays\n   * @param {Array} x  First vector\n   * @param {Array} y  Second vector\n   * @returns {number} Returns the dot product of x and y\n   * @private\n   */\n  // TODO: double code with math.multiply\n\n  function _dot(x, y) {\n    var xSize = size(x);\n    var ySize = size(y);\n    var len = xSize[0];\n    if (xSize.length !== 1 || ySize.length !== 1) throw new RangeError('Vector expected'); // TODO: better error message\n\n    if (xSize[0] !== ySize[0]) throw new RangeError('Vectors must have equal length (' + xSize[0] + ' != ' + ySize[0] + ')');\n    if (len === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');\n    var prod = 0;\n\n    for (var i = 0; i < len; i++) {\n      prod = add(prod, multiply(x[i], y[i]));\n    }\n\n    return prod;\n  }\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/matrix/dot.js"],"names":["arraySize","size","factory","name","dependencies","createDot","_ref","typed","add","multiply","MatrixMatrix","x","y","_dot","toArray","MatrixArray","ArrayMatrix","xSize","ySize","len","length","RangeError","prod","i"],"mappings":"AAAA,SAASA,SAAS,IAAIC,IAAtB,QAAkC,mBAAlC;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,UAAjB,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAChF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,GAAG,GAAGF,IAAI,CAACE,GADf;AAAA,MAEIC,QAAQ,GAAGH,IAAI,CAACG,QAFpB;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAOF,KAAK,CAACJ,IAAD,EAAO;AACjB,sBAAkB,SAASO,YAAT,CAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AAC5C,aAAOC,IAAI,CAACF,CAAC,CAACG,OAAF,EAAD,EAAcF,CAAC,CAACE,OAAF,EAAd,CAAX;AACD,KAHgB;AAIjB,qBAAiB,SAASC,WAAT,CAAqBJ,CAArB,EAAwBC,CAAxB,EAA2B;AAC1C,aAAOC,IAAI,CAACF,CAAC,CAACG,OAAF,EAAD,EAAcF,CAAd,CAAX;AACD,KANgB;AAOjB,qBAAiB,SAASI,WAAT,CAAqBL,CAArB,EAAwBC,CAAxB,EAA2B;AAC1C,aAAOC,IAAI,CAACF,CAAD,EAAIC,CAAC,CAACE,OAAF,EAAJ,CAAX;AACD,KATgB;AAUjB,oBAAgBD;AAVC,GAAP,CAAZ;AAYA;;;;;;;AAOA;;AAEA,WAASA,IAAT,CAAcF,CAAd,EAAiBC,CAAjB,EAAoB;AAClB,QAAIK,KAAK,GAAGhB,IAAI,CAACU,CAAD,CAAhB;AACA,QAAIO,KAAK,GAAGjB,IAAI,CAACW,CAAD,CAAhB;AACA,QAAIO,GAAG,GAAGF,KAAK,CAAC,CAAD,CAAf;AACA,QAAIA,KAAK,CAACG,MAAN,KAAiB,CAAjB,IAAsBF,KAAK,CAACE,MAAN,KAAiB,CAA3C,EAA8C,MAAM,IAAIC,UAAJ,CAAe,iBAAf,CAAN,CAJ5B,CAIqE;;AAEvF,QAAIJ,KAAK,CAAC,CAAD,CAAL,KAAaC,KAAK,CAAC,CAAD,CAAtB,EAA2B,MAAM,IAAIG,UAAJ,CAAe,qCAAqCJ,KAAK,CAAC,CAAD,CAA1C,GAAgD,MAAhD,GAAyDC,KAAK,CAAC,CAAD,CAA9D,GAAoE,GAAnF,CAAN;AAC3B,QAAIC,GAAG,KAAK,CAAZ,EAAe,MAAM,IAAIE,UAAJ,CAAe,mDAAf,CAAN;AACf,QAAIC,IAAI,GAAG,CAAX;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAApB,EAAyBI,CAAC,EAA1B,EAA8B;AAC5BD,MAAAA,IAAI,GAAGd,GAAG,CAACc,IAAD,EAAOb,QAAQ,CAACE,CAAC,CAACY,CAAD,CAAF,EAAOX,CAAC,CAACW,CAAD,CAAR,CAAf,CAAV;AACD;;AAED,WAAOD,IAAP;AACD;AACF,CAjE4C,CAAtC","sourcesContent":["import { arraySize as size } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nvar name = 'dot';\nvar dependencies = ['typed', 'add', 'multiply'];\nexport var createDot = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      multiply = _ref.multiply;\n\n  /**\n   * Calculate the dot product of two vectors. The dot product of\n   * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:\n   *\n   *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn\n   *\n   * Syntax:\n   *\n   *    math.dot(x, y)\n   *\n   * Examples:\n   *\n   *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15\n   *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15\n   *\n   * See also:\n   *\n   *    multiply, cross\n   *\n   * @param  {Array | Matrix} x     First vector\n   * @param  {Array | Matrix} y     Second vector\n   * @return {number}               Returns the dot product of `x` and `y`\n   */\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      return _dot(x.toArray(), y.toArray());\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      return _dot(x.toArray(), y);\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      return _dot(x, y.toArray());\n    },\n    'Array, Array': _dot\n  });\n  /**\n   * Calculate the dot product for two arrays\n   * @param {Array} x  First vector\n   * @param {Array} y  Second vector\n   * @returns {number} Returns the dot product of x and y\n   * @private\n   */\n  // TODO: double code with math.multiply\n\n  function _dot(x, y) {\n    var xSize = size(x);\n    var ySize = size(y);\n    var len = xSize[0];\n    if (xSize.length !== 1 || ySize.length !== 1) throw new RangeError('Vector expected'); // TODO: better error message\n\n    if (xSize[0] !== ySize[0]) throw new RangeError('Vectors must have equal length (' + xSize[0] + ' != ' + ySize[0] + ')');\n    if (len === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');\n    var prod = 0;\n\n    for (var i = 0; i < len; i++) {\n      prod = add(prod, multiply(x[i], y[i]));\n    }\n\n    return prod;\n  }\n});"]},"metadata":{},"sourceType":"module"}