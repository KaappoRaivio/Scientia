{"ast":null,"code":"import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual';\nimport { nearlyEqual } from '../../utils/number';\nimport { factory } from '../../utils/factory';\nimport { complexEquals } from '../../utils/complex';\nvar name = 'equalScalar';\nvar dependencies = ['typed', 'config'];\nexport var createEqualScalar = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config;\n  /**\n   * Test whether two scalar values are nearly equal.\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n\n  var equalScalar = typed(name, {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.equals(y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return complexEquals(x, y, config.epsilon);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return equalScalar(x.value, y.value);\n    }\n  });\n  return equalScalar;\n});\nexport var createEqualScalarNumber = factory(name, ['typed', 'config'], function (_ref2) {\n  var typed = _ref2.typed,\n      config = _ref2.config;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/relational/equalScalar.js"],"names":["nearlyEqual","bigNearlyEqual","factory","complexEquals","name","dependencies","createEqualScalar","_ref","typed","config","equalScalar","booleanBoolean","x","y","numberNumber","epsilon","BigNumberBigNumber","eq","FractionFraction","equals","ComplexComplex","UnitUnit","equalBase","Error","value","createEqualScalarNumber","_ref2"],"mappings":"AAAA,SAASA,WAAW,IAAIC,cAAxB,QAA8C,mCAA9C;AACA,SAASD,WAAT,QAA4B,oBAA5B;AACA,SAASE,OAAT,QAAwB,qBAAxB;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,IAAIC,IAAI,GAAG,aAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,CAAnB;AACA,OAAO,IAAIC,iBAAiB,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACxF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAGA;;;;;;;;;AAQA,MAAIC,WAAW,GAAGF,KAAK,CAACJ,IAAD,EAAO;AAC5B,wBAAoB,SAASO,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;AAChD,aAAOD,CAAC,KAAKC,CAAb;AACD,KAH2B;AAI5B,sBAAkB,SAASC,YAAT,CAAsBF,CAAtB,EAAyBC,CAAzB,EAA4B;AAC5C,aAAOb,WAAW,CAACY,CAAD,EAAIC,CAAJ,EAAOJ,MAAM,CAACM,OAAd,CAAlB;AACD,KAN2B;AAO5B,4BAAwB,SAASC,kBAAT,CAA4BJ,CAA5B,EAA+BC,CAA/B,EAAkC;AACxD,aAAOD,CAAC,CAACK,EAAF,CAAKJ,CAAL,KAAWZ,cAAc,CAACW,CAAD,EAAIC,CAAJ,EAAOJ,MAAM,CAACM,OAAd,CAAhC;AACD,KAT2B;AAU5B,0BAAsB,SAASG,gBAAT,CAA0BN,CAA1B,EAA6BC,CAA7B,EAAgC;AACpD,aAAOD,CAAC,CAACO,MAAF,CAASN,CAAT,CAAP;AACD,KAZ2B;AAa5B,wBAAoB,SAASO,cAAT,CAAwBR,CAAxB,EAA2BC,CAA3B,EAA8B;AAChD,aAAOV,aAAa,CAACS,CAAD,EAAIC,CAAJ,EAAOJ,MAAM,CAACM,OAAd,CAApB;AACD,KAf2B;AAgB5B,kBAAc,SAASM,QAAT,CAAkBT,CAAlB,EAAqBC,CAArB,EAAwB;AACpC,UAAI,CAACD,CAAC,CAACU,SAAF,CAAYT,CAAZ,CAAL,EAAqB;AACnB,cAAM,IAAIU,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAED,aAAOb,WAAW,CAACE,CAAC,CAACY,KAAH,EAAUX,CAAC,CAACW,KAAZ,CAAlB;AACD;AAtB2B,GAAP,CAAvB;AAwBA,SAAOd,WAAP;AACD,CArCoD,CAA9C;AAsCP,OAAO,IAAIe,uBAAuB,GAAGvB,OAAO,CAACE,IAAD,EAAO,CAAC,OAAD,EAAU,QAAV,CAAP,EAA4B,UAAUsB,KAAV,EAAiB;AACvF,MAAIlB,KAAK,GAAGkB,KAAK,CAAClB,KAAlB;AAAA,MACIC,MAAM,GAAGiB,KAAK,CAACjB,MADnB;AAEA,SAAOD,KAAK,CAACJ,IAAD,EAAO;AACjB,sBAAkB,SAASU,YAAT,CAAsBF,CAAtB,EAAyBC,CAAzB,EAA4B;AAC5C,aAAOb,WAAW,CAACY,CAAD,EAAIC,CAAJ,EAAOJ,MAAM,CAACM,OAAd,CAAlB;AACD;AAHgB,GAAP,CAAZ;AAKD,CAR2C,CAArC","sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual';\nimport { nearlyEqual } from '../../utils/number';\nimport { factory } from '../../utils/factory';\nimport { complexEquals } from '../../utils/complex';\nvar name = 'equalScalar';\nvar dependencies = ['typed', 'config'];\nexport var createEqualScalar = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config;\n\n  /**\n   * Test whether two scalar values are nearly equal.\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n  var equalScalar = typed(name, {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.equals(y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return complexEquals(x, y, config.epsilon);\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return equalScalar(x.value, y.value);\n    }\n  });\n  return equalScalar;\n});\nexport var createEqualScalarNumber = factory(name, ['typed', 'config'], function (_ref2) {\n  var typed = _ref2.typed,\n      config = _ref2.config;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}