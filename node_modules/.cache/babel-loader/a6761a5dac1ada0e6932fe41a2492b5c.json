{"ast":null,"code":"import { flatten } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nvar name = 'mode';\nvar dependencies = ['typed', 'isNaN', 'isNumeric'];\nexport var createMode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      isNaN = _ref.isNaN,\n      isNumeric = _ref.isNumeric;\n  /**\n  * Computes the mode of a set of numbers or a list with values(numbers or characters).\n  * If there are more than one modes, it returns a list of those values.\n  *\n  * Syntax:\n  *\n  *     math.mode(a, b, c, ...)\n  *     math.mode(A)\n  *\n  * Examples:\n  *\n  *     math.mode(2, 1, 4, 3, 1)                            // returns [1]\n  *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]\n  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]\n  *     math.mode('a','a','b','c')                           // returns [\"a\"]\n  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, \"abc\"]\n  *\n  * See also:\n  *\n  *     median,\n  *     mean\n  *\n  * @param {... *} args  A single matrix\n  * @return {*} The mode of all values\n  */\n\n  return typed(name, {\n    'Array | Matrix': _mode,\n    '...': function _(args) {\n      return _mode(args);\n    }\n  });\n  /**\n   * Calculates the mode in an 1-dimensional array\n   * @param {Array} values\n   * @return {Array} mode\n   * @private\n   */\n\n  function _mode(values) {\n    values = flatten(values.valueOf());\n    var num = values.length;\n\n    if (num === 0) {\n      throw new Error('Cannot calculate mode of an empty array');\n    }\n\n    var count = {};\n    var mode = [];\n    var max = 0;\n\n    for (var i = 0; i < values.length; i++) {\n      var value = values[i];\n\n      if (isNumeric(value) && isNaN(value)) {\n        throw new Error('Cannot calculate mode of an array containing NaN values');\n      }\n\n      if (!(value in count)) {\n        count[value] = 0;\n      }\n\n      count[value]++;\n\n      if (count[value] === max) {\n        mode.push(value);\n      } else if (count[value] > max) {\n        max = count[value];\n        mode = [value];\n      }\n    }\n\n    return mode;\n  }\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/statistics/mode.js"],"names":["flatten","factory","name","dependencies","createMode","_ref","typed","isNaN","isNumeric","_mode","_","args","values","valueOf","num","length","Error","count","mode","max","i","value","push"],"mappings":"AAAA,SAASA,OAAT,QAAwB,mBAAxB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,WAAnB,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACjF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,KAAK,GAAGF,IAAI,CAACE,KADjB;AAAA,MAEIC,SAAS,GAAGH,IAAI,CAACG,SAFrB;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAAOF,KAAK,CAACJ,IAAD,EAAO;AACjB,sBAAkBO,KADD;AAEjB,WAAO,SAASC,CAAT,CAAWC,IAAX,EAAiB;AACtB,aAAOF,KAAK,CAACE,IAAD,CAAZ;AACD;AAJgB,GAAP,CAAZ;AAMA;;;;;;;AAOA,WAASF,KAAT,CAAeG,MAAf,EAAuB;AACrBA,IAAAA,MAAM,GAAGZ,OAAO,CAACY,MAAM,CAACC,OAAP,EAAD,CAAhB;AACA,QAAIC,GAAG,GAAGF,MAAM,CAACG,MAAjB;;AAEA,QAAID,GAAG,KAAK,CAAZ,EAAe;AACb,YAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,GAAG,GAAG,CAAV;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,MAAM,CAACG,MAA3B,EAAmCK,CAAC,EAApC,EAAwC;AACtC,UAAIC,KAAK,GAAGT,MAAM,CAACQ,CAAD,CAAlB;;AAEA,UAAIZ,SAAS,CAACa,KAAD,CAAT,IAAoBd,KAAK,CAACc,KAAD,CAA7B,EAAsC;AACpC,cAAM,IAAIL,KAAJ,CAAU,yDAAV,CAAN;AACD;;AAED,UAAI,EAAEK,KAAK,IAAIJ,KAAX,CAAJ,EAAuB;AACrBA,QAAAA,KAAK,CAACI,KAAD,CAAL,GAAe,CAAf;AACD;;AAEDJ,MAAAA,KAAK,CAACI,KAAD,CAAL;;AAEA,UAAIJ,KAAK,CAACI,KAAD,CAAL,KAAiBF,GAArB,EAA0B;AACxBD,QAAAA,IAAI,CAACI,IAAL,CAAUD,KAAV;AACD,OAFD,MAEO,IAAIJ,KAAK,CAACI,KAAD,CAAL,GAAeF,GAAnB,EAAwB;AAC7BA,QAAAA,GAAG,GAAGF,KAAK,CAACI,KAAD,CAAX;AACAH,QAAAA,IAAI,GAAG,CAACG,KAAD,CAAP;AACD;AACF;;AAED,WAAOH,IAAP;AACD;AACF,CA9E6C,CAAvC","sourcesContent":["import { flatten } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nvar name = 'mode';\nvar dependencies = ['typed', 'isNaN', 'isNumeric'];\nexport var createMode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      isNaN = _ref.isNaN,\n      isNumeric = _ref.isNumeric;\n\n  /**\n  * Computes the mode of a set of numbers or a list with values(numbers or characters).\n  * If there are more than one modes, it returns a list of those values.\n  *\n  * Syntax:\n  *\n  *     math.mode(a, b, c, ...)\n  *     math.mode(A)\n  *\n  * Examples:\n  *\n  *     math.mode(2, 1, 4, 3, 1)                            // returns [1]\n  *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]\n  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]\n  *     math.mode('a','a','b','c')                           // returns [\"a\"]\n  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, \"abc\"]\n  *\n  * See also:\n  *\n  *     median,\n  *     mean\n  *\n  * @param {... *} args  A single matrix\n  * @return {*} The mode of all values\n  */\n  return typed(name, {\n    'Array | Matrix': _mode,\n    '...': function _(args) {\n      return _mode(args);\n    }\n  });\n  /**\n   * Calculates the mode in an 1-dimensional array\n   * @param {Array} values\n   * @return {Array} mode\n   * @private\n   */\n\n  function _mode(values) {\n    values = flatten(values.valueOf());\n    var num = values.length;\n\n    if (num === 0) {\n      throw new Error('Cannot calculate mode of an empty array');\n    }\n\n    var count = {};\n    var mode = [];\n    var max = 0;\n\n    for (var i = 0; i < values.length; i++) {\n      var value = values[i];\n\n      if (isNumeric(value) && isNaN(value)) {\n        throw new Error('Cannot calculate mode of an array containing NaN values');\n      }\n\n      if (!(value in count)) {\n        count[value] = 0;\n      }\n\n      count[value]++;\n\n      if (count[value] === max) {\n        mode.push(value);\n      } else if (count[value] > max) {\n        max = count[value];\n        mode = [value];\n      }\n    }\n\n    return mode;\n  }\n});"]},"metadata":{},"sourceType":"module"}