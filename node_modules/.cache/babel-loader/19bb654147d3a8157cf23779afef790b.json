{"ast":null,"code":"import { isFunctionAssignmentNode, isSymbolNode } from '../../utils/is';\nimport { filter, filterRegExp } from '../../utils/array';\nimport { maxArgumentCount } from '../../utils/function';\nimport { compileInlineExpression } from './utils/compileInlineExpression';\nimport { factory } from '../../utils/factory';\nvar name = 'filter';\nvar dependencies = ['typed'];\nexport var createFilterTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Attach a transform function to math.filter\n   * Adds a property transform containing the transform function.\n   *\n   * This transform adds support for equations as test function for math.filter,\n   * so you can do something like 'filter([3, -2, 5], x > 0)'.\n   */\n\n  function filterTransform(args, math, scope) {\n    var x, callback;\n\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n\n    if (args[1]) {\n      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {\n        // a function pointer, like filter([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like filter([3, -2, 5], x > 0)\n        callback = compileInlineExpression(args[1], math, scope);\n      }\n    }\n\n    return filter(x, callback);\n  }\n\n  filterTransform.rawArgs = true; // one based version of function filter\n\n  var filter = typed('filter', {\n    'Array, function': _filter,\n    'Matrix, function': function MatrixFunction(x, test) {\n      return x.create(_filter(x.toArray(), test));\n    },\n    'Array, RegExp': filterRegExp,\n    'Matrix, RegExp': function MatrixRegExp(x, test) {\n      return x.create(filterRegExp(x.toArray(), test));\n    }\n  });\n  return filterTransform;\n}, {\n  isTransformFunction: true\n});\n/**\n * Filter values in a callback given a callback function\n *\n * !!! Passes a one-based index !!!\n *\n * @param {Array} x\n * @param {Function} callback\n * @return {Array} Returns the filtered array\n * @private\n */\n\nfunction _filter(x, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n  return filter(x, function (value, index, array) {\n    // invoke the callback function with the right number of arguments\n    if (args === 1) {\n      return callback(value);\n    } else if (args === 2) {\n      return callback(value, [index + 1]);\n    } else {\n      // 3 or -1\n      return callback(value, [index + 1], array);\n    }\n  });\n}","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/expression/transform/filter.transform.js"],"names":["isFunctionAssignmentNode","isSymbolNode","filter","filterRegExp","maxArgumentCount","compileInlineExpression","factory","name","dependencies","createFilterTransform","_ref","typed","filterTransform","args","math","scope","x","callback","compile","evaluate","rawArgs","_filter","MatrixFunction","test","create","toArray","MatrixRegExp","isTransformFunction","value","index","array"],"mappings":"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","sourcesContent":["import { isFunctionAssignmentNode, isSymbolNode } from '../../utils/is';\nimport { filter, filterRegExp } from '../../utils/array';\nimport { maxArgumentCount } from '../../utils/function';\nimport { compileInlineExpression } from './utils/compileInlineExpression';\nimport { factory } from '../../utils/factory';\nvar name = 'filter';\nvar dependencies = ['typed'];\nexport var createFilterTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Attach a transform function to math.filter\n   * Adds a property transform containing the transform function.\n   *\n   * This transform adds support for equations as test function for math.filter,\n   * so you can do something like 'filter([3, -2, 5], x > 0)'.\n   */\n  function filterTransform(args, math, scope) {\n    var x, callback;\n\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n\n    if (args[1]) {\n      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {\n        // a function pointer, like filter([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like filter([3, -2, 5], x > 0)\n        callback = compileInlineExpression(args[1], math, scope);\n      }\n    }\n\n    return filter(x, callback);\n  }\n\n  filterTransform.rawArgs = true; // one based version of function filter\n\n  var filter = typed('filter', {\n    'Array, function': _filter,\n    'Matrix, function': function MatrixFunction(x, test) {\n      return x.create(_filter(x.toArray(), test));\n    },\n    'Array, RegExp': filterRegExp,\n    'Matrix, RegExp': function MatrixRegExp(x, test) {\n      return x.create(filterRegExp(x.toArray(), test));\n    }\n  });\n  return filterTransform;\n}, {\n  isTransformFunction: true\n});\n/**\n * Filter values in a callback given a callback function\n *\n * !!! Passes a one-based index !!!\n *\n * @param {Array} x\n * @param {Function} callback\n * @return {Array} Returns the filtered array\n * @private\n */\n\nfunction _filter(x, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n  return filter(x, function (value, index, array) {\n    // invoke the callback function with the right number of arguments\n    if (args === 1) {\n      return callback(value);\n    } else if (args === 2) {\n      return callback(value, [index + 1]);\n    } else {\n      // 3 or -1\n      return callback(value, [index + 1], array);\n    }\n  });\n}"]},"metadata":{},"sourceType":"module"}