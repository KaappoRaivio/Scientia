{"ast":null,"code":"import { containsCollections, deepForEach, reduce } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nimport { improveErrorMessage } from './utils/improveErrorMessage';\nimport { noBignumber, noFraction } from '../../utils/noop';\nvar name = 'sum';\nvar dependencies = ['typed', 'config', 'add', '?bignumber', '?fraction'];\nexport var createSum = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      add = _ref.add,\n      bignumber = _ref.bignumber,\n      fraction = _ref.fraction;\n  /**\n   * Compute the sum of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.sum(a, b, c, ...)\n   *     math.sum(A)\n   *\n   * Examples:\n   *\n   *     math.sum(2, 1, 4, 3)               // returns 10\n   *     math.sum([2, 1, 4, 3])             // returns 10\n   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The sum of all values\n   */\n\n  return typed(name, {\n    // sum([a, b, c, d, ...])\n    'Array | Matrix': _sum,\n    // sum([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nsumDim,\n    // sum(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function sum');\n      }\n\n      return _sum(args);\n    }\n  });\n  /**\n   * Recursively calculate the sum of an n-dimensional array\n   * @param {Array} array\n   * @return {number} sum\n   * @private\n   */\n\n  function _sum(array) {\n    var sum;\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'sum', value);\n      }\n    });\n\n    if (sum === undefined) {\n      switch (config.number) {\n        case 'number':\n          return 0;\n\n        case 'BigNumber':\n          return bignumber ? bignumber(0) : noBignumber();\n\n        case 'Fraction':\n          return fraction ? fraction(0) : noFraction();\n\n        default:\n          return 0;\n      }\n    }\n\n    return sum;\n  }\n\n  function _nsumDim(array, dim) {\n    try {\n      var sum = reduce(array, dim, add);\n      return sum;\n    } catch (err) {\n      throw improveErrorMessage(err, 'sum');\n    }\n  }\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/statistics/sum.js"],"names":["containsCollections","deepForEach","reduce","factory","improveErrorMessage","noBignumber","noFraction","name","dependencies","createSum","_ref","typed","config","add","bignumber","fraction","_sum","_nsumDim","_","args","TypeError","array","sum","value","undefined","err","number","dim"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,WAA9B,EAA2CC,MAA3C,QAAyD,wBAAzD;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,mBAAT,QAAoC,6BAApC;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,kBAAxC;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,KAApB,EAA2B,YAA3B,EAAyC,WAAzC,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeN,OAAO,CAACI,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAChF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAAA,MAEIC,GAAG,GAAGH,IAAI,CAACG,GAFf;AAAA,MAGIC,SAAS,GAAGJ,IAAI,CAACI,SAHrB;AAAA,MAIIC,QAAQ,GAAGL,IAAI,CAACK,QAJpB;AAMA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAOJ,KAAK,CAACJ,IAAD,EAAO;AACjB;AACA,sBAAkBS,IAFD;AAGjB;AACA,0CAAsCC,QAJrB;AAKjB;AACA,WAAO,SAASC,CAAT,CAAWC,IAAX,EAAiB;AACtB,UAAInB,mBAAmB,CAACmB,IAAD,CAAvB,EAA+B;AAC7B,cAAM,IAAIC,SAAJ,CAAc,wCAAd,CAAN;AACD;;AAED,aAAOJ,IAAI,CAACG,IAAD,CAAX;AACD;AAZgB,GAAP,CAAZ;AAcA;;;;;;;AAOA,WAASH,IAAT,CAAcK,KAAd,EAAqB;AACnB,QAAIC,GAAJ;AACArB,IAAAA,WAAW,CAACoB,KAAD,EAAQ,UAAUE,KAAV,EAAiB;AAClC,UAAI;AACFD,QAAAA,GAAG,GAAGA,GAAG,KAAKE,SAAR,GAAoBD,KAApB,GAA4BV,GAAG,CAACS,GAAD,EAAMC,KAAN,CAArC;AACD,OAFD,CAEE,OAAOE,GAAP,EAAY;AACZ,cAAMrB,mBAAmB,CAACqB,GAAD,EAAM,KAAN,EAAaF,KAAb,CAAzB;AACD;AACF,KANU,CAAX;;AAQA,QAAID,GAAG,KAAKE,SAAZ,EAAuB;AACrB,cAAQZ,MAAM,CAACc,MAAf;AACE,aAAK,QAAL;AACE,iBAAO,CAAP;;AAEF,aAAK,WAAL;AACE,iBAAOZ,SAAS,GAAGA,SAAS,CAAC,CAAD,CAAZ,GAAkBT,WAAW,EAA7C;;AAEF,aAAK,UAAL;AACE,iBAAOU,QAAQ,GAAGA,QAAQ,CAAC,CAAD,CAAX,GAAiBT,UAAU,EAA1C;;AAEF;AACE,iBAAO,CAAP;AAXJ;AAaD;;AAED,WAAOgB,GAAP;AACD;;AAED,WAASL,QAAT,CAAkBI,KAAlB,EAAyBM,GAAzB,EAA8B;AAC5B,QAAI;AACF,UAAIL,GAAG,GAAGpB,MAAM,CAACmB,KAAD,EAAQM,GAAR,EAAad,GAAb,CAAhB;AACA,aAAOS,GAAP;AACD,KAHD,CAGE,OAAOG,GAAP,EAAY;AACZ,YAAMrB,mBAAmB,CAACqB,GAAD,EAAM,KAAN,CAAzB;AACD;AACF;AACF,CAxF4C,CAAtC","sourcesContent":["import { containsCollections, deepForEach, reduce } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nimport { improveErrorMessage } from './utils/improveErrorMessage';\nimport { noBignumber, noFraction } from '../../utils/noop';\nvar name = 'sum';\nvar dependencies = ['typed', 'config', 'add', '?bignumber', '?fraction'];\nexport var createSum = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      add = _ref.add,\n      bignumber = _ref.bignumber,\n      fraction = _ref.fraction;\n\n  /**\n   * Compute the sum of a matrix or a list with values.\n   * In case of a (multi dimensional) array or matrix, the sum of all\n   * elements will be calculated.\n   *\n   * Syntax:\n   *\n   *     math.sum(a, b, c, ...)\n   *     math.sum(A)\n   *\n   * Examples:\n   *\n   *     math.sum(2, 1, 4, 3)               // returns 10\n   *     math.sum([2, 1, 4, 3])             // returns 10\n   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22\n   *\n   * See also:\n   *\n   *    mean, median, min, max, prod, std, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The sum of all values\n   */\n  return typed(name, {\n    // sum([a, b, c, d, ...])\n    'Array | Matrix': _sum,\n    // sum([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': _nsumDim,\n    // sum(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function sum');\n      }\n\n      return _sum(args);\n    }\n  });\n  /**\n   * Recursively calculate the sum of an n-dimensional array\n   * @param {Array} array\n   * @return {number} sum\n   * @private\n   */\n\n  function _sum(array) {\n    var sum;\n    deepForEach(array, function (value) {\n      try {\n        sum = sum === undefined ? value : add(sum, value);\n      } catch (err) {\n        throw improveErrorMessage(err, 'sum', value);\n      }\n    });\n\n    if (sum === undefined) {\n      switch (config.number) {\n        case 'number':\n          return 0;\n\n        case 'BigNumber':\n          return bignumber ? bignumber(0) : noBignumber();\n\n        case 'Fraction':\n          return fraction ? fraction(0) : noFraction();\n\n        default:\n          return 0;\n      }\n    }\n\n    return sum;\n  }\n\n  function _nsumDim(array, dim) {\n    try {\n      var sum = reduce(array, dim, add);\n      return sum;\n    } catch (err) {\n      throw improveErrorMessage(err, 'sum');\n    }\n  }\n});"]},"metadata":{},"sourceType":"module"}