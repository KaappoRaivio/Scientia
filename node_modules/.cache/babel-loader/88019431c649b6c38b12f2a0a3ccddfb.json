{"ast":null,"code":"import { factory } from '../../../utils/factory';\nimport { DimensionError } from '../../../error/DimensionError';\nvar name = 'algorithm04';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createAlgorithm04 = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n   *          └  B(i,j)       ; B(i,j) !== 0\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  return function algorithm04(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // workspace\n\n    var xa = avalues && bvalues ? [] : undefined;\n    var xb = avalues && bvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // vars\n\n    var i, j, k, k0, k1; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop A(:,j)\n\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k]; // update c\n\n        cindex.push(i); // update workspace\n\n        wa[i] = mark; // check we need to process values\n\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      } // loop B(:,j)\n\n\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k]; // check row exists in A\n\n        if (wa[i] === mark) {\n          // update record in xa @ i\n          if (xa) {\n            // invoke callback\n            var v = cf(xa[i], bvalues[k]); // check for zero\n\n            if (!eq(v, zero)) {\n              // update workspace\n              xa[i] = v;\n            } else {\n              // remove mark (index will be removed later)\n              wa[i] = null;\n            }\n          }\n        } else {\n          // update c\n          cindex.push(i); // update workspace\n\n          wb[i] = mark; // check we need to process values\n\n          if (xb) {\n            xb[i] = bvalues[k];\n          }\n        }\n      } // check we need to process values (non pattern matrix)\n\n\n      if (xa && xb) {\n        // initialize first index in j\n        k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          i = cindex[k]; // check workspace has value @ i\n\n          if (wa[i] === mark) {\n            // push value (Aij != 0 || (Aij != 0 && Bij != 0))\n            cvalues[k] = xa[i]; // increment pointer\n\n            k++;\n          } else if (wb[i] === mark) {\n            // push value (bij != 0)\n            cvalues[k] = xb[i]; // increment pointer\n\n            k++;\n          } else {\n            // remove index @ k\n            cindex.splice(k, 1);\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/type/matrix/utils/algorithm04.js"],"names":["factory","DimensionError","name","dependencies","createAlgorithm04","_ref","typed","equalScalar","algorithm04","a","b","callback","avalues","_values","aindex","_index","aptr","_ptr","asize","_size","adt","_datatype","bvalues","bindex","bptr","bsize","bdt","length","RangeError","rows","columns","dt","eq","zero","cf","find","convert","cvalues","undefined","cindex","cptr","xa","xb","wa","wb","i","j","k","k0","k1","mark","push","v","splice","createSparseMatrix","values","index","ptr","size","datatype"],"mappings":"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","sourcesContent":["import { factory } from '../../../utils/factory';\nimport { DimensionError } from '../../../error/DimensionError';\nvar name = 'algorithm04';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createAlgorithm04 = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      equalScalar = _ref.equalScalar;\n\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0\n   *          └  B(i,j)       ; B(i,j) !== 0\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm04(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // workspace\n\n    var xa = avalues && bvalues ? [] : undefined;\n    var xb = avalues && bvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // vars\n\n    var i, j, k, k0, k1; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop A(:,j)\n\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k]; // update c\n\n        cindex.push(i); // update workspace\n\n        wa[i] = mark; // check we need to process values\n\n        if (xa) {\n          xa[i] = avalues[k];\n        }\n      } // loop B(:,j)\n\n\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k]; // check row exists in A\n\n        if (wa[i] === mark) {\n          // update record in xa @ i\n          if (xa) {\n            // invoke callback\n            var v = cf(xa[i], bvalues[k]); // check for zero\n\n            if (!eq(v, zero)) {\n              // update workspace\n              xa[i] = v;\n            } else {\n              // remove mark (index will be removed later)\n              wa[i] = null;\n            }\n          }\n        } else {\n          // update c\n          cindex.push(i); // update workspace\n\n          wb[i] = mark; // check we need to process values\n\n          if (xb) {\n            xb[i] = bvalues[k];\n          }\n        }\n      } // check we need to process values (non pattern matrix)\n\n\n      if (xa && xb) {\n        // initialize first index in j\n        k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          i = cindex[k]; // check workspace has value @ i\n\n          if (wa[i] === mark) {\n            // push value (Aij != 0 || (Aij != 0 && Bij != 0))\n            cvalues[k] = xa[i]; // increment pointer\n\n            k++;\n          } else if (wb[i] === mark) {\n            // push value (bij != 0)\n            cvalues[k] = xb[i]; // increment pointer\n\n            k++;\n          } else {\n            // remove index @ k\n            cindex.splice(k, 1);\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});"]},"metadata":{},"sourceType":"module"}