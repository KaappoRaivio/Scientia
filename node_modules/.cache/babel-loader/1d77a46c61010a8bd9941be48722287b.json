{"ast":null,"code":"import { isInteger } from '../../utils/number';\nimport { factory } from '../../utils/factory';\nimport { createSimplifyConstant } from './simplify/simplifyConstant';\nimport { createSimplifyCore } from './simplify/simplifyCore';\nvar name = 'rationalize';\nvar dependencies = ['config', 'typed', 'equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'parse', 'simplify', '?bignumber', '?fraction', 'mathWithTransform', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode', 'ParenthesisNode'];\nexport var createRationalize = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var config = _ref.config,\n      typed = _ref.typed,\n      equal = _ref.equal,\n      isZero = _ref.isZero,\n      add = _ref.add,\n      subtract = _ref.subtract,\n      multiply = _ref.multiply,\n      divide = _ref.divide,\n      pow = _ref.pow,\n      parse = _ref.parse,\n      simplify = _ref.simplify,\n      fraction = _ref.fraction,\n      bignumber = _ref.bignumber,\n      mathWithTransform = _ref.mathWithTransform,\n      ConstantNode = _ref.ConstantNode,\n      OperatorNode = _ref.OperatorNode,\n      FunctionNode = _ref.FunctionNode,\n      SymbolNode = _ref.SymbolNode,\n      ParenthesisNode = _ref.ParenthesisNode;\n  var simplifyConstant = createSimplifyConstant({\n    typed: typed,\n    config: config,\n    mathWithTransform: mathWithTransform,\n    fraction: fraction,\n    bignumber: bignumber,\n    ConstantNode: ConstantNode,\n    OperatorNode: OperatorNode,\n    FunctionNode: FunctionNode,\n    SymbolNode: SymbolNode\n  });\n  var simplifyCore = createSimplifyCore({\n    equal: equal,\n    isZero: isZero,\n    add: add,\n    subtract: subtract,\n    multiply: multiply,\n    divide: divide,\n    pow: pow,\n    ConstantNode: ConstantNode,\n    OperatorNode: OperatorNode,\n    FunctionNode: FunctionNode,\n    ParenthesisNode: ParenthesisNode\n  });\n  /**\n   * Transform a rationalizable expression in a rational fraction.\n   * If rational fraction is one variable polynomial then converts\n   * the numerator and denominator in canonical form, with decreasing\n   * exponents, returning the coefficients of numerator.\n   *\n   * Syntax:\n   *\n   *     rationalize(expr)\n   *     rationalize(expr, detailed)\n   *     rationalize(expr, scope)\n   *     rationalize(expr, scope, detailed)\n   *\n   * Examples:\n   *\n   *     math.rationalize('sin(x)+y')\n   *                   //  Error: There is an unsolved function call\n   *     math.rationalize('2x/y - y/(x+1)')\n   *                   // (2*x^2-y^2+2*x)/(x*y+y)\n   *     math.rationalize('(2x+1)^6')\n   *                   // 64*x^6+192*x^5+240*x^4+160*x^3+60*x^2+12*x+1\n   *     math.rationalize('2x/( (2x-1) / (3x+2) ) - 5x/ ( (3x+4) / (2x^2-5) ) + 3')\n   *                   // -20*x^4+28*x^3+104*x^2+6*x-12)/(6*x^2+5*x-4)\n   *     math.rationalize('x/(1-x)/(x-2)/(x-3)/(x-4) + 2x/ ( (1-2x)/(2-3x) )/ ((3-4x)/(4-5x) )') =\n   *                   // (-30*x^7+344*x^6-1506*x^5+3200*x^4-3472*x^3+1846*x^2-381*x)/\n   *                   //     (-8*x^6+90*x^5-383*x^4+780*x^3-797*x^2+390*x-72)\n   *\n   *     math.rationalize('x+x+x+y',{y:1}) // 3*x+1\n   *     math.rationalize('x+x+x+y',{})    // 3*x+y\n   *\n   *     const ret = math.rationalize('x+x+x+y',{},true)\n   *                   // ret.expression=3*x+y, ret.variables = [\"x\",\"y\"]\n   *     const ret = math.rationalize('-2+5x^2',{},true)\n   *                   // ret.expression=5*x^2-2, ret.variables = [\"x\"], ret.coefficients=[-2,0,5]\n   *\n   * See also:\n   *\n   *     simplify\n   *\n   * @param  {Node|string} expr    The expression to check if is a polynomial expression\n   * @param  {Object|boolean}      optional scope of expression or true for already evaluated rational expression at input\n   * @param  {Boolean}  detailed   optional True if return an object, false if return expression node (default)\n   *\n   * @return {Object | Node}    The rational polynomial of `expr` or na object\n   *            {Object}\n   *              {Expression Node} expression: node simplified expression\n   *              {Expression Node} numerator: simplified numerator of expression\n   *              {Expression Node | boolean} denominator: simplified denominator or false (if there is no denominator)\n   *              {Array}           variables:  variable names\n   *              {Array}           coefficients: coefficients of numerator sorted by increased exponent\n   *           {Expression Node}  node simplified expression\n   *\n   */\n\n  var rationalize = typed(name, {\n    string: function string(expr) {\n      return rationalize(parse(expr), {}, false);\n    },\n    'string, boolean': function stringBoolean(expr, detailed) {\n      return rationalize(parse(expr), {}, detailed);\n    },\n    'string, Object': function stringObject(expr, scope) {\n      return rationalize(parse(expr), scope, false);\n    },\n    'string, Object, boolean': function stringObjectBoolean(expr, scope, detailed) {\n      return rationalize(parse(expr), scope, detailed);\n    },\n    Node: function Node(expr) {\n      return rationalize(expr, {}, false);\n    },\n    'Node, boolean': function NodeBoolean(expr, detailed) {\n      return rationalize(expr, {}, detailed);\n    },\n    'Node, Object': function NodeObject(expr, scope) {\n      return rationalize(expr, scope, false);\n    },\n    'Node, Object, boolean': function NodeObjectBoolean(expr, scope, detailed) {\n      var setRules = rulesRationalize(); // Rules for change polynomial in near canonical form\n\n      var polyRet = polynomial(expr, scope, true, setRules.firstRules); // Check if expression is a rationalizable polynomial\n\n      var nVars = polyRet.variables.length;\n      expr = polyRet.expression;\n\n      if (nVars >= 1) {\n        // If expression in not a constant\n        expr = expandPower(expr); // First expand power of polynomials (cannot be made from rules!)\n\n        var sBefore; // Previous expression\n\n        var rules;\n        var eDistrDiv = true;\n        var redoInic = false;\n        expr = simplify(expr, setRules.firstRules, {}, {\n          exactFractions: false\n        }); // Apply the initial rules, including succ div rules\n\n        var s;\n\n        while (true) {\n          // Apply alternately  successive division rules and distr.div.rules\n          rules = eDistrDiv ? setRules.distrDivRules : setRules.sucDivRules;\n          expr = simplify(expr, rules); // until no more changes\n\n          eDistrDiv = !eDistrDiv; // Swap between Distr.Div and Succ. Div. Rules\n\n          s = expr.toString();\n\n          if (s === sBefore) {\n            break; // No changes : end of the loop\n          }\n\n          redoInic = true;\n          sBefore = s;\n        }\n\n        if (redoInic) {\n          // Apply first rules again without succ div rules (if there are changes)\n          expr = simplify(expr, setRules.firstRulesAgain, {}, {\n            exactFractions: false\n          });\n        }\n\n        expr = simplify(expr, setRules.finalRules, {}, {\n          exactFractions: false\n        }); // Apply final rules\n      } // NVars >= 1\n\n\n      var coefficients = [];\n      var retRationalize = {};\n\n      if (expr.type === 'OperatorNode' && expr.isBinary() && expr.op === '/') {\n        // Separate numerator from denominator\n        if (nVars === 1) {\n          expr.args[0] = polyToCanonical(expr.args[0], coefficients);\n          expr.args[1] = polyToCanonical(expr.args[1]);\n        }\n\n        if (detailed) {\n          retRationalize.numerator = expr.args[0];\n          retRationalize.denominator = expr.args[1];\n        }\n      } else {\n        if (nVars === 1) {\n          expr = polyToCanonical(expr, coefficients);\n        }\n\n        if (detailed) {\n          retRationalize.numerator = expr;\n          retRationalize.denominator = null;\n        }\n      } // nVars\n\n\n      if (!detailed) return expr;\n      retRationalize.coefficients = coefficients;\n      retRationalize.variables = polyRet.variables;\n      retRationalize.expression = expr;\n      return retRationalize;\n    } // ^^^^^^^ end of rationalize ^^^^^^^^\n\n  }); // end of typed rationalize\n\n  /**\n   *  Function to simplify an expression using an optional scope and\n   *  return it if the expression is a polynomial expression, i.e.\n   *  an expression with one or more variables and the operators\n   *  +, -, *, and ^, where the exponent can only be a positive integer.\n   *\n   * Syntax:\n   *\n   *     polynomial(expr,scope,extended, rules)\n   *\n   * @param  {Node | string} expr     The expression to simplify and check if is polynomial expression\n   * @param  {object} scope           Optional scope for expression simplification\n   * @param  {boolean} extended       Optional. Default is false. When true allows divide operator.\n   * @param  {array}  rules           Optional. Default is no rule.\n   *\n   *\n   * @return {Object}\n   *            {Object} node:   node simplified expression\n   *            {Array}  variables:  variable names\n   */\n\n  function polynomial(expr, scope, extended, rules) {\n    var variables = [];\n    var node = simplify(expr, rules, scope, {\n      exactFractions: false\n    }); // Resolves any variables and functions with all defined parameters\n\n    extended = !!extended;\n    var oper = '+-*' + (extended ? '/' : '');\n    recPoly(node);\n    var retFunc = {};\n    retFunc.expression = node;\n    retFunc.variables = variables;\n    return retFunc; // -------------------------------------------------------------------------------------------------------\n\n    /**\n     *  Function to simplify an expression using an optional scope and\n     *  return it if the expression is a polynomial expression, i.e.\n     *  an expression with one or more variables and the operators\n     *  +, -, *, and ^, where the exponent can only be a positive integer.\n     *\n     * Syntax:\n     *\n     *     recPoly(node)\n     *\n     *\n     * @param  {Node} node               The current sub tree expression in recursion\n     *\n     * @return                           nothing, throw an exception if error\n     */\n\n    function recPoly(node) {\n      var tp = node.type; // node type\n\n      if (tp === 'FunctionNode') {\n        // No function call in polynomial expression\n        throw new Error('There is an unsolved function call');\n      } else if (tp === 'OperatorNode') {\n        if (node.op === '^') {\n          // TODO: handle negative exponents like in '1/x^(-2)'\n          if (node.args[1].type !== 'ConstantNode' || !isInteger(parseFloat(node.args[1].value))) {\n            throw new Error('There is a non-integer exponent');\n          } else {\n            recPoly(node.args[0]);\n          }\n        } else {\n          if (oper.indexOf(node.op) === -1) {\n            throw new Error('Operator ' + node.op + ' invalid in polynomial expression');\n          }\n\n          for (var i = 0; i < node.args.length; i++) {\n            recPoly(node.args[i]);\n          }\n        } // type of operator\n\n      } else if (tp === 'SymbolNode') {\n        var _name = node.name; // variable name\n\n        var pos = variables.indexOf(_name);\n\n        if (pos === -1) {\n          // new variable in expression\n          variables.push(_name);\n        }\n      } else if (tp === 'ParenthesisNode') {\n        recPoly(node.content);\n      } else if (tp !== 'ConstantNode') {\n        throw new Error('type ' + tp + ' is not allowed in polynomial expression');\n      }\n    } // end of recPoly\n\n  } // end of polynomial\n  // ---------------------------------------------------------------------------------------\n\n  /**\n   * Return a rule set to rationalize an polynomial expression in rationalize\n   *\n   * Syntax:\n   *\n   *     rulesRationalize()\n   *\n   * @return {array}        rule set to rationalize an polynomial expression\n   */\n\n\n  function rulesRationalize() {\n    var oldRules = [simplifyCore, // sCore\n    {\n      l: 'n+n',\n      r: '2*n'\n    }, {\n      l: 'n+-n',\n      r: '0'\n    }, simplifyConstant, // sConstant\n    {\n      l: 'n*(n1^-1)',\n      r: 'n/n1'\n    }, {\n      l: 'n*n1^-n2',\n      r: 'n/n1^n2'\n    }, {\n      l: 'n1^-1',\n      r: '1/n1'\n    }, {\n      l: 'n*(n1/n2)',\n      r: '(n*n1)/n2'\n    }, {\n      l: '1*n',\n      r: 'n'\n    }];\n    var rulesFirst = [{\n      l: '(-n1)/(-n2)',\n      r: 'n1/n2'\n    }, // Unary division\n    {\n      l: '(-n1)*(-n2)',\n      r: 'n1*n2'\n    }, // Unary multiplication\n    {\n      l: 'n1--n2',\n      r: 'n1+n2'\n    }, // '--' elimination\n    {\n      l: 'n1-n2',\n      r: 'n1+(-n2)'\n    }, // Subtraction turn into add with un�ry minus\n    {\n      l: '(n1+n2)*n3',\n      r: '(n1*n3 + n2*n3)'\n    }, // Distributive 1\n    {\n      l: 'n1*(n2+n3)',\n      r: '(n1*n2+n1*n3)'\n    }, // Distributive 2\n    {\n      l: 'c1*n + c2*n',\n      r: '(c1+c2)*n'\n    }, // Joining constants\n    {\n      l: 'c1*n + n',\n      r: '(c1+1)*n'\n    }, // Joining constants\n    {\n      l: 'c1*n - c2*n',\n      r: '(c1-c2)*n'\n    }, // Joining constants\n    {\n      l: 'c1*n - n',\n      r: '(c1-1)*n'\n    }, // Joining constants\n    {\n      l: 'v/c',\n      r: '(1/c)*v'\n    }, // variable/constant (new!)\n    {\n      l: 'v/-c',\n      r: '-(1/c)*v'\n    }, // variable/constant (new!)\n    {\n      l: '-v*-c',\n      r: 'c*v'\n    }, // Inversion constant and variable 1\n    {\n      l: '-v*c',\n      r: '-c*v'\n    }, // Inversion constant and variable 2\n    {\n      l: 'v*-c',\n      r: '-c*v'\n    }, // Inversion constant and variable 3\n    {\n      l: 'v*c',\n      r: 'c*v'\n    }, // Inversion constant and variable 4\n    {\n      l: '-(-n1*n2)',\n      r: '(n1*n2)'\n    }, // Unary propagation\n    {\n      l: '-(n1*n2)',\n      r: '(-n1*n2)'\n    }, // Unary propagation\n    {\n      l: '-(-n1+n2)',\n      r: '(n1-n2)'\n    }, // Unary propagation\n    {\n      l: '-(n1+n2)',\n      r: '(-n1-n2)'\n    }, // Unary propagation\n    {\n      l: '(n1^n2)^n3',\n      r: '(n1^(n2*n3))'\n    }, // Power to Power\n    {\n      l: '-(-n1/n2)',\n      r: '(n1/n2)'\n    }, // Division and Unary\n    {\n      l: '-(n1/n2)',\n      r: '(-n1/n2)'\n    }]; // Divisao and Unary\n\n    var rulesDistrDiv = [{\n      l: '(n1/n2 + n3/n4)',\n      r: '((n1*n4 + n3*n2)/(n2*n4))'\n    }, // Sum of fractions\n    {\n      l: '(n1/n2 + n3)',\n      r: '((n1 + n3*n2)/n2)'\n    }, // Sum fraction with number 1\n    {\n      l: '(n1 + n2/n3)',\n      r: '((n1*n3 + n2)/n3)'\n    }]; // Sum fraction with number 1\n\n    var rulesSucDiv = [{\n      l: '(n1/(n2/n3))',\n      r: '((n1*n3)/n2)'\n    }, // Division simplification\n    {\n      l: '(n1/n2/n3)',\n      r: '(n1/(n2*n3))'\n    }];\n    var setRules = {}; // rules set in 4 steps.\n    // All rules => infinite loop\n    // setRules.allRules =oldRules.concat(rulesFirst,rulesDistrDiv,rulesSucDiv)\n\n    setRules.firstRules = oldRules.concat(rulesFirst, rulesSucDiv); // First rule set\n\n    setRules.distrDivRules = rulesDistrDiv; // Just distr. div. rules\n\n    setRules.sucDivRules = rulesSucDiv; // Jus succ. div. rules\n\n    setRules.firstRulesAgain = oldRules.concat(rulesFirst); // Last rules set without succ. div.\n    // Division simplification\n    // Second rule set.\n    // There is no aggregate expression with parentesis, but the only variable can be scattered.\n\n    setRules.finalRules = [simplifyCore, // simplify.rules[0]\n    {\n      l: 'n*-n',\n      r: '-n^2'\n    }, // Joining multiply with power 1\n    {\n      l: 'n*n',\n      r: 'n^2'\n    }, // Joining multiply with power 2\n    simplifyConstant, // simplify.rules[14] old 3rd index in oldRules\n    {\n      l: 'n*-n^n1',\n      r: '-n^(n1+1)'\n    }, // Joining multiply with power 3\n    {\n      l: 'n*n^n1',\n      r: 'n^(n1+1)'\n    }, // Joining multiply with power 4\n    {\n      l: 'n^n1*-n^n2',\n      r: '-n^(n1+n2)'\n    }, // Joining multiply with power 5\n    {\n      l: 'n^n1*n^n2',\n      r: 'n^(n1+n2)'\n    }, // Joining multiply with power 6\n    {\n      l: 'n^n1*-n',\n      r: '-n^(n1+1)'\n    }, // Joining multiply with power 7\n    {\n      l: 'n^n1*n',\n      r: 'n^(n1+1)'\n    }, // Joining multiply with power 8\n    {\n      l: 'n^n1/-n',\n      r: '-n^(n1-1)'\n    }, // Joining multiply with power 8\n    {\n      l: 'n^n1/n',\n      r: 'n^(n1-1)'\n    }, // Joining division with power 1\n    {\n      l: 'n/-n^n1',\n      r: '-n^(1-n1)'\n    }, // Joining division with power 2\n    {\n      l: 'n/n^n1',\n      r: 'n^(1-n1)'\n    }, // Joining division with power 3\n    {\n      l: 'n^n1/-n^n2',\n      r: 'n^(n1-n2)'\n    }, // Joining division with power 4\n    {\n      l: 'n^n1/n^n2',\n      r: 'n^(n1-n2)'\n    }, // Joining division with power 5\n    {\n      l: 'n1+(-n2*n3)',\n      r: 'n1-n2*n3'\n    }, // Solving useless parenthesis 1\n    {\n      l: 'v*(-c)',\n      r: '-c*v'\n    }, // Solving useless unary 2\n    {\n      l: 'n1+-n2',\n      r: 'n1-n2'\n    }, // Solving +- together (new!)\n    {\n      l: 'v*c',\n      r: 'c*v'\n    }, // inversion constant with variable\n    {\n      l: '(n1^n2)^n3',\n      r: '(n1^(n2*n3))'\n    } // Power to Power\n    ];\n    return setRules;\n  } // End rulesRationalize\n  // ---------------------------------------------------------------------------------------\n\n  /**\n   *  Expand recursively a tree node for handling with expressions with exponents\n   *  (it's not for constants, symbols or functions with exponents)\n   *  PS: The other parameters are internal for recursion\n   *\n   * Syntax:\n   *\n   *     expandPower(node)\n   *\n   * @param  {Node} node         Current expression node\n   * @param  {node} parent       Parent current node inside the recursion\n   * @param  (int}               Parent number of chid inside the rercursion\n   *\n   * @return {node}        node expression with all powers expanded.\n   */\n\n\n  function expandPower(node, parent, indParent) {\n    var tp = node.type;\n    var internal = arguments.length > 1; // TRUE in internal calls\n\n    if (tp === 'OperatorNode' && node.isBinary()) {\n      var does = false;\n      var val;\n\n      if (node.op === '^') {\n        // First operator: Parenthesis or UnaryMinus\n        if ((node.args[0].type === 'ParenthesisNode' || node.args[0].type === 'OperatorNode') && node.args[1].type === 'ConstantNode') {\n          // Second operator: Constant\n          val = parseFloat(node.args[1].value);\n          does = val >= 2 && isInteger(val);\n        }\n      }\n\n      if (does) {\n        // Exponent >= 2\n        // Before:\n        //            operator A --> Subtree\n        // parent pow\n        //            constant\n        //\n        if (val > 2) {\n          // Exponent > 2,\n          // AFTER:  (exponent > 2)\n          //             operator A --> Subtree\n          // parent  *\n          //                 deep clone (operator A --> Subtree\n          //             pow\n          //                 constant - 1\n          //\n          var nEsqTopo = node.args[0];\n          var nDirTopo = new OperatorNode('^', 'pow', [node.args[0].cloneDeep(), new ConstantNode(val - 1)]);\n          node = new OperatorNode('*', 'multiply', [nEsqTopo, nDirTopo]);\n        } else {\n          // Expo = 2 - no power\n          // AFTER:  (exponent =  2)\n          //             operator A --> Subtree\n          // parent   oper\n          //            deep clone (operator A --> Subtree)\n          //\n          node = new OperatorNode('*', 'multiply', [node.args[0], node.args[0].cloneDeep()]);\n        }\n\n        if (internal) {\n          // Change parent references in internal recursive calls\n          if (indParent === 'content') {\n            parent.content = node;\n          } else {\n            parent.args[indParent] = node;\n          }\n        }\n      } // does\n\n    } // binary OperatorNode\n\n\n    if (tp === 'ParenthesisNode') {\n      // Recursion\n      expandPower(node.content, node, 'content');\n    } else if (tp !== 'ConstantNode' && tp !== 'SymbolNode') {\n      for (var i = 0; i < node.args.length; i++) {\n        expandPower(node.args[i], node, i);\n      }\n    }\n\n    if (!internal) {\n      // return the root node\n      return node;\n    }\n  } // End expandPower\n  // ---------------------------------------------------------------------------------------\n\n  /**\n   * Auxilary function for rationalize\n   * Convert near canonical polynomial in one variable in a canonical polynomial\n   * with one term for each exponent in decreasing order\n   *\n   * Syntax:\n   *\n   *     polyToCanonical(node [, coefficients])\n   *\n   * @param  {Node | string} expr       The near canonical polynomial expression to convert in a a canonical polynomial expression\n   *\n   *        The string or tree expression needs to be at below syntax, with free spaces:\n   *         (  (^(-)? | [+-]? )cte (*)? var (^expo)?  | cte )+\n   *       Where 'var' is one variable with any valid name\n   *             'cte' are real numeric constants with any value. It can be omitted if equal than 1\n   *             'expo' are integers greater than 0. It can be omitted if equal than 1.\n   *\n   * @param  {array}   coefficients             Optional returns coefficients sorted by increased exponent\n   *\n   *\n   * @return {node}        new node tree with one variable polynomial or string error.\n   */\n\n\n  function polyToCanonical(node, coefficients) {\n    if (coefficients === undefined) {\n      coefficients = [];\n    } // coefficients.\n\n\n    coefficients[0] = 0; // index is the exponent\n\n    var o = {};\n    o.cte = 1;\n    o.oper = '+'; // fire: mark with * or ^ when finds * or ^ down tree, reset to \"\" with + and -.\n    //       It is used to deduce the exponent: 1 for *, 0 for \"\".\n\n    o.fire = '';\n    var maxExpo = 0; // maximum exponent\n\n    var varname = ''; // variable name\n\n    recurPol(node, null, o);\n    maxExpo = coefficients.length - 1;\n    var first = true;\n    var no;\n\n    for (var i = maxExpo; i >= 0; i--) {\n      if (coefficients[i] === 0) continue;\n      var n1 = new ConstantNode(first ? coefficients[i] : Math.abs(coefficients[i]));\n      var op = coefficients[i] < 0 ? '-' : '+';\n\n      if (i > 0) {\n        // Is not a constant without variable\n        var n2 = new SymbolNode(varname);\n\n        if (i > 1) {\n          var n3 = new ConstantNode(i);\n          n2 = new OperatorNode('^', 'pow', [n2, n3]);\n        }\n\n        if (coefficients[i] === -1 && first) {\n          n1 = new OperatorNode('-', 'unaryMinus', [n2]);\n        } else if (Math.abs(coefficients[i]) === 1) {\n          n1 = n2;\n        } else {\n          n1 = new OperatorNode('*', 'multiply', [n1, n2]);\n        }\n      }\n\n      if (first) {\n        no = n1;\n      } else if (op === '+') {\n        no = new OperatorNode('+', 'add', [no, n1]);\n      } else {\n        no = new OperatorNode('-', 'subtract', [no, n1]);\n      }\n\n      first = false;\n    } // for\n\n\n    if (first) {\n      return new ConstantNode(0);\n    } else {\n      return no;\n    }\n    /**\n     * Recursive auxilary function inside polyToCanonical for\n     * converting expression in canonical form\n     *\n     * Syntax:\n     *\n     *     recurPol(node, noPai, obj)\n     *\n     * @param  {Node} node        The current subpolynomial expression\n     * @param  {Node | Null}  noPai   The current parent node\n     * @param  {object}    obj        Object with many internal flags\n     *\n     * @return {}                    No return. If error, throws an exception\n     */\n\n\n    function recurPol(node, noPai, o) {\n      var tp = node.type;\n\n      if (tp === 'FunctionNode') {\n        // ***** FunctionName *****\n        // No function call in polynomial expression\n        throw new Error('There is an unsolved function call');\n      } else if (tp === 'OperatorNode') {\n        // ***** OperatorName *****\n        if ('+-*^'.indexOf(node.op) === -1) throw new Error('Operator ' + node.op + ' invalid');\n\n        if (noPai !== null) {\n          // -(unary),^  : children of *,+,-\n          if ((node.fn === 'unaryMinus' || node.fn === 'pow') && noPai.fn !== 'add' && noPai.fn !== 'subtract' && noPai.fn !== 'multiply') {\n            throw new Error('Invalid ' + node.op + ' placing');\n          } // -,+,* : children of +,-\n\n\n          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'multiply') && noPai.fn !== 'add' && noPai.fn !== 'subtract') {\n            throw new Error('Invalid ' + node.op + ' placing');\n          } // -,+ : first child\n\n\n          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'unaryMinus') && o.noFil !== 0) {\n            throw new Error('Invalid ' + node.op + ' placing');\n          }\n        } // Has parent\n        // Firers: ^,*       Old:   ^,&,-(unary): firers\n\n\n        if (node.op === '^' || node.op === '*') {\n          o.fire = node.op;\n        }\n\n        for (var _i = 0; _i < node.args.length; _i++) {\n          // +,-: reset fire\n          if (node.fn === 'unaryMinus') o.oper = '-';\n\n          if (node.op === '+' || node.fn === 'subtract') {\n            o.fire = '';\n            o.cte = 1; // default if there is no constant\n\n            o.oper = _i === 0 ? '+' : node.op;\n          }\n\n          o.noFil = _i; // number of son\n\n          recurPol(node.args[_i], node, o);\n        } // for in children\n\n      } else if (tp === 'SymbolNode') {\n        // ***** SymbolName *****\n        if (node.name !== varname && varname !== '') {\n          throw new Error('There is more than one variable');\n        }\n\n        varname = node.name;\n\n        if (noPai === null) {\n          coefficients[1] = 1;\n          return;\n        } // ^: Symbol is First child\n\n\n        if (noPai.op === '^' && o.noFil !== 0) {\n          throw new Error('In power the variable should be the first parameter');\n        } // *: Symbol is Second child\n\n\n        if (noPai.op === '*' && o.noFil !== 1) {\n          throw new Error('In multiply the variable should be the second parameter');\n        } // Symbol: firers '',* => it means there is no exponent above, so it's 1 (cte * var)\n\n\n        if (o.fire === '' || o.fire === '*') {\n          if (maxExpo < 1) coefficients[1] = 0;\n          coefficients[1] += o.cte * (o.oper === '+' ? 1 : -1);\n          maxExpo = Math.max(1, maxExpo);\n        }\n      } else if (tp === 'ConstantNode') {\n        var valor = parseFloat(node.value);\n\n        if (noPai === null) {\n          coefficients[0] = valor;\n          return;\n        }\n\n        if (noPai.op === '^') {\n          // cte: second  child of power\n          if (o.noFil !== 1) throw new Error('Constant cannot be powered');\n\n          if (!isInteger(valor) || valor <= 0) {\n            throw new Error('Non-integer exponent is not allowed');\n          }\n\n          for (var _i2 = maxExpo + 1; _i2 < valor; _i2++) {\n            coefficients[_i2] = 0;\n          }\n\n          if (valor > maxExpo) coefficients[valor] = 0;\n          coefficients[valor] += o.cte * (o.oper === '+' ? 1 : -1);\n          maxExpo = Math.max(valor, maxExpo);\n          return;\n        }\n\n        o.cte = valor; // Cte: firer '' => There is no exponent and no multiplication, so the exponent is 0.\n\n        if (o.fire === '') {\n          coefficients[0] += o.cte * (o.oper === '+' ? 1 : -1);\n        }\n      } else {\n        throw new Error('Type ' + tp + ' is not allowed');\n      }\n    } // End of recurPol\n\n  } // End of polyToCanonical\n\n\n  return rationalize;\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/algebra/rationalize.js"],"names":["isInteger","factory","createSimplifyConstant","createSimplifyCore","name","dependencies","createRationalize","_ref","config","typed","equal","isZero","add","subtract","multiply","divide","pow","parse","simplify","fraction","bignumber","mathWithTransform","ConstantNode","OperatorNode","FunctionNode","SymbolNode","ParenthesisNode","simplifyConstant","simplifyCore","rationalize","string","expr","stringBoolean","detailed","stringObject","scope","stringObjectBoolean","Node","NodeBoolean","NodeObject","NodeObjectBoolean","setRules","rulesRationalize","polyRet","polynomial","firstRules","nVars","variables","length","expression","expandPower","sBefore","rules","eDistrDiv","redoInic","exactFractions","s","distrDivRules","sucDivRules","toString","firstRulesAgain","finalRules","coefficients","retRationalize","type","isBinary","op","args","polyToCanonical","numerator","denominator","extended","node","oper","recPoly","retFunc","tp","Error","parseFloat","value","indexOf","i","_name","pos","push","content","oldRules","l","r","rulesFirst","rulesDistrDiv","rulesSucDiv","concat","parent","indParent","internal","arguments","does","val","nEsqTopo","nDirTopo","cloneDeep","undefined","o","cte","fire","maxExpo","varname","recurPol","first","no","n1","Math","abs","n2","n3","noPai","fn","noFil","_i","max","valor","_i2"],"mappings":"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","sourcesContent":["import { isInteger } from '../../utils/number';\nimport { factory } from '../../utils/factory';\nimport { createSimplifyConstant } from './simplify/simplifyConstant';\nimport { createSimplifyCore } from './simplify/simplifyCore';\nvar name = 'rationalize';\nvar dependencies = ['config', 'typed', 'equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'parse', 'simplify', '?bignumber', '?fraction', 'mathWithTransform', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode', 'ParenthesisNode'];\nexport var createRationalize = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var config = _ref.config,\n      typed = _ref.typed,\n      equal = _ref.equal,\n      isZero = _ref.isZero,\n      add = _ref.add,\n      subtract = _ref.subtract,\n      multiply = _ref.multiply,\n      divide = _ref.divide,\n      pow = _ref.pow,\n      parse = _ref.parse,\n      simplify = _ref.simplify,\n      fraction = _ref.fraction,\n      bignumber = _ref.bignumber,\n      mathWithTransform = _ref.mathWithTransform,\n      ConstantNode = _ref.ConstantNode,\n      OperatorNode = _ref.OperatorNode,\n      FunctionNode = _ref.FunctionNode,\n      SymbolNode = _ref.SymbolNode,\n      ParenthesisNode = _ref.ParenthesisNode;\n  var simplifyConstant = createSimplifyConstant({\n    typed: typed,\n    config: config,\n    mathWithTransform: mathWithTransform,\n    fraction: fraction,\n    bignumber: bignumber,\n    ConstantNode: ConstantNode,\n    OperatorNode: OperatorNode,\n    FunctionNode: FunctionNode,\n    SymbolNode: SymbolNode\n  });\n  var simplifyCore = createSimplifyCore({\n    equal: equal,\n    isZero: isZero,\n    add: add,\n    subtract: subtract,\n    multiply: multiply,\n    divide: divide,\n    pow: pow,\n    ConstantNode: ConstantNode,\n    OperatorNode: OperatorNode,\n    FunctionNode: FunctionNode,\n    ParenthesisNode: ParenthesisNode\n  });\n  /**\n   * Transform a rationalizable expression in a rational fraction.\n   * If rational fraction is one variable polynomial then converts\n   * the numerator and denominator in canonical form, with decreasing\n   * exponents, returning the coefficients of numerator.\n   *\n   * Syntax:\n   *\n   *     rationalize(expr)\n   *     rationalize(expr, detailed)\n   *     rationalize(expr, scope)\n   *     rationalize(expr, scope, detailed)\n   *\n   * Examples:\n   *\n   *     math.rationalize('sin(x)+y')\n   *                   //  Error: There is an unsolved function call\n   *     math.rationalize('2x/y - y/(x+1)')\n   *                   // (2*x^2-y^2+2*x)/(x*y+y)\n   *     math.rationalize('(2x+1)^6')\n   *                   // 64*x^6+192*x^5+240*x^4+160*x^3+60*x^2+12*x+1\n   *     math.rationalize('2x/( (2x-1) / (3x+2) ) - 5x/ ( (3x+4) / (2x^2-5) ) + 3')\n   *                   // -20*x^4+28*x^3+104*x^2+6*x-12)/(6*x^2+5*x-4)\n   *     math.rationalize('x/(1-x)/(x-2)/(x-3)/(x-4) + 2x/ ( (1-2x)/(2-3x) )/ ((3-4x)/(4-5x) )') =\n   *                   // (-30*x^7+344*x^6-1506*x^5+3200*x^4-3472*x^3+1846*x^2-381*x)/\n   *                   //     (-8*x^6+90*x^5-383*x^4+780*x^3-797*x^2+390*x-72)\n   *\n   *     math.rationalize('x+x+x+y',{y:1}) // 3*x+1\n   *     math.rationalize('x+x+x+y',{})    // 3*x+y\n   *\n   *     const ret = math.rationalize('x+x+x+y',{},true)\n   *                   // ret.expression=3*x+y, ret.variables = [\"x\",\"y\"]\n   *     const ret = math.rationalize('-2+5x^2',{},true)\n   *                   // ret.expression=5*x^2-2, ret.variables = [\"x\"], ret.coefficients=[-2,0,5]\n   *\n   * See also:\n   *\n   *     simplify\n   *\n   * @param  {Node|string} expr    The expression to check if is a polynomial expression\n   * @param  {Object|boolean}      optional scope of expression or true for already evaluated rational expression at input\n   * @param  {Boolean}  detailed   optional True if return an object, false if return expression node (default)\n   *\n   * @return {Object | Node}    The rational polynomial of `expr` or na object\n   *            {Object}\n   *              {Expression Node} expression: node simplified expression\n   *              {Expression Node} numerator: simplified numerator of expression\n   *              {Expression Node | boolean} denominator: simplified denominator or false (if there is no denominator)\n   *              {Array}           variables:  variable names\n   *              {Array}           coefficients: coefficients of numerator sorted by increased exponent\n   *           {Expression Node}  node simplified expression\n   *\n   */\n\n  var rationalize = typed(name, {\n    string: function string(expr) {\n      return rationalize(parse(expr), {}, false);\n    },\n    'string, boolean': function stringBoolean(expr, detailed) {\n      return rationalize(parse(expr), {}, detailed);\n    },\n    'string, Object': function stringObject(expr, scope) {\n      return rationalize(parse(expr), scope, false);\n    },\n    'string, Object, boolean': function stringObjectBoolean(expr, scope, detailed) {\n      return rationalize(parse(expr), scope, detailed);\n    },\n    Node: function Node(expr) {\n      return rationalize(expr, {}, false);\n    },\n    'Node, boolean': function NodeBoolean(expr, detailed) {\n      return rationalize(expr, {}, detailed);\n    },\n    'Node, Object': function NodeObject(expr, scope) {\n      return rationalize(expr, scope, false);\n    },\n    'Node, Object, boolean': function NodeObjectBoolean(expr, scope, detailed) {\n      var setRules = rulesRationalize(); // Rules for change polynomial in near canonical form\n\n      var polyRet = polynomial(expr, scope, true, setRules.firstRules); // Check if expression is a rationalizable polynomial\n\n      var nVars = polyRet.variables.length;\n      expr = polyRet.expression;\n\n      if (nVars >= 1) {\n        // If expression in not a constant\n        expr = expandPower(expr); // First expand power of polynomials (cannot be made from rules!)\n\n        var sBefore; // Previous expression\n\n        var rules;\n        var eDistrDiv = true;\n        var redoInic = false;\n        expr = simplify(expr, setRules.firstRules, {}, {\n          exactFractions: false\n        }); // Apply the initial rules, including succ div rules\n\n        var s;\n\n        while (true) {\n          // Apply alternately  successive division rules and distr.div.rules\n          rules = eDistrDiv ? setRules.distrDivRules : setRules.sucDivRules;\n          expr = simplify(expr, rules); // until no more changes\n\n          eDistrDiv = !eDistrDiv; // Swap between Distr.Div and Succ. Div. Rules\n\n          s = expr.toString();\n\n          if (s === sBefore) {\n            break; // No changes : end of the loop\n          }\n\n          redoInic = true;\n          sBefore = s;\n        }\n\n        if (redoInic) {\n          // Apply first rules again without succ div rules (if there are changes)\n          expr = simplify(expr, setRules.firstRulesAgain, {}, {\n            exactFractions: false\n          });\n        }\n\n        expr = simplify(expr, setRules.finalRules, {}, {\n          exactFractions: false\n        }); // Apply final rules\n      } // NVars >= 1\n\n\n      var coefficients = [];\n      var retRationalize = {};\n\n      if (expr.type === 'OperatorNode' && expr.isBinary() && expr.op === '/') {\n        // Separate numerator from denominator\n        if (nVars === 1) {\n          expr.args[0] = polyToCanonical(expr.args[0], coefficients);\n          expr.args[1] = polyToCanonical(expr.args[1]);\n        }\n\n        if (detailed) {\n          retRationalize.numerator = expr.args[0];\n          retRationalize.denominator = expr.args[1];\n        }\n      } else {\n        if (nVars === 1) {\n          expr = polyToCanonical(expr, coefficients);\n        }\n\n        if (detailed) {\n          retRationalize.numerator = expr;\n          retRationalize.denominator = null;\n        }\n      } // nVars\n\n\n      if (!detailed) return expr;\n      retRationalize.coefficients = coefficients;\n      retRationalize.variables = polyRet.variables;\n      retRationalize.expression = expr;\n      return retRationalize;\n    } // ^^^^^^^ end of rationalize ^^^^^^^^\n\n  }); // end of typed rationalize\n\n  /**\n   *  Function to simplify an expression using an optional scope and\n   *  return it if the expression is a polynomial expression, i.e.\n   *  an expression with one or more variables and the operators\n   *  +, -, *, and ^, where the exponent can only be a positive integer.\n   *\n   * Syntax:\n   *\n   *     polynomial(expr,scope,extended, rules)\n   *\n   * @param  {Node | string} expr     The expression to simplify and check if is polynomial expression\n   * @param  {object} scope           Optional scope for expression simplification\n   * @param  {boolean} extended       Optional. Default is false. When true allows divide operator.\n   * @param  {array}  rules           Optional. Default is no rule.\n   *\n   *\n   * @return {Object}\n   *            {Object} node:   node simplified expression\n   *            {Array}  variables:  variable names\n   */\n\n  function polynomial(expr, scope, extended, rules) {\n    var variables = [];\n    var node = simplify(expr, rules, scope, {\n      exactFractions: false\n    }); // Resolves any variables and functions with all defined parameters\n\n    extended = !!extended;\n    var oper = '+-*' + (extended ? '/' : '');\n    recPoly(node);\n    var retFunc = {};\n    retFunc.expression = node;\n    retFunc.variables = variables;\n    return retFunc; // -------------------------------------------------------------------------------------------------------\n\n    /**\n     *  Function to simplify an expression using an optional scope and\n     *  return it if the expression is a polynomial expression, i.e.\n     *  an expression with one or more variables and the operators\n     *  +, -, *, and ^, where the exponent can only be a positive integer.\n     *\n     * Syntax:\n     *\n     *     recPoly(node)\n     *\n     *\n     * @param  {Node} node               The current sub tree expression in recursion\n     *\n     * @return                           nothing, throw an exception if error\n     */\n\n    function recPoly(node) {\n      var tp = node.type; // node type\n\n      if (tp === 'FunctionNode') {\n        // No function call in polynomial expression\n        throw new Error('There is an unsolved function call');\n      } else if (tp === 'OperatorNode') {\n        if (node.op === '^') {\n          // TODO: handle negative exponents like in '1/x^(-2)'\n          if (node.args[1].type !== 'ConstantNode' || !isInteger(parseFloat(node.args[1].value))) {\n            throw new Error('There is a non-integer exponent');\n          } else {\n            recPoly(node.args[0]);\n          }\n        } else {\n          if (oper.indexOf(node.op) === -1) {\n            throw new Error('Operator ' + node.op + ' invalid in polynomial expression');\n          }\n\n          for (var i = 0; i < node.args.length; i++) {\n            recPoly(node.args[i]);\n          }\n        } // type of operator\n\n      } else if (tp === 'SymbolNode') {\n        var _name = node.name; // variable name\n\n        var pos = variables.indexOf(_name);\n\n        if (pos === -1) {\n          // new variable in expression\n          variables.push(_name);\n        }\n      } else if (tp === 'ParenthesisNode') {\n        recPoly(node.content);\n      } else if (tp !== 'ConstantNode') {\n        throw new Error('type ' + tp + ' is not allowed in polynomial expression');\n      }\n    } // end of recPoly\n\n  } // end of polynomial\n  // ---------------------------------------------------------------------------------------\n\n  /**\n   * Return a rule set to rationalize an polynomial expression in rationalize\n   *\n   * Syntax:\n   *\n   *     rulesRationalize()\n   *\n   * @return {array}        rule set to rationalize an polynomial expression\n   */\n\n\n  function rulesRationalize() {\n    var oldRules = [simplifyCore, // sCore\n    {\n      l: 'n+n',\n      r: '2*n'\n    }, {\n      l: 'n+-n',\n      r: '0'\n    }, simplifyConstant, // sConstant\n    {\n      l: 'n*(n1^-1)',\n      r: 'n/n1'\n    }, {\n      l: 'n*n1^-n2',\n      r: 'n/n1^n2'\n    }, {\n      l: 'n1^-1',\n      r: '1/n1'\n    }, {\n      l: 'n*(n1/n2)',\n      r: '(n*n1)/n2'\n    }, {\n      l: '1*n',\n      r: 'n'\n    }];\n    var rulesFirst = [{\n      l: '(-n1)/(-n2)',\n      r: 'n1/n2'\n    }, // Unary division\n    {\n      l: '(-n1)*(-n2)',\n      r: 'n1*n2'\n    }, // Unary multiplication\n    {\n      l: 'n1--n2',\n      r: 'n1+n2'\n    }, // '--' elimination\n    {\n      l: 'n1-n2',\n      r: 'n1+(-n2)'\n    }, // Subtraction turn into add with un�ry minus\n    {\n      l: '(n1+n2)*n3',\n      r: '(n1*n3 + n2*n3)'\n    }, // Distributive 1\n    {\n      l: 'n1*(n2+n3)',\n      r: '(n1*n2+n1*n3)'\n    }, // Distributive 2\n    {\n      l: 'c1*n + c2*n',\n      r: '(c1+c2)*n'\n    }, // Joining constants\n    {\n      l: 'c1*n + n',\n      r: '(c1+1)*n'\n    }, // Joining constants\n    {\n      l: 'c1*n - c2*n',\n      r: '(c1-c2)*n'\n    }, // Joining constants\n    {\n      l: 'c1*n - n',\n      r: '(c1-1)*n'\n    }, // Joining constants\n    {\n      l: 'v/c',\n      r: '(1/c)*v'\n    }, // variable/constant (new!)\n    {\n      l: 'v/-c',\n      r: '-(1/c)*v'\n    }, // variable/constant (new!)\n    {\n      l: '-v*-c',\n      r: 'c*v'\n    }, // Inversion constant and variable 1\n    {\n      l: '-v*c',\n      r: '-c*v'\n    }, // Inversion constant and variable 2\n    {\n      l: 'v*-c',\n      r: '-c*v'\n    }, // Inversion constant and variable 3\n    {\n      l: 'v*c',\n      r: 'c*v'\n    }, // Inversion constant and variable 4\n    {\n      l: '-(-n1*n2)',\n      r: '(n1*n2)'\n    }, // Unary propagation\n    {\n      l: '-(n1*n2)',\n      r: '(-n1*n2)'\n    }, // Unary propagation\n    {\n      l: '-(-n1+n2)',\n      r: '(n1-n2)'\n    }, // Unary propagation\n    {\n      l: '-(n1+n2)',\n      r: '(-n1-n2)'\n    }, // Unary propagation\n    {\n      l: '(n1^n2)^n3',\n      r: '(n1^(n2*n3))'\n    }, // Power to Power\n    {\n      l: '-(-n1/n2)',\n      r: '(n1/n2)'\n    }, // Division and Unary\n    {\n      l: '-(n1/n2)',\n      r: '(-n1/n2)'\n    }]; // Divisao and Unary\n\n    var rulesDistrDiv = [{\n      l: '(n1/n2 + n3/n4)',\n      r: '((n1*n4 + n3*n2)/(n2*n4))'\n    }, // Sum of fractions\n    {\n      l: '(n1/n2 + n3)',\n      r: '((n1 + n3*n2)/n2)'\n    }, // Sum fraction with number 1\n    {\n      l: '(n1 + n2/n3)',\n      r: '((n1*n3 + n2)/n3)'\n    }]; // Sum fraction with number 1\n\n    var rulesSucDiv = [{\n      l: '(n1/(n2/n3))',\n      r: '((n1*n3)/n2)'\n    }, // Division simplification\n    {\n      l: '(n1/n2/n3)',\n      r: '(n1/(n2*n3))'\n    }];\n    var setRules = {}; // rules set in 4 steps.\n    // All rules => infinite loop\n    // setRules.allRules =oldRules.concat(rulesFirst,rulesDistrDiv,rulesSucDiv)\n\n    setRules.firstRules = oldRules.concat(rulesFirst, rulesSucDiv); // First rule set\n\n    setRules.distrDivRules = rulesDistrDiv; // Just distr. div. rules\n\n    setRules.sucDivRules = rulesSucDiv; // Jus succ. div. rules\n\n    setRules.firstRulesAgain = oldRules.concat(rulesFirst); // Last rules set without succ. div.\n    // Division simplification\n    // Second rule set.\n    // There is no aggregate expression with parentesis, but the only variable can be scattered.\n\n    setRules.finalRules = [simplifyCore, // simplify.rules[0]\n    {\n      l: 'n*-n',\n      r: '-n^2'\n    }, // Joining multiply with power 1\n    {\n      l: 'n*n',\n      r: 'n^2'\n    }, // Joining multiply with power 2\n    simplifyConstant, // simplify.rules[14] old 3rd index in oldRules\n    {\n      l: 'n*-n^n1',\n      r: '-n^(n1+1)'\n    }, // Joining multiply with power 3\n    {\n      l: 'n*n^n1',\n      r: 'n^(n1+1)'\n    }, // Joining multiply with power 4\n    {\n      l: 'n^n1*-n^n2',\n      r: '-n^(n1+n2)'\n    }, // Joining multiply with power 5\n    {\n      l: 'n^n1*n^n2',\n      r: 'n^(n1+n2)'\n    }, // Joining multiply with power 6\n    {\n      l: 'n^n1*-n',\n      r: '-n^(n1+1)'\n    }, // Joining multiply with power 7\n    {\n      l: 'n^n1*n',\n      r: 'n^(n1+1)'\n    }, // Joining multiply with power 8\n    {\n      l: 'n^n1/-n',\n      r: '-n^(n1-1)'\n    }, // Joining multiply with power 8\n    {\n      l: 'n^n1/n',\n      r: 'n^(n1-1)'\n    }, // Joining division with power 1\n    {\n      l: 'n/-n^n1',\n      r: '-n^(1-n1)'\n    }, // Joining division with power 2\n    {\n      l: 'n/n^n1',\n      r: 'n^(1-n1)'\n    }, // Joining division with power 3\n    {\n      l: 'n^n1/-n^n2',\n      r: 'n^(n1-n2)'\n    }, // Joining division with power 4\n    {\n      l: 'n^n1/n^n2',\n      r: 'n^(n1-n2)'\n    }, // Joining division with power 5\n    {\n      l: 'n1+(-n2*n3)',\n      r: 'n1-n2*n3'\n    }, // Solving useless parenthesis 1\n    {\n      l: 'v*(-c)',\n      r: '-c*v'\n    }, // Solving useless unary 2\n    {\n      l: 'n1+-n2',\n      r: 'n1-n2'\n    }, // Solving +- together (new!)\n    {\n      l: 'v*c',\n      r: 'c*v'\n    }, // inversion constant with variable\n    {\n      l: '(n1^n2)^n3',\n      r: '(n1^(n2*n3))'\n    } // Power to Power\n    ];\n    return setRules;\n  } // End rulesRationalize\n  // ---------------------------------------------------------------------------------------\n\n  /**\n   *  Expand recursively a tree node for handling with expressions with exponents\n   *  (it's not for constants, symbols or functions with exponents)\n   *  PS: The other parameters are internal for recursion\n   *\n   * Syntax:\n   *\n   *     expandPower(node)\n   *\n   * @param  {Node} node         Current expression node\n   * @param  {node} parent       Parent current node inside the recursion\n   * @param  (int}               Parent number of chid inside the rercursion\n   *\n   * @return {node}        node expression with all powers expanded.\n   */\n\n\n  function expandPower(node, parent, indParent) {\n    var tp = node.type;\n    var internal = arguments.length > 1; // TRUE in internal calls\n\n    if (tp === 'OperatorNode' && node.isBinary()) {\n      var does = false;\n      var val;\n\n      if (node.op === '^') {\n        // First operator: Parenthesis or UnaryMinus\n        if ((node.args[0].type === 'ParenthesisNode' || node.args[0].type === 'OperatorNode') && node.args[1].type === 'ConstantNode') {\n          // Second operator: Constant\n          val = parseFloat(node.args[1].value);\n          does = val >= 2 && isInteger(val);\n        }\n      }\n\n      if (does) {\n        // Exponent >= 2\n        // Before:\n        //            operator A --> Subtree\n        // parent pow\n        //            constant\n        //\n        if (val > 2) {\n          // Exponent > 2,\n          // AFTER:  (exponent > 2)\n          //             operator A --> Subtree\n          // parent  *\n          //                 deep clone (operator A --> Subtree\n          //             pow\n          //                 constant - 1\n          //\n          var nEsqTopo = node.args[0];\n          var nDirTopo = new OperatorNode('^', 'pow', [node.args[0].cloneDeep(), new ConstantNode(val - 1)]);\n          node = new OperatorNode('*', 'multiply', [nEsqTopo, nDirTopo]);\n        } else {\n          // Expo = 2 - no power\n          // AFTER:  (exponent =  2)\n          //             operator A --> Subtree\n          // parent   oper\n          //            deep clone (operator A --> Subtree)\n          //\n          node = new OperatorNode('*', 'multiply', [node.args[0], node.args[0].cloneDeep()]);\n        }\n\n        if (internal) {\n          // Change parent references in internal recursive calls\n          if (indParent === 'content') {\n            parent.content = node;\n          } else {\n            parent.args[indParent] = node;\n          }\n        }\n      } // does\n\n    } // binary OperatorNode\n\n\n    if (tp === 'ParenthesisNode') {\n      // Recursion\n      expandPower(node.content, node, 'content');\n    } else if (tp !== 'ConstantNode' && tp !== 'SymbolNode') {\n      for (var i = 0; i < node.args.length; i++) {\n        expandPower(node.args[i], node, i);\n      }\n    }\n\n    if (!internal) {\n      // return the root node\n      return node;\n    }\n  } // End expandPower\n  // ---------------------------------------------------------------------------------------\n\n  /**\n   * Auxilary function for rationalize\n   * Convert near canonical polynomial in one variable in a canonical polynomial\n   * with one term for each exponent in decreasing order\n   *\n   * Syntax:\n   *\n   *     polyToCanonical(node [, coefficients])\n   *\n   * @param  {Node | string} expr       The near canonical polynomial expression to convert in a a canonical polynomial expression\n   *\n   *        The string or tree expression needs to be at below syntax, with free spaces:\n   *         (  (^(-)? | [+-]? )cte (*)? var (^expo)?  | cte )+\n   *       Where 'var' is one variable with any valid name\n   *             'cte' are real numeric constants with any value. It can be omitted if equal than 1\n   *             'expo' are integers greater than 0. It can be omitted if equal than 1.\n   *\n   * @param  {array}   coefficients             Optional returns coefficients sorted by increased exponent\n   *\n   *\n   * @return {node}        new node tree with one variable polynomial or string error.\n   */\n\n\n  function polyToCanonical(node, coefficients) {\n    if (coefficients === undefined) {\n      coefficients = [];\n    } // coefficients.\n\n\n    coefficients[0] = 0; // index is the exponent\n\n    var o = {};\n    o.cte = 1;\n    o.oper = '+'; // fire: mark with * or ^ when finds * or ^ down tree, reset to \"\" with + and -.\n    //       It is used to deduce the exponent: 1 for *, 0 for \"\".\n\n    o.fire = '';\n    var maxExpo = 0; // maximum exponent\n\n    var varname = ''; // variable name\n\n    recurPol(node, null, o);\n    maxExpo = coefficients.length - 1;\n    var first = true;\n    var no;\n\n    for (var i = maxExpo; i >= 0; i--) {\n      if (coefficients[i] === 0) continue;\n      var n1 = new ConstantNode(first ? coefficients[i] : Math.abs(coefficients[i]));\n      var op = coefficients[i] < 0 ? '-' : '+';\n\n      if (i > 0) {\n        // Is not a constant without variable\n        var n2 = new SymbolNode(varname);\n\n        if (i > 1) {\n          var n3 = new ConstantNode(i);\n          n2 = new OperatorNode('^', 'pow', [n2, n3]);\n        }\n\n        if (coefficients[i] === -1 && first) {\n          n1 = new OperatorNode('-', 'unaryMinus', [n2]);\n        } else if (Math.abs(coefficients[i]) === 1) {\n          n1 = n2;\n        } else {\n          n1 = new OperatorNode('*', 'multiply', [n1, n2]);\n        }\n      }\n\n      if (first) {\n        no = n1;\n      } else if (op === '+') {\n        no = new OperatorNode('+', 'add', [no, n1]);\n      } else {\n        no = new OperatorNode('-', 'subtract', [no, n1]);\n      }\n\n      first = false;\n    } // for\n\n\n    if (first) {\n      return new ConstantNode(0);\n    } else {\n      return no;\n    }\n    /**\n     * Recursive auxilary function inside polyToCanonical for\n     * converting expression in canonical form\n     *\n     * Syntax:\n     *\n     *     recurPol(node, noPai, obj)\n     *\n     * @param  {Node} node        The current subpolynomial expression\n     * @param  {Node | Null}  noPai   The current parent node\n     * @param  {object}    obj        Object with many internal flags\n     *\n     * @return {}                    No return. If error, throws an exception\n     */\n\n\n    function recurPol(node, noPai, o) {\n      var tp = node.type;\n\n      if (tp === 'FunctionNode') {\n        // ***** FunctionName *****\n        // No function call in polynomial expression\n        throw new Error('There is an unsolved function call');\n      } else if (tp === 'OperatorNode') {\n        // ***** OperatorName *****\n        if ('+-*^'.indexOf(node.op) === -1) throw new Error('Operator ' + node.op + ' invalid');\n\n        if (noPai !== null) {\n          // -(unary),^  : children of *,+,-\n          if ((node.fn === 'unaryMinus' || node.fn === 'pow') && noPai.fn !== 'add' && noPai.fn !== 'subtract' && noPai.fn !== 'multiply') {\n            throw new Error('Invalid ' + node.op + ' placing');\n          } // -,+,* : children of +,-\n\n\n          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'multiply') && noPai.fn !== 'add' && noPai.fn !== 'subtract') {\n            throw new Error('Invalid ' + node.op + ' placing');\n          } // -,+ : first child\n\n\n          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'unaryMinus') && o.noFil !== 0) {\n            throw new Error('Invalid ' + node.op + ' placing');\n          }\n        } // Has parent\n        // Firers: ^,*       Old:   ^,&,-(unary): firers\n\n\n        if (node.op === '^' || node.op === '*') {\n          o.fire = node.op;\n        }\n\n        for (var _i = 0; _i < node.args.length; _i++) {\n          // +,-: reset fire\n          if (node.fn === 'unaryMinus') o.oper = '-';\n\n          if (node.op === '+' || node.fn === 'subtract') {\n            o.fire = '';\n            o.cte = 1; // default if there is no constant\n\n            o.oper = _i === 0 ? '+' : node.op;\n          }\n\n          o.noFil = _i; // number of son\n\n          recurPol(node.args[_i], node, o);\n        } // for in children\n\n      } else if (tp === 'SymbolNode') {\n        // ***** SymbolName *****\n        if (node.name !== varname && varname !== '') {\n          throw new Error('There is more than one variable');\n        }\n\n        varname = node.name;\n\n        if (noPai === null) {\n          coefficients[1] = 1;\n          return;\n        } // ^: Symbol is First child\n\n\n        if (noPai.op === '^' && o.noFil !== 0) {\n          throw new Error('In power the variable should be the first parameter');\n        } // *: Symbol is Second child\n\n\n        if (noPai.op === '*' && o.noFil !== 1) {\n          throw new Error('In multiply the variable should be the second parameter');\n        } // Symbol: firers '',* => it means there is no exponent above, so it's 1 (cte * var)\n\n\n        if (o.fire === '' || o.fire === '*') {\n          if (maxExpo < 1) coefficients[1] = 0;\n          coefficients[1] += o.cte * (o.oper === '+' ? 1 : -1);\n          maxExpo = Math.max(1, maxExpo);\n        }\n      } else if (tp === 'ConstantNode') {\n        var valor = parseFloat(node.value);\n\n        if (noPai === null) {\n          coefficients[0] = valor;\n          return;\n        }\n\n        if (noPai.op === '^') {\n          // cte: second  child of power\n          if (o.noFil !== 1) throw new Error('Constant cannot be powered');\n\n          if (!isInteger(valor) || valor <= 0) {\n            throw new Error('Non-integer exponent is not allowed');\n          }\n\n          for (var _i2 = maxExpo + 1; _i2 < valor; _i2++) {\n            coefficients[_i2] = 0;\n          }\n\n          if (valor > maxExpo) coefficients[valor] = 0;\n          coefficients[valor] += o.cte * (o.oper === '+' ? 1 : -1);\n          maxExpo = Math.max(valor, maxExpo);\n          return;\n        }\n\n        o.cte = valor; // Cte: firer '' => There is no exponent and no multiplication, so the exponent is 0.\n\n        if (o.fire === '') {\n          coefficients[0] += o.cte * (o.oper === '+' ? 1 : -1);\n        }\n      } else {\n        throw new Error('Type ' + tp + ' is not allowed');\n      }\n    } // End of recurPol\n\n  } // End of polyToCanonical\n\n\n  return rationalize;\n});"]},"metadata":{},"sourceType":"module"}