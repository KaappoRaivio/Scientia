{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { multiplyNumber } from '../../plain/number';\nvar name = 'multiplyScalar';\nvar dependencies = ['typed'];\nexport var createMultiplyScalar = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Multiply two scalar values, `x * y`.\n   * This function is meant for internal use: it is used by the public function\n   * `multiply`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`\n   * @private\n   */\n\n  var multiplyScalar = typed('multiplyScalar', {\n    'number, number': multiplyNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.mul(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.times(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.mul(y);\n    },\n    'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {\n      var res = y.clone();\n      res.value = res.value === null ? res._normalize(x) : multiplyScalar(res.value, x);\n      return res;\n    },\n    'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {\n      var res = x.clone();\n      res.value = res.value === null ? res._normalize(y) : multiplyScalar(res.value, y);\n      return res;\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return x.multiply(y);\n    }\n  });\n  return multiplyScalar;\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/arithmetic/multiplyScalar.js"],"names":["factory","multiplyNumber","name","dependencies","createMultiplyScalar","_ref","typed","multiplyScalar","ComplexComplex","x","y","mul","BigNumberBigNumber","times","FractionFraction","numberFractionBigNumberComplexUnit","res","clone","value","_normalize","UnitNumberFractionBigNumberComplex","UnitUnit","multiply"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,IAAIC,IAAI,GAAG,gBAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,oBAAoB,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAC3F,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAEA;;;;;;;;;;;;;AAYA,MAAIC,cAAc,GAAGD,KAAK,CAAC,gBAAD,EAAmB;AAC3C,sBAAkBL,cADyB;AAE3C,wBAAoB,SAASO,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;AAChD,aAAOD,CAAC,CAACE,GAAF,CAAMD,CAAN,CAAP;AACD,KAJ0C;AAK3C,4BAAwB,SAASE,kBAAT,CAA4BH,CAA5B,EAA+BC,CAA/B,EAAkC;AACxD,aAAOD,CAAC,CAACI,KAAF,CAAQH,CAAR,CAAP;AACD,KAP0C;AAQ3C,0BAAsB,SAASI,gBAAT,CAA0BL,CAA1B,EAA6BC,CAA7B,EAAgC;AACpD,aAAOD,CAAC,CAACE,GAAF,CAAMD,CAAN,CAAP;AACD,KAV0C;AAW3C,qDAAiD,SAASK,kCAAT,CAA4CN,CAA5C,EAA+CC,CAA/C,EAAkD;AACjG,UAAIM,GAAG,GAAGN,CAAC,CAACO,KAAF,EAAV;AACAD,MAAAA,GAAG,CAACE,KAAJ,GAAYF,GAAG,CAACE,KAAJ,KAAc,IAAd,GAAqBF,GAAG,CAACG,UAAJ,CAAeV,CAAf,CAArB,GAAyCF,cAAc,CAACS,GAAG,CAACE,KAAL,EAAYT,CAAZ,CAAnE;AACA,aAAOO,GAAP;AACD,KAf0C;AAgB3C,qDAAiD,SAASI,kCAAT,CAA4CX,CAA5C,EAA+CC,CAA/C,EAAkD;AACjG,UAAIM,GAAG,GAAGP,CAAC,CAACQ,KAAF,EAAV;AACAD,MAAAA,GAAG,CAACE,KAAJ,GAAYF,GAAG,CAACE,KAAJ,KAAc,IAAd,GAAqBF,GAAG,CAACG,UAAJ,CAAeT,CAAf,CAArB,GAAyCH,cAAc,CAACS,GAAG,CAACE,KAAL,EAAYR,CAAZ,CAAnE;AACA,aAAOM,GAAP;AACD,KApB0C;AAqB3C,kBAAc,SAASK,QAAT,CAAkBZ,CAAlB,EAAqBC,CAArB,EAAwB;AACpC,aAAOD,CAAC,CAACa,QAAF,CAAWZ,CAAX,CAAP;AACD;AAvB0C,GAAnB,CAA1B;AAyBA,SAAOH,cAAP;AACD,CAzCuD,CAAjD","sourcesContent":["import { factory } from '../../utils/factory';\nimport { multiplyNumber } from '../../plain/number';\nvar name = 'multiplyScalar';\nvar dependencies = ['typed'];\nexport var createMultiplyScalar = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Multiply two scalar values, `x * y`.\n   * This function is meant for internal use: it is used by the public function\n   * `multiply`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`\n   * @private\n   */\n  var multiplyScalar = typed('multiplyScalar', {\n    'number, number': multiplyNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.mul(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.times(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.mul(y);\n    },\n    'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {\n      var res = y.clone();\n      res.value = res.value === null ? res._normalize(x) : multiplyScalar(res.value, x);\n      return res;\n    },\n    'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {\n      var res = x.clone();\n      res.value = res.value === null ? res._normalize(y) : multiplyScalar(res.value, y);\n      return res;\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      return x.multiply(y);\n    }\n  });\n  return multiplyScalar;\n});"]},"metadata":{},"sourceType":"module"}