{"ast":null,"code":"import { isBigNumber } from '../../utils/is';\nimport { isInteger } from '../../utils/number';\nimport { resize } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nvar name = 'ones';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nexport var createOnes = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      matrix = _ref.matrix,\n      BigNumber = _ref.BigNumber;\n  /**\n   * Create a matrix filled with ones. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.ones(m)\n   *    math.ones(m, format)\n   *    math.ones(m, n)\n   *    math.ones(m, n, format)\n   *    math.ones([m, n])\n   *    math.ones([m, n], format)\n   *    math.ones([m, n, p, ...])\n   *    math.ones([m, n, p, ...], format)\n   *\n   * Examples:\n   *\n   *    math.ones(3)                   // returns [1, 1, 1]\n   *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]\n   *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]\n   *\n   * See also:\n   *\n   *    zeros, identity, size, range\n   *\n   * @param {...number | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix | number}  A matrix filled with ones\n   */\n\n  return typed('ones', {\n    '': function _() {\n      return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');\n    },\n    // math.ones(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function numberBigNumberString(size) {\n      var last = size[size.length - 1];\n\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _ones(size, format);\n      } else if (config.matrix === 'Array') {\n        return _ones(size);\n      } else {\n        return _ones(size, 'default');\n      }\n    },\n    Array: _ones,\n    Matrix: function Matrix(size) {\n      var format = size.storage();\n      return _ones(size.valueOf(), format);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\n      return _ones(size.valueOf(), format);\n    }\n  });\n  /**\n   * Create an Array or Matrix with ones\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n\n  function _ones(size, format) {\n    var hasBigNumbers = _normalize(size);\n\n    var defaultValue = hasBigNumbers ? new BigNumber(1) : 1;\n\n    _validate(size);\n\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n\n      return m;\n    } else {\n      // return an Array\n      var arr = [];\n\n      if (size.length > 0) {\n        return resize(arr, size, defaultValue);\n      }\n\n      return arr;\n    }\n  } // replace BigNumbers with numbers, returns true if size contained BigNumbers\n\n\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if (isBigNumber(value)) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  } // validate arguments\n\n\n  function _validate(size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n        throw new Error('Parameters in function ones must be positive integers');\n      }\n    });\n  }\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/matrix/ones.js"],"names":["isBigNumber","isInteger","resize","factory","name","dependencies","createOnes","_ref","typed","config","matrix","BigNumber","_","_ones","numberBigNumberString","size","last","length","format","pop","Array","Matrix","storage","valueOf","ArrayMatrixString","hasBigNumbers","_normalize","defaultValue","_validate","m","arr","forEach","value","index","toNumber","Error"],"mappings":"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","sourcesContent":["import { isBigNumber } from '../../utils/is';\nimport { isInteger } from '../../utils/number';\nimport { resize } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nvar name = 'ones';\nvar dependencies = ['typed', 'config', 'matrix', 'BigNumber'];\nexport var createOnes = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      matrix = _ref.matrix,\n      BigNumber = _ref.BigNumber;\n\n  /**\n   * Create a matrix filled with ones. The created matrix can have one or\n   * multiple dimensions.\n   *\n   * Syntax:\n   *\n   *    math.ones(m)\n   *    math.ones(m, format)\n   *    math.ones(m, n)\n   *    math.ones(m, n, format)\n   *    math.ones([m, n])\n   *    math.ones([m, n], format)\n   *    math.ones([m, n, p, ...])\n   *    math.ones([m, n, p, ...], format)\n   *\n   * Examples:\n   *\n   *    math.ones(3)                   // returns [1, 1, 1]\n   *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]\n   *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]\n   *\n   *    const A = [[1, 2, 3], [4, 5, 6]]\n   *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]\n   *\n   * See also:\n   *\n   *    zeros, identity, size, range\n   *\n   * @param {...number | Array} size    The size of each dimension of the matrix\n   * @param {string} [format]           The Matrix storage format\n   *\n   * @return {Array | Matrix | number}  A matrix filled with ones\n   */\n  return typed('ones', {\n    '': function _() {\n      return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');\n    },\n    // math.ones(m, n, p, ..., format)\n    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this\n    '...number | BigNumber | string': function numberBigNumberString(size) {\n      var last = size[size.length - 1];\n\n      if (typeof last === 'string') {\n        var format = size.pop();\n        return _ones(size, format);\n      } else if (config.matrix === 'Array') {\n        return _ones(size);\n      } else {\n        return _ones(size, 'default');\n      }\n    },\n    Array: _ones,\n    Matrix: function Matrix(size) {\n      var format = size.storage();\n      return _ones(size.valueOf(), format);\n    },\n    'Array | Matrix, string': function ArrayMatrixString(size, format) {\n      return _ones(size.valueOf(), format);\n    }\n  });\n  /**\n   * Create an Array or Matrix with ones\n   * @param {Array} size\n   * @param {string} [format='default']\n   * @return {Array | Matrix}\n   * @private\n   */\n\n  function _ones(size, format) {\n    var hasBigNumbers = _normalize(size);\n\n    var defaultValue = hasBigNumbers ? new BigNumber(1) : 1;\n\n    _validate(size);\n\n    if (format) {\n      // return a matrix\n      var m = matrix(format);\n\n      if (size.length > 0) {\n        return m.resize(size, defaultValue);\n      }\n\n      return m;\n    } else {\n      // return an Array\n      var arr = [];\n\n      if (size.length > 0) {\n        return resize(arr, size, defaultValue);\n      }\n\n      return arr;\n    }\n  } // replace BigNumbers with numbers, returns true if size contained BigNumbers\n\n\n  function _normalize(size) {\n    var hasBigNumbers = false;\n    size.forEach(function (value, index, arr) {\n      if (isBigNumber(value)) {\n        hasBigNumbers = true;\n        arr[index] = value.toNumber();\n      }\n    });\n    return hasBigNumbers;\n  } // validate arguments\n\n\n  function _validate(size) {\n    size.forEach(function (value) {\n      if (typeof value !== 'number' || !isInteger(value) || value < 0) {\n        throw new Error('Parameters in function ones must be positive integers');\n      }\n    });\n  }\n});"]},"metadata":{},"sourceType":"module"}