{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm05 } from '../../type/matrix/utils/algorithm05';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { modNumber } from '../../plain/number';\nvar name = 'mod';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nexport var createMod = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm02 = createAlgorithm02({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm03 = createAlgorithm03({\n    typed: typed\n  });\n  var algorithm05 = createAlgorithm05({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm12 = createAlgorithm12({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Calculates the modulus, the remainder of an integer division.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * The modulus is defined as:\n   *\n   *     x - y * floor(x / y)\n   *\n   * See https://en.wikipedia.org/wiki/Modulo_operation.\n   *\n   * Syntax:\n   *\n   *    math.mod(x, y)\n   *\n   * Examples:\n   *\n   *    math.mod(8, 3)                // returns 2\n   *    math.mod(11, 2)               // returns 1\n   *\n   *    function isOdd(x) {\n   *      return math.mod(x, 2) != 0\n   *    }\n   *\n   *    isOdd(2)                      // returns false\n   *    isOdd(3)                      // returns true\n   *\n   * See also:\n   *\n   *    divide\n   *\n   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\n   */\n\n  var mod = typed(name, {\n    'number, number': modNumber,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return y.isZero() ? x : x.mod(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.mod(y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm05(x, y, mod, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, mod, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, mod, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, mod);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return mod(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return mod(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return mod(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, mod, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, mod, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, mod, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, mod, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, mod, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, mod, true).valueOf();\n    }\n  });\n  return mod;\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/arithmetic/mod.js"],"names":["factory","createAlgorithm02","createAlgorithm03","createAlgorithm05","createAlgorithm11","createAlgorithm12","createAlgorithm13","createAlgorithm14","modNumber","name","dependencies","createMod","_ref","typed","matrix","equalScalar","DenseMatrix","algorithm02","algorithm03","algorithm05","algorithm11","algorithm12","algorithm13","algorithm14","mod","BigNumberBigNumber","x","y","isZero","FractionFraction","SparseMatrixSparseMatrix","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixAny","DenseMatrixAny","anySparseMatrix","anyDenseMatrix","ArrayAny","anyArray"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm05 } from '../../type/matrix/utils/algorithm05';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { modNumber } from '../../plain/number';\nvar name = 'mod';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nexport var createMod = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm02 = createAlgorithm02({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm03 = createAlgorithm03({\n    typed: typed\n  });\n  var algorithm05 = createAlgorithm05({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm12 = createAlgorithm12({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Calculates the modulus, the remainder of an integer division.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * The modulus is defined as:\n   *\n   *     x - y * floor(x / y)\n   *\n   * See https://en.wikipedia.org/wiki/Modulo_operation.\n   *\n   * Syntax:\n   *\n   *    math.mod(x, y)\n   *\n   * Examples:\n   *\n   *    math.mod(8, 3)                // returns 2\n   *    math.mod(11, 2)               // returns 1\n   *\n   *    function isOdd(x) {\n   *      return math.mod(x, 2) != 0\n   *    }\n   *\n   *    isOdd(2)                      // returns false\n   *    isOdd(3)                      // returns true\n   *\n   * See also:\n   *\n   *    divide\n   *\n   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\n   */\n\n  var mod = typed(name, {\n    'number, number': modNumber,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return y.isZero() ? x : x.mod(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.mod(y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm05(x, y, mod, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, mod, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, mod, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, mod);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return mod(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return mod(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return mod(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, mod, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, mod, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, mod, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, mod, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, mod, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, mod, true).valueOf();\n    }\n  });\n  return mod;\n});"]},"metadata":{},"sourceType":"module"}