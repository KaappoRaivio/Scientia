{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { getSafeProperty } from '../../utils/customs';\nimport { embeddedDocs } from '../embeddedDocs/embeddedDocs';\nimport { hasOwnProperty } from '../../utils/object';\nvar name = 'help';\nvar dependencies = ['typed', 'mathWithTransform', 'Help'];\nexport var createHelp = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      mathWithTransform = _ref.mathWithTransform,\n      Help = _ref.Help;\n  /**\n   * Retrieve help on a function or data type.\n   * Help files are retrieved from the embedded documentation in math.docs.\n   *\n   * Syntax:\n   *\n   *    math.help(search)\n   *\n   * Examples:\n   *\n   *    console.log(math.help('sin').toString())\n   *    console.log(math.help(math.add).toString())\n   *    console.log(math.help(math.add).toJSON())\n   *\n   * @param {Function | string | Object} search   A function or function name\n   *                                              for which to get help\n   * @return {Help} A help object\n   */\n\n  return typed(name, {\n    any: function any(search) {\n      var prop;\n      var searchName = search;\n\n      if (typeof search !== 'string') {\n        for (prop in mathWithTransform) {\n          // search in functions and constants\n          if (hasOwnProperty(mathWithTransform, prop) && search === mathWithTransform[prop]) {\n            searchName = prop;\n            break;\n          }\n        }\n        /* TODO: implement help for data types\n         if (!text) {\n         // search data type\n         for (prop in math.type) {\n         if (hasOwnProperty(math, prop)) {\n         if (search === math.type[prop]) {\n         text = prop\n         break\n         }\n         }\n         }\n         }\n         */\n\n      }\n\n      var doc = getSafeProperty(embeddedDocs, searchName);\n\n      if (!doc) {\n        var searchText = typeof searchName === 'function' ? searchName.name : searchName;\n        throw new Error('No documentation found on \"' + searchText + '\"');\n      }\n\n      return new Help(doc);\n    }\n  });\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/expression/function/help.js"],"names":["factory","getSafeProperty","embeddedDocs","hasOwnProperty","name","dependencies","createHelp","_ref","typed","mathWithTransform","Help","any","search","prop","searchName","doc","searchText","Error"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,mBAAV,EAA+B,MAA/B,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeN,OAAO,CAACI,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACjF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,iBAAiB,GAAGF,IAAI,CAACE,iBAD7B;AAAA,MAEIC,IAAI,GAAGH,IAAI,CAACG,IAFhB;AAIA;;;;;;;;;;;;;;;;;;;AAkBA,SAAOF,KAAK,CAACJ,IAAD,EAAO;AACjBO,IAAAA,GAAG,EAAE,SAASA,GAAT,CAAaC,MAAb,EAAqB;AACxB,UAAIC,IAAJ;AACA,UAAIC,UAAU,GAAGF,MAAjB;;AAEA,UAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,aAAKC,IAAL,IAAaJ,iBAAb,EAAgC;AAC9B;AACA,cAAIN,cAAc,CAACM,iBAAD,EAAoBI,IAApB,CAAd,IAA2CD,MAAM,KAAKH,iBAAiB,CAACI,IAAD,CAA3E,EAAmF;AACjFC,YAAAA,UAAU,GAAGD,IAAb;AACA;AACD;AACF;AACD;;;;;;;;;;;;;;AAcD;;AAED,UAAIE,GAAG,GAAGd,eAAe,CAACC,YAAD,EAAeY,UAAf,CAAzB;;AAEA,UAAI,CAACC,GAAL,EAAU;AACR,YAAIC,UAAU,GAAG,OAAOF,UAAP,KAAsB,UAAtB,GAAmCA,UAAU,CAACV,IAA9C,GAAqDU,UAAtE;AACA,cAAM,IAAIG,KAAJ,CAAU,gCAAgCD,UAAhC,GAA6C,GAAvD,CAAN;AACD;;AAED,aAAO,IAAIN,IAAJ,CAASK,GAAT,CAAP;AACD;AArCgB,GAAP,CAAZ;AAuCD,CA9D6C,CAAvC","sourcesContent":["import { factory } from '../../utils/factory';\nimport { getSafeProperty } from '../../utils/customs';\nimport { embeddedDocs } from '../embeddedDocs/embeddedDocs';\nimport { hasOwnProperty } from '../../utils/object';\nvar name = 'help';\nvar dependencies = ['typed', 'mathWithTransform', 'Help'];\nexport var createHelp = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      mathWithTransform = _ref.mathWithTransform,\n      Help = _ref.Help;\n\n  /**\n   * Retrieve help on a function or data type.\n   * Help files are retrieved from the embedded documentation in math.docs.\n   *\n   * Syntax:\n   *\n   *    math.help(search)\n   *\n   * Examples:\n   *\n   *    console.log(math.help('sin').toString())\n   *    console.log(math.help(math.add).toString())\n   *    console.log(math.help(math.add).toJSON())\n   *\n   * @param {Function | string | Object} search   A function or function name\n   *                                              for which to get help\n   * @return {Help} A help object\n   */\n  return typed(name, {\n    any: function any(search) {\n      var prop;\n      var searchName = search;\n\n      if (typeof search !== 'string') {\n        for (prop in mathWithTransform) {\n          // search in functions and constants\n          if (hasOwnProperty(mathWithTransform, prop) && search === mathWithTransform[prop]) {\n            searchName = prop;\n            break;\n          }\n        }\n        /* TODO: implement help for data types\n         if (!text) {\n         // search data type\n         for (prop in math.type) {\n         if (hasOwnProperty(math, prop)) {\n         if (search === math.type[prop]) {\n         text = prop\n         break\n         }\n         }\n         }\n         }\n         */\n\n      }\n\n      var doc = getSafeProperty(embeddedDocs, searchName);\n\n      if (!doc) {\n        var searchText = typeof searchName === 'function' ? searchName.name : searchName;\n        throw new Error('No documentation found on \"' + searchText + '\"');\n      }\n\n      return new Help(doc);\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}