{"ast":null,"code":"import { clone } from '../../utils/object';\nimport { format } from '../../utils/string';\nimport { factory } from '../../utils/factory';\nvar name = 'trace';\nvar dependencies = ['typed', 'matrix', 'add'];\nexport var createTrace = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      add = _ref.add;\n  /**\n   * Calculate the trace of a matrix: the sum of the elements on the main\n   * diagonal of a square matrix.\n   *\n   * Syntax:\n   *\n   *    math.trace(x)\n   *\n   * Examples:\n   *\n   *    math.trace([[1, 2], [3, 4]]) // returns 5\n   *\n   *    const A = [\n   *      [1, 2, 3],\n   *      [-1, 2, 3],\n   *      [2, 0, 3]\n   *    ]\n   *    math.trace(A) // returns 6\n   *\n   * See also:\n   *\n   *    diag\n   *\n   * @param {Array | Matrix} x  A matrix\n   *\n   * @return {number} The trace of `x`\n   */\n\n  return typed('trace', {\n    Array: function _arrayTrace(x) {\n      // use dense matrix implementation\n      return _denseTrace(matrix(x));\n    },\n    SparseMatrix: _sparseTrace,\n    DenseMatrix: _denseTrace,\n    any: clone\n  });\n\n  function _denseTrace(m) {\n    // matrix size & data\n    var size = m._size;\n    var data = m._data; // process dimensions\n\n    switch (size.length) {\n      case 1:\n        // vector\n        if (size[0] === 1) {\n          // return data[0]\n          return clone(data[0]);\n        }\n\n        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n\n      case 2:\n        {\n          // two dimensional\n          var rows = size[0];\n          var cols = size[1];\n\n          if (rows === cols) {\n            // calulate sum\n            var sum = 0; // loop diagonal\n\n            for (var i = 0; i < rows; i++) {\n              sum = add(sum, data[i][i]);\n            } // return trace\n\n\n            return sum;\n          } else {\n            throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n          }\n        }\n\n      default:\n        // multi dimensional\n        throw new RangeError('Matrix must be two dimensional (size: ' + format(size) + ')');\n    }\n  }\n\n  function _sparseTrace(m) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    var size = m._size; // check dimensions\n\n    var rows = size[0];\n    var columns = size[1]; // matrix must be square\n\n    if (rows === columns) {\n      // calulate sum\n      var sum = 0; // check we have data (avoid looping columns)\n\n      if (values.length > 0) {\n        // loop columns\n        for (var j = 0; j < columns; j++) {\n          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n          var k0 = ptr[j];\n          var k1 = ptr[j + 1]; // loop k within [k0, k1[\n\n          for (var k = k0; k < k1; k++) {\n            // row index\n            var i = index[k]; // check row\n\n            if (i === j) {\n              // accumulate value\n              sum = add(sum, values[k]); // exit loop\n\n              break;\n            }\n\n            if (i > j) {\n              // exit loop, no value on the diagonal for column j\n              break;\n            }\n          }\n        }\n      } // return trace\n\n\n      return sum;\n    }\n\n    throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n  }\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/matrix/trace.js"],"names":["clone","format","factory","name","dependencies","createTrace","_ref","typed","matrix","add","Array","_arrayTrace","x","_denseTrace","SparseMatrix","_sparseTrace","DenseMatrix","any","m","size","_size","data","_data","length","RangeError","rows","cols","sum","i","values","_values","index","_index","ptr","_ptr","columns","j","k0","k1","k"],"mappings":"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","sourcesContent":["import { clone } from '../../utils/object';\nimport { format } from '../../utils/string';\nimport { factory } from '../../utils/factory';\nvar name = 'trace';\nvar dependencies = ['typed', 'matrix', 'add'];\nexport var createTrace = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      add = _ref.add;\n\n  /**\n   * Calculate the trace of a matrix: the sum of the elements on the main\n   * diagonal of a square matrix.\n   *\n   * Syntax:\n   *\n   *    math.trace(x)\n   *\n   * Examples:\n   *\n   *    math.trace([[1, 2], [3, 4]]) // returns 5\n   *\n   *    const A = [\n   *      [1, 2, 3],\n   *      [-1, 2, 3],\n   *      [2, 0, 3]\n   *    ]\n   *    math.trace(A) // returns 6\n   *\n   * See also:\n   *\n   *    diag\n   *\n   * @param {Array | Matrix} x  A matrix\n   *\n   * @return {number} The trace of `x`\n   */\n  return typed('trace', {\n    Array: function _arrayTrace(x) {\n      // use dense matrix implementation\n      return _denseTrace(matrix(x));\n    },\n    SparseMatrix: _sparseTrace,\n    DenseMatrix: _denseTrace,\n    any: clone\n  });\n\n  function _denseTrace(m) {\n    // matrix size & data\n    var size = m._size;\n    var data = m._data; // process dimensions\n\n    switch (size.length) {\n      case 1:\n        // vector\n        if (size[0] === 1) {\n          // return data[0]\n          return clone(data[0]);\n        }\n\n        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n\n      case 2:\n        {\n          // two dimensional\n          var rows = size[0];\n          var cols = size[1];\n\n          if (rows === cols) {\n            // calulate sum\n            var sum = 0; // loop diagonal\n\n            for (var i = 0; i < rows; i++) {\n              sum = add(sum, data[i][i]);\n            } // return trace\n\n\n            return sum;\n          } else {\n            throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n          }\n        }\n\n      default:\n        // multi dimensional\n        throw new RangeError('Matrix must be two dimensional (size: ' + format(size) + ')');\n    }\n  }\n\n  function _sparseTrace(m) {\n    // matrix arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr;\n    var size = m._size; // check dimensions\n\n    var rows = size[0];\n    var columns = size[1]; // matrix must be square\n\n    if (rows === columns) {\n      // calulate sum\n      var sum = 0; // check we have data (avoid looping columns)\n\n      if (values.length > 0) {\n        // loop columns\n        for (var j = 0; j < columns; j++) {\n          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n          var k0 = ptr[j];\n          var k1 = ptr[j + 1]; // loop k within [k0, k1[\n\n          for (var k = k0; k < k1; k++) {\n            // row index\n            var i = index[k]; // check row\n\n            if (i === j) {\n              // accumulate value\n              sum = add(sum, values[k]); // exit loop\n\n              break;\n            }\n\n            if (i > j) {\n              // exit loop, no value on the diagonal for column j\n              break;\n            }\n          }\n        }\n      } // return trace\n\n\n      return sum;\n    }\n\n    throw new RangeError('Matrix must be square (size: ' + format(size) + ')');\n  }\n});"]},"metadata":{},"sourceType":"module"}