{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { log1p as _log1p } from '../../utils/number';\nvar name = 'log1p';\nvar dependencies = ['typed', 'config', 'divideScalar', 'log', 'Complex'];\nexport var createLog1p = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      divideScalar = _ref.divideScalar,\n      log = _ref.log,\n      Complex = _ref.Complex;\n  /**\n   * Calculate the logarithm of a `value+1`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log1p(x)\n   *    math.log1p(x, base)\n   *\n   * Examples:\n   *\n   *    math.log1p(2.5)                 // returns 1.252762968495368\n   *    math.exp(math.log1p(1.4))       // returns 2.4\n   *\n   *    math.pow(10, 4)                 // returns 10000\n   *    math.log1p(9999, 10)            // returns 4\n   *    math.log1p(9999) / math.log(10) // returns 4\n   *\n   * See also:\n   *\n   *    exp, log, log2, log10\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm of `x+1`.\n   * @param {number | BigNumber | Complex} [base=e]\n   *            Optional base for the logarithm. If not provided, the natural\n   *            logarithm of `x+1` is calculated.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the logarithm of `x+1`\n   */\n\n  var log1p = typed(name, {\n    number: function number(x) {\n      if (x >= -1 || config.predictable) {\n        return _log1p(x);\n      } else {\n        // negative value -> complex value computation\n        return _log1pComplex(new Complex(x, 0));\n      }\n    },\n    Complex: _log1pComplex,\n    BigNumber: function BigNumber(x) {\n      var y = x.plus(1);\n\n      if (!y.isNegative() || config.predictable) {\n        return y.ln();\n      } else {\n        // downgrade to number, return Complex valued result\n        return _log1pComplex(new Complex(x.toNumber(), 0));\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, log1p);\n    },\n    'any, any': function anyAny(x, base) {\n      // calculate logarithm for a specified base, log1p(x, base)\n      return divideScalar(log1p(x), log(base));\n    }\n  });\n  /**\n   * Calculate the natural logarithm of a complex number + 1\n   * @param {Complex} x\n   * @returns {Complex}\n   * @private\n   */\n\n  function _log1pComplex(x) {\n    var xRe1p = x.re + 1;\n    return new Complex(Math.log(Math.sqrt(xRe1p * xRe1p + x.im * x.im)), Math.atan2(x.im, xRe1p));\n  }\n\n  return log1p;\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/arithmetic/log1p.js"],"names":["factory","deepMap","log1p","_log1p","name","dependencies","createLog1p","_ref","typed","config","divideScalar","log","Complex","number","x","predictable","_log1pComplex","BigNumber","y","plus","isNegative","ln","toNumber","ArrayMatrix","anyAny","base","xRe1p","re","Math","sqrt","im","atan2"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,KAAK,IAAIC,MAAlB,QAAgC,oBAAhC;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,cAApB,EAAoC,KAApC,EAA2C,SAA3C,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeN,OAAO,CAACI,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAClF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAAA,MAEIC,YAAY,GAAGH,IAAI,CAACG,YAFxB;AAAA,MAGIC,GAAG,GAAGJ,IAAI,CAACI,GAHf;AAAA,MAIIC,OAAO,GAAGL,IAAI,CAACK,OAJnB;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,MAAIV,KAAK,GAAGM,KAAK,CAACJ,IAAD,EAAO;AACtBS,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB,UAAIA,CAAC,IAAI,CAAC,CAAN,IAAWL,MAAM,CAACM,WAAtB,EAAmC;AACjC,eAAOZ,MAAM,CAACW,CAAD,CAAb;AACD,OAFD,MAEO;AACL;AACA,eAAOE,aAAa,CAAC,IAAIJ,OAAJ,CAAYE,CAAZ,EAAe,CAAf,CAAD,CAApB;AACD;AACF,KARqB;AAStBF,IAAAA,OAAO,EAAEI,aATa;AAUtBC,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBH,CAAnB,EAAsB;AAC/B,UAAII,CAAC,GAAGJ,CAAC,CAACK,IAAF,CAAO,CAAP,CAAR;;AAEA,UAAI,CAACD,CAAC,CAACE,UAAF,EAAD,IAAmBX,MAAM,CAACM,WAA9B,EAA2C;AACzC,eAAOG,CAAC,CAACG,EAAF,EAAP;AACD,OAFD,MAEO;AACL;AACA,eAAOL,aAAa,CAAC,IAAIJ,OAAJ,CAAYE,CAAC,CAACQ,QAAF,EAAZ,EAA0B,CAA1B,CAAD,CAApB;AACD;AACF,KAnBqB;AAoBtB,sBAAkB,SAASC,WAAT,CAAqBT,CAArB,EAAwB;AACxC,aAAOb,OAAO,CAACa,CAAD,EAAIZ,KAAJ,CAAd;AACD,KAtBqB;AAuBtB,gBAAY,SAASsB,MAAT,CAAgBV,CAAhB,EAAmBW,IAAnB,EAAyB;AACnC;AACA,aAAOf,YAAY,CAACR,KAAK,CAACY,CAAD,CAAN,EAAWH,GAAG,CAACc,IAAD,CAAd,CAAnB;AACD;AA1BqB,GAAP,CAAjB;AA4BA;;;;;;;AAOA,WAAST,aAAT,CAAuBF,CAAvB,EAA0B;AACxB,QAAIY,KAAK,GAAGZ,CAAC,CAACa,EAAF,GAAO,CAAnB;AACA,WAAO,IAAIf,OAAJ,CAAYgB,IAAI,CAACjB,GAAL,CAASiB,IAAI,CAACC,IAAL,CAAUH,KAAK,GAAGA,KAAR,GAAgBZ,CAAC,CAACgB,EAAF,GAAOhB,CAAC,CAACgB,EAAnC,CAAT,CAAZ,EAA8DF,IAAI,CAACG,KAAL,CAAWjB,CAAC,CAACgB,EAAb,EAAiBJ,KAAjB,CAA9D,CAAP;AACD;;AAED,SAAOxB,KAAP;AACD,CA/E8C,CAAxC","sourcesContent":["import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { log1p as _log1p } from '../../utils/number';\nvar name = 'log1p';\nvar dependencies = ['typed', 'config', 'divideScalar', 'log', 'Complex'];\nexport var createLog1p = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      divideScalar = _ref.divideScalar,\n      log = _ref.log,\n      Complex = _ref.Complex;\n\n  /**\n   * Calculate the logarithm of a `value+1`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log1p(x)\n   *    math.log1p(x, base)\n   *\n   * Examples:\n   *\n   *    math.log1p(2.5)                 // returns 1.252762968495368\n   *    math.exp(math.log1p(1.4))       // returns 2.4\n   *\n   *    math.pow(10, 4)                 // returns 10000\n   *    math.log1p(9999, 10)            // returns 4\n   *    math.log1p(9999) / math.log(10) // returns 4\n   *\n   * See also:\n   *\n   *    exp, log, log2, log10\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm of `x+1`.\n   * @param {number | BigNumber | Complex} [base=e]\n   *            Optional base for the logarithm. If not provided, the natural\n   *            logarithm of `x+1` is calculated.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the logarithm of `x+1`\n   */\n  var log1p = typed(name, {\n    number: function number(x) {\n      if (x >= -1 || config.predictable) {\n        return _log1p(x);\n      } else {\n        // negative value -> complex value computation\n        return _log1pComplex(new Complex(x, 0));\n      }\n    },\n    Complex: _log1pComplex,\n    BigNumber: function BigNumber(x) {\n      var y = x.plus(1);\n\n      if (!y.isNegative() || config.predictable) {\n        return y.ln();\n      } else {\n        // downgrade to number, return Complex valued result\n        return _log1pComplex(new Complex(x.toNumber(), 0));\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, log1p);\n    },\n    'any, any': function anyAny(x, base) {\n      // calculate logarithm for a specified base, log1p(x, base)\n      return divideScalar(log1p(x), log(base));\n    }\n  });\n  /**\n   * Calculate the natural logarithm of a complex number + 1\n   * @param {Complex} x\n   * @returns {Complex}\n   * @private\n   */\n\n  function _log1pComplex(x) {\n    var xRe1p = x.re + 1;\n    return new Complex(Math.log(Math.sqrt(xRe1p * xRe1p + x.im * x.im)), Math.atan2(x.im, xRe1p));\n  }\n\n  return log1p;\n});"]},"metadata":{},"sourceType":"module"}