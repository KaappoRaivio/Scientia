{"ast":null,"code":"import Bezier from \"bezier\";\n\nclass Interpolator {\n  constructor(angle) {\n    this.previousData = 0;\n    this.currentData = 0;\n\n    if (angle === undefined) {\n      angle = false;\n    }\n\n    this.angle = angle;\n    this.dataPoints = [[new Date().getTime(), 0], [new Date().getTime() + 1000, 0]];\n  }\n\n  addDataPoint(timeStamp, data) {\n    this.dataPoints.push([timeStamp, data]);\n\n    while (this.dataPoints.length > 20) {\n      this.dataPoints.shift();\n    }\n  }\n\n  interpolate(timeStamp) {\n    let latest = this.dataPoints[this.dataPoints.length - 1][0];\n    let diff = timeStamp - latest;\n    let averageDiff = this.getAverageDeltaTime();\n    let progress = diff / averageDiff;\n    return this.getLatestPairSlope()(progress);\n  }\n\n  getAverageDeltaTime() {\n    let previous = this.dataPoints[0][0];\n    let diffs = [];\n\n    for (let i = 1; i < this.dataPoints.length; i++) {\n      let current = this.dataPoints[i][0];\n      let diff = current - previous;\n      diffs.push(diff);\n      previous = current;\n    }\n\n    return diffs.reduce((a, b) => a + b, 0) / diffs.length;\n  }\n\n  deltaAngle(a, b) {\n    let diff = a - b;\n    return (diff + Math.PI) % (2 * Math.PI) - Math.PI;\n  }\n\n  getLatestPairSlope() {\n    let latest = this.dataPoints[this.dataPoints.length - 1];\n    let other = this.dataPoints[this.dataPoints.length - 2]; // let bezier = new Bezier()\n\n    return x => {\n      let deltaX = latest[0] - other[0];\n      let deltaY = 0;\n\n      if (this.angle) {\n        deltaY = this.deltaAngle(latest[1], other[1]); // deltaY = -this.deltaAngle(other[1], latest[1])\n\n        console.log(deltaY);\n      } else {\n        deltaY = latest[1] - other[1];\n      }\n\n      let k = deltaY / deltaX * 1000; // let k = 0.001;\n      // console.log(k)\n\n      let b = other[1];\n\n      if (this.angle) {\n        // return k > 0 ? Math.min(k * x + b, latest[1]) : Math.max(k * x + b, latest[1])\n        return k * x + b;\n      } else {\n        return k > 0 ? Math.min(k * x + b, latest[1]) : Math.max(k * x + b, latest[1]);\n      }\n    };\n  }\n\n}\n\nexport default Interpolator;","map":{"version":3,"sources":["/home/kaappo/git/kments/src/components/misc/interpolate.js"],"names":["Bezier","Interpolator","constructor","angle","previousData","currentData","undefined","dataPoints","Date","getTime","addDataPoint","timeStamp","data","push","length","shift","interpolate","latest","diff","averageDiff","getAverageDeltaTime","progress","getLatestPairSlope","previous","diffs","i","current","reduce","a","b","deltaAngle","Math","PI","other","x","deltaX","deltaY","console","log","k","min","max"],"mappings":"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","sourcesContent":["import Bezier from \"bezier\";\n\nclass Interpolator {\n    constructor (angle) {\n        this.previousData = 0;\n        this.currentData = 0;\n\n        if (angle === undefined) {\n            angle = false;\n        }\n\n        this.angle = angle;\n\n\n        this.dataPoints = [\n            [new Date().getTime(), 0],\n            [new Date().getTime() + 1000, 0]\n        ];\n    }\n\n    addDataPoint (timeStamp, data) {\n        this.dataPoints.push([timeStamp, data]);\n        while (this.dataPoints.length > 20) {\n            this.dataPoints.shift();\n        }\n        \n    }\n\n    interpolate (timeStamp) {\n        let latest = this.dataPoints[this.dataPoints.length - 1][0];\n        let diff = timeStamp - latest;\n\n        let averageDiff = this.getAverageDeltaTime();\n\n        let progress = diff / averageDiff;\n        return this.getLatestPairSlope()(progress)\n    }\n\n    getAverageDeltaTime () {\n        let previous = this.dataPoints[0][0];\n        let diffs = [];\n\n        for (let i = 1; i < this.dataPoints.length; i++) {\n            let current = this.dataPoints[i][0];\n            \n            let diff = current - previous;\n            diffs.push(diff);\n\n            previous = current;\n        }\n        return diffs.reduce((a, b) => a + b, 0) / diffs.length;\n    }\n\n    deltaAngle (a, b) {\n        let diff = a - b;\n        return (diff + Math.PI) % (2 * Math.PI) - Math.PI\n    }\n\n    getLatestPairSlope () {\n        let latest = this.dataPoints[this.dataPoints.length - 1]\n        let other = this.dataPoints[this.dataPoints.length - 2]\n\n        // let bezier = new Bezier()\n\n        return (x) => {\n            let deltaX = latest[0] - other[0];\n            \n            let deltaY = 0;\n            if (this.angle) {\n                deltaY = this.deltaAngle(latest[1], other[1])\n                // deltaY = -this.deltaAngle(other[1], latest[1])\n                console.log(deltaY)\n            } else {\n                deltaY = latest[1] - other[1];\n            }\n            let k = deltaY / deltaX * 1000 ;\n            // let k = 0.001;\n            // console.log(k)\n            let b = other[1];\n\n            if (this.angle) {\n                // return k > 0 ? Math.min(k * x + b, latest[1]) : Math.max(k * x + b, latest[1])\n                return k*x + b;\n            } else {\n                return k > 0 ? Math.min(k * x + b, latest[1]) : Math.max(k * x + b, latest[1])\n\n            }\n        }\n    }\n}\n\nexport default Interpolator;"]},"metadata":{},"sourceType":"module"}