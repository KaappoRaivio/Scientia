{"ast":null,"code":"import { factory } from '../../utils/factory';\nvar name = 'stirlingS2';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'factorial', 'combinations', 'isNegative', 'isInteger', 'larger'];\nexport var createStirlingS2 = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      addScalar = _ref.addScalar,\n      subtract = _ref.subtract,\n      multiplyScalar = _ref.multiplyScalar,\n      divideScalar = _ref.divideScalar,\n      pow = _ref.pow,\n      factorial = _ref.factorial,\n      combinations = _ref.combinations,\n      isNegative = _ref.isNegative,\n      isInteger = _ref.isInteger,\n      larger = _ref.larger;\n  /**\n   * The Stirling numbers of the second kind, counts the number of ways to partition\n   * a set of n labelled objects into k nonempty unlabelled subsets.\n   * stirlingS2 only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   *  If n = k or k = 1, then s(n,k) = 1\n   *\n   * Syntax:\n   *\n   *   math.stirlingS2(n, k)\n   *\n   * Examples:\n   *\n   *    math.stirlingS2(5, 3) //returns 25\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     S(n,k)\n   */\n\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {\n        throw new TypeError('Non-negative integer value expected in function stirlingS2');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function stirlingS2');\n      } // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]\n\n\n      var kFactorial = factorial(k);\n      var result = 0;\n\n      for (var i = 0; i <= k; i++) {\n        var negativeOne = pow(-1, subtract(k, i));\n        var kChooseI = combinations(k, i);\n        var iPower = pow(i, n);\n        result = addScalar(result, multiplyScalar(multiplyScalar(kChooseI, iPower), negativeOne));\n      }\n\n      return divideScalar(result, kFactorial);\n    }\n  });\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/combinatorics/stirlingS2.js"],"names":["factory","name","dependencies","createStirlingS2","_ref","typed","addScalar","subtract","multiplyScalar","divideScalar","pow","factorial","combinations","isNegative","isInteger","larger","numberBigNumberNumberBigNumber","n","k","TypeError","kFactorial","result","i","negativeOne","kChooseI","iPower"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,YAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,EAAuB,UAAvB,EAAmC,gBAAnC,EAAqD,cAArD,EAAqE,KAArE,EAA4E,WAA5E,EAAyF,cAAzF,EAAyG,YAAzG,EAAuH,WAAvH,EAAoI,QAApI,CAAnB;AACA,OAAO,IAAIC,gBAAgB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACvF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,SAAS,GAAGF,IAAI,CAACE,SADrB;AAAA,MAEIC,QAAQ,GAAGH,IAAI,CAACG,QAFpB;AAAA,MAGIC,cAAc,GAAGJ,IAAI,CAACI,cAH1B;AAAA,MAIIC,YAAY,GAAGL,IAAI,CAACK,YAJxB;AAAA,MAKIC,GAAG,GAAGN,IAAI,CAACM,GALf;AAAA,MAMIC,SAAS,GAAGP,IAAI,CAACO,SANrB;AAAA,MAOIC,YAAY,GAAGR,IAAI,CAACQ,YAPxB;AAAA,MAQIC,UAAU,GAAGT,IAAI,CAACS,UARtB;AAAA,MASIC,SAAS,GAAGV,IAAI,CAACU,SATrB;AAAA,MAUIC,MAAM,GAAGX,IAAI,CAACW,MAVlB;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAAOV,KAAK,CAACJ,IAAD,EAAO;AACjB,8CAA0C,SAASe,8BAAT,CAAwCC,CAAxC,EAA2CC,CAA3C,EAA8C;AACtF,UAAI,CAACJ,SAAS,CAACG,CAAD,CAAV,IAAiBJ,UAAU,CAACI,CAAD,CAA3B,IAAkC,CAACH,SAAS,CAACI,CAAD,CAA5C,IAAmDL,UAAU,CAACK,CAAD,CAAjE,EAAsE;AACpE,cAAM,IAAIC,SAAJ,CAAc,4DAAd,CAAN;AACD,OAFD,MAEO,IAAIJ,MAAM,CAACG,CAAD,EAAID,CAAJ,CAAV,EAAkB;AACvB,cAAM,IAAIE,SAAJ,CAAc,0DAAd,CAAN;AACD,OALqF,CAKpF;;;AAGF,UAAIC,UAAU,GAAGT,SAAS,CAACO,CAAD,CAA1B;AACA,UAAIG,MAAM,GAAG,CAAb;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,CAArB,EAAwBI,CAAC,EAAzB,EAA6B;AAC3B,YAAIC,WAAW,GAAGb,GAAG,CAAC,CAAC,CAAF,EAAKH,QAAQ,CAACW,CAAD,EAAII,CAAJ,CAAb,CAArB;AACA,YAAIE,QAAQ,GAAGZ,YAAY,CAACM,CAAD,EAAII,CAAJ,CAA3B;AACA,YAAIG,MAAM,GAAGf,GAAG,CAACY,CAAD,EAAIL,CAAJ,CAAhB;AACAI,QAAAA,MAAM,GAAGf,SAAS,CAACe,MAAD,EAASb,cAAc,CAACA,cAAc,CAACgB,QAAD,EAAWC,MAAX,CAAf,EAAmCF,WAAnC,CAAvB,CAAlB;AACD;;AAED,aAAOd,YAAY,CAACY,MAAD,EAASD,UAAT,CAAnB;AACD;AApBgB,GAAP,CAAZ;AAsBD,CA3DmD,CAA7C","sourcesContent":["import { factory } from '../../utils/factory';\nvar name = 'stirlingS2';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'factorial', 'combinations', 'isNegative', 'isInteger', 'larger'];\nexport var createStirlingS2 = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      addScalar = _ref.addScalar,\n      subtract = _ref.subtract,\n      multiplyScalar = _ref.multiplyScalar,\n      divideScalar = _ref.divideScalar,\n      pow = _ref.pow,\n      factorial = _ref.factorial,\n      combinations = _ref.combinations,\n      isNegative = _ref.isNegative,\n      isInteger = _ref.isInteger,\n      larger = _ref.larger;\n\n  /**\n   * The Stirling numbers of the second kind, counts the number of ways to partition\n   * a set of n labelled objects into k nonempty unlabelled subsets.\n   * stirlingS2 only takes integer arguments.\n   * The following condition must be enforced: k <= n.\n   *\n   *  If n = k or k = 1, then s(n,k) = 1\n   *\n   * Syntax:\n   *\n   *   math.stirlingS2(n, k)\n   *\n   * Examples:\n   *\n   *    math.stirlingS2(5, 3) //returns 25\n   *\n   * See also:\n   *\n   *    bellNumbers\n   *\n   * @param {Number | BigNumber} n    Total number of objects in the set\n   * @param {Number | BigNumber} k    Number of objects in the subset\n   * @return {Number | BigNumber}     S(n,k)\n   */\n  return typed(name, {\n    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {\n      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {\n        throw new TypeError('Non-negative integer value expected in function stirlingS2');\n      } else if (larger(k, n)) {\n        throw new TypeError('k must be less than or equal to n in function stirlingS2');\n      } // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]\n\n\n      var kFactorial = factorial(k);\n      var result = 0;\n\n      for (var i = 0; i <= k; i++) {\n        var negativeOne = pow(-1, subtract(k, i));\n        var kChooseI = combinations(k, i);\n        var iPower = pow(i, n);\n        result = addScalar(result, multiplyScalar(multiplyScalar(kChooseI, iPower), negativeOne));\n      }\n\n      return divideScalar(result, kFactorial);\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}