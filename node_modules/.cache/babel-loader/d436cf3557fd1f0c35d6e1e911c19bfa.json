{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { flatten } from '../../utils/array';\nvar name = 'hypot';\nvar dependencies = ['typed', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'sqrt', 'smaller', 'isPositive'];\nexport var createHypot = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      abs = _ref.abs,\n      addScalar = _ref.addScalar,\n      divideScalar = _ref.divideScalar,\n      multiplyScalar = _ref.multiplyScalar,\n      sqrt = _ref.sqrt,\n      smaller = _ref.smaller,\n      isPositive = _ref.isPositive;\n  /**\n   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:\n   *\n   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)\n   *\n   * For matrix input, the hypotenusa is calculated for all values in the matrix.\n   *\n   * Syntax:\n   *\n   *     math.hypot(a, b, ...)\n   *     math.hypot([a, b, c, ...])\n   *\n   * Examples:\n   *\n   *     math.hypot(3, 4)      // 5\n   *     math.hypot(3, 4, 5)   // 7.0710678118654755\n   *     math.hypot([3, 4, 5]) // 7.0710678118654755\n   *     math.hypot(-2)        // 2\n   *\n   * See also:\n   *\n   *     abs, norm\n   *\n   * @param {... number | BigNumber | Array | Matrix} args    A list with numeric values or an Array or Matrix.\n   *                                                          Matrix and Array input is flattened and returns a\n   *                                                          single number for the whole matrix.\n   * @return {number | BigNumber} Returns the hypothenusa of the input values.\n   */\n\n  var hypot = typed(name, {\n    '... number | BigNumber': _hypot,\n    Array: function Array(x) {\n      return hypot.apply(hypot, flatten(x));\n    },\n    Matrix: function Matrix(x) {\n      return hypot.apply(hypot, flatten(x.toArray()));\n    }\n  });\n  /**\n   * Calculate the hypotenusa for an Array with values\n   * @param {Array.<number | BigNumber>} args\n   * @return {number | BigNumber} Returns the result\n   * @private\n   */\n\n  function _hypot(args) {\n    // code based on `hypot` from es6-shim:\n    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633\n    var result = 0;\n    var largest = 0;\n\n    for (var i = 0; i < args.length; i++) {\n      var value = abs(args[i]);\n\n      if (smaller(largest, value)) {\n        result = multiplyScalar(result, multiplyScalar(divideScalar(largest, value), divideScalar(largest, value)));\n        result = addScalar(result, 1);\n        largest = value;\n      } else {\n        result = addScalar(result, isPositive(value) ? multiplyScalar(divideScalar(value, largest), divideScalar(value, largest)) : value);\n      }\n    }\n\n    return multiplyScalar(largest, sqrt(result));\n  }\n\n  return hypot;\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/arithmetic/hypot.js"],"names":["factory","flatten","name","dependencies","createHypot","_ref","typed","abs","addScalar","divideScalar","multiplyScalar","sqrt","smaller","isPositive","hypot","_hypot","Array","x","apply","Matrix","toArray","args","result","largest","i","length","value"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,WAAjB,EAA8B,cAA9B,EAA8C,gBAA9C,EAAgE,MAAhE,EAAwE,SAAxE,EAAmF,YAAnF,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAClF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,GAAG,GAAGF,IAAI,CAACE,GADf;AAAA,MAEIC,SAAS,GAAGH,IAAI,CAACG,SAFrB;AAAA,MAGIC,YAAY,GAAGJ,IAAI,CAACI,YAHxB;AAAA,MAIIC,cAAc,GAAGL,IAAI,CAACK,cAJ1B;AAAA,MAKIC,IAAI,GAAGN,IAAI,CAACM,IALhB;AAAA,MAMIC,OAAO,GAAGP,IAAI,CAACO,OANnB;AAAA,MAOIC,UAAU,GAAGR,IAAI,CAACQ,UAPtB;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,MAAIC,KAAK,GAAGR,KAAK,CAACJ,IAAD,EAAO;AACtB,8BAA0Ba,MADJ;AAEtBC,IAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,CAAf,EAAkB;AACvB,aAAOH,KAAK,CAACI,KAAN,CAAYJ,KAAZ,EAAmBb,OAAO,CAACgB,CAAD,CAA1B,CAAP;AACD,KAJqB;AAKtBE,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBF,CAAhB,EAAmB;AACzB,aAAOH,KAAK,CAACI,KAAN,CAAYJ,KAAZ,EAAmBb,OAAO,CAACgB,CAAC,CAACG,OAAF,EAAD,CAA1B,CAAP;AACD;AAPqB,GAAP,CAAjB;AASA;;;;;;;AAOA,WAASL,MAAT,CAAgBM,IAAhB,EAAsB;AACpB;AACA;AACA,QAAIC,MAAM,GAAG,CAAb;AACA,QAAIC,OAAO,GAAG,CAAd;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,UAAIE,KAAK,GAAGnB,GAAG,CAACc,IAAI,CAACG,CAAD,CAAL,CAAf;;AAEA,UAAIZ,OAAO,CAACW,OAAD,EAAUG,KAAV,CAAX,EAA6B;AAC3BJ,QAAAA,MAAM,GAAGZ,cAAc,CAACY,MAAD,EAASZ,cAAc,CAACD,YAAY,CAACc,OAAD,EAAUG,KAAV,CAAb,EAA+BjB,YAAY,CAACc,OAAD,EAAUG,KAAV,CAA3C,CAAvB,CAAvB;AACAJ,QAAAA,MAAM,GAAGd,SAAS,CAACc,MAAD,EAAS,CAAT,CAAlB;AACAC,QAAAA,OAAO,GAAGG,KAAV;AACD,OAJD,MAIO;AACLJ,QAAAA,MAAM,GAAGd,SAAS,CAACc,MAAD,EAAST,UAAU,CAACa,KAAD,CAAV,GAAoBhB,cAAc,CAACD,YAAY,CAACiB,KAAD,EAAQH,OAAR,CAAb,EAA+Bd,YAAY,CAACiB,KAAD,EAAQH,OAAR,CAA3C,CAAlC,GAAiGG,KAA1G,CAAlB;AACD;AACF;;AAED,WAAOhB,cAAc,CAACa,OAAD,EAAUZ,IAAI,CAACW,MAAD,CAAd,CAArB;AACD;;AAED,SAAOR,KAAP;AACD,CA5E8C,CAAxC","sourcesContent":["import { factory } from '../../utils/factory';\nimport { flatten } from '../../utils/array';\nvar name = 'hypot';\nvar dependencies = ['typed', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'sqrt', 'smaller', 'isPositive'];\nexport var createHypot = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      abs = _ref.abs,\n      addScalar = _ref.addScalar,\n      divideScalar = _ref.divideScalar,\n      multiplyScalar = _ref.multiplyScalar,\n      sqrt = _ref.sqrt,\n      smaller = _ref.smaller,\n      isPositive = _ref.isPositive;\n\n  /**\n   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:\n   *\n   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)\n   *\n   * For matrix input, the hypotenusa is calculated for all values in the matrix.\n   *\n   * Syntax:\n   *\n   *     math.hypot(a, b, ...)\n   *     math.hypot([a, b, c, ...])\n   *\n   * Examples:\n   *\n   *     math.hypot(3, 4)      // 5\n   *     math.hypot(3, 4, 5)   // 7.0710678118654755\n   *     math.hypot([3, 4, 5]) // 7.0710678118654755\n   *     math.hypot(-2)        // 2\n   *\n   * See also:\n   *\n   *     abs, norm\n   *\n   * @param {... number | BigNumber | Array | Matrix} args    A list with numeric values or an Array or Matrix.\n   *                                                          Matrix and Array input is flattened and returns a\n   *                                                          single number for the whole matrix.\n   * @return {number | BigNumber} Returns the hypothenusa of the input values.\n   */\n  var hypot = typed(name, {\n    '... number | BigNumber': _hypot,\n    Array: function Array(x) {\n      return hypot.apply(hypot, flatten(x));\n    },\n    Matrix: function Matrix(x) {\n      return hypot.apply(hypot, flatten(x.toArray()));\n    }\n  });\n  /**\n   * Calculate the hypotenusa for an Array with values\n   * @param {Array.<number | BigNumber>} args\n   * @return {number | BigNumber} Returns the result\n   * @private\n   */\n\n  function _hypot(args) {\n    // code based on `hypot` from es6-shim:\n    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633\n    var result = 0;\n    var largest = 0;\n\n    for (var i = 0; i < args.length; i++) {\n      var value = abs(args[i]);\n\n      if (smaller(largest, value)) {\n        result = multiplyScalar(result, multiplyScalar(divideScalar(largest, value), divideScalar(largest, value)));\n        result = addScalar(result, 1);\n        largest = value;\n      } else {\n        result = addScalar(result, isPositive(value) ? multiplyScalar(divideScalar(value, largest), divideScalar(value, largest)) : value);\n      }\n    }\n\n    return multiplyScalar(largest, sqrt(result));\n  }\n\n  return hypot;\n});"]},"metadata":{},"sourceType":"module"}