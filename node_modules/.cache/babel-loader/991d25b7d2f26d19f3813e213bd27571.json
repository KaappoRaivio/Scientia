{"ast":null,"code":"import { isIndex } from '../../utils/is';\nimport { clone } from '../../utils/object';\nimport { validateIndex } from '../../utils/array';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs';\nimport { DimensionError } from '../../error/DimensionError';\nimport { factory } from '../../utils/factory';\nvar name = 'subset';\nvar dependencies = ['typed', 'matrix'];\nexport var createSubset = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix;\n  /**\n   * Get or set a subset of a matrix or string.\n   *\n   * Syntax:\n   *     math.subset(value, index)                                // retrieve a subset\n   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n   *\n   * Examples:\n   *\n   *     // get a subset\n   *     const d = [[1, 2], [3, 4]]\n   *     math.subset(d, math.index(1, 0))        // returns 3\n   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]\n   *\n   *     // replace a subset\n   *     const e = []\n   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]]\n   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]\n   *\n   * See also:\n   *\n   *     size, resize, squeeze, index\n   *\n   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n   * @param {Index} index                     An index containing ranges for each\n   *                                          dimension\n   * @param {*} [replacement]                 An array, matrix, or scalar.\n   *                                          If provided, the subset is replaced with replacement.\n   *                                          If not provided, the subset is returned\n   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n   *                                          the matrix is resized. If not provided,\n   *                                          math.matrix elements will be left undefined.\n   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\n   */\n\n  return typed(name, {\n    // get subset\n    'Array, Index': function ArrayIndex(value, index) {\n      var m = matrix(value);\n      var subset = m.subset(index); // returns a Matrix\n\n      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)\n    },\n    'Matrix, Index': function MatrixIndex(value, index) {\n      return value.subset(index);\n    },\n    'Object, Index': _getObjectProperty,\n    'string, Index': _getSubstring,\n    // set subset\n    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {\n      return matrix(clone(value)).subset(index, replacement, undefined).valueOf();\n    },\n    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {\n      return matrix(clone(value)).subset(index, replacement, defaultValue).valueOf();\n    },\n    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {\n      return value.clone().subset(index, replacement);\n    },\n    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {\n      return value.clone().subset(index, replacement, defaultValue);\n    },\n    'string, Index, string': _setSubstring,\n    'string, Index, string, string': _setSubstring,\n    'Object, Index, any': _setObjectProperty\n  });\n});\n/**\n * Retrieve a subset of a string\n * @param {string} str            string from which to get a substring\n * @param {Index} index           An index containing ranges for each dimension\n * @returns {string} substring\n * @private\n */\n\nfunction _getSubstring(str, index) {\n  if (!isIndex(index)) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size().length, 1);\n  } // validate whether the range is out of range\n\n\n  var strLen = str.length;\n  validateIndex(index.min()[0], strLen);\n  validateIndex(index.max()[0], strLen);\n  var range = index.dimension(0);\n  var substr = '';\n  range.forEach(function (v) {\n    substr += str.charAt(v);\n  });\n  return substr;\n}\n/**\n * Replace a substring in a string\n * @param {string} str            string to be replaced\n * @param {Index} index           An index containing ranges for each dimension\n * @param {string} replacement    Replacement string\n * @param {string} [defaultValue] Default value to be uses when resizing\n *                                the string. is ' ' by default\n * @returns {string} result\n * @private\n */\n\n\nfunction _setSubstring(str, index, replacement, defaultValue) {\n  if (!index || index.isIndex !== true) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size().length, 1);\n  }\n\n  if (defaultValue !== undefined) {\n    if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\n      throw new TypeError('Single character expected as defaultValue');\n    }\n  } else {\n    defaultValue = ' ';\n  }\n\n  var range = index.dimension(0);\n  var len = range.size()[0];\n\n  if (len !== replacement.length) {\n    throw new DimensionError(range.size()[0], replacement.length);\n  } // validate whether the range is out of range\n\n\n  var strLen = str.length;\n  validateIndex(index.min()[0]);\n  validateIndex(index.max()[0]); // copy the string into an array with characters\n\n  var chars = [];\n\n  for (var i = 0; i < strLen; i++) {\n    chars[i] = str.charAt(i);\n  }\n\n  range.forEach(function (v, i) {\n    chars[v] = replacement.charAt(i[0]);\n  }); // initialize undefined characters with a space\n\n  if (chars.length > strLen) {\n    for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {\n      if (!chars[_i]) {\n        chars[_i] = defaultValue;\n      }\n    }\n  }\n\n  return chars.join('');\n}\n/**\n * Retrieve a property from an object\n * @param {Object} object\n * @param {Index} index\n * @return {*} Returns the value of the property\n * @private\n */\n\n\nfunction _getObjectProperty(object, index) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n\n  var key = index.dimension(0);\n\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n\n  return getSafeProperty(object, key);\n}\n/**\n * Set a property on an object\n * @param {Object} object\n * @param {Index} index\n * @param {*} replacement\n * @return {*} Returns the updated object\n * @private\n */\n\n\nfunction _setObjectProperty(object, index, replacement) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n\n  var key = index.dimension(0);\n\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  } // clone the object, and apply the property to the clone\n\n\n  var updated = clone(object);\n  setSafeProperty(updated, key, replacement);\n  return updated;\n}","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/matrix/subset.js"],"names":["isIndex","clone","validateIndex","getSafeProperty","setSafeProperty","DimensionError","factory","name","dependencies","createSubset","_ref","typed","matrix","ArrayIndex","value","index","m","subset","isScalar","valueOf","MatrixIndex","_getObjectProperty","_getSubstring","ArrayIndexAny","replacement","undefined","ArrayIndexAnyAny","defaultValue","MatrixIndexAny","MatrixIndexAnyAny","_setSubstring","_setObjectProperty","str","TypeError","size","length","strLen","min","max","range","dimension","substr","forEach","v","charAt","len","chars","i","_i","_len","join","object","key","updated"],"mappings":"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","sourcesContent":["import { isIndex } from '../../utils/is';\nimport { clone } from '../../utils/object';\nimport { validateIndex } from '../../utils/array';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs';\nimport { DimensionError } from '../../error/DimensionError';\nimport { factory } from '../../utils/factory';\nvar name = 'subset';\nvar dependencies = ['typed', 'matrix'];\nexport var createSubset = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix;\n\n  /**\n   * Get or set a subset of a matrix or string.\n   *\n   * Syntax:\n   *     math.subset(value, index)                                // retrieve a subset\n   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n   *\n   * Examples:\n   *\n   *     // get a subset\n   *     const d = [[1, 2], [3, 4]]\n   *     math.subset(d, math.index(1, 0))        // returns 3\n   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]\n   *\n   *     // replace a subset\n   *     const e = []\n   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]]\n   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]\n   *\n   * See also:\n   *\n   *     size, resize, squeeze, index\n   *\n   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n   * @param {Index} index                     An index containing ranges for each\n   *                                          dimension\n   * @param {*} [replacement]                 An array, matrix, or scalar.\n   *                                          If provided, the subset is replaced with replacement.\n   *                                          If not provided, the subset is returned\n   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n   *                                          the matrix is resized. If not provided,\n   *                                          math.matrix elements will be left undefined.\n   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\n   */\n  return typed(name, {\n    // get subset\n    'Array, Index': function ArrayIndex(value, index) {\n      var m = matrix(value);\n      var subset = m.subset(index); // returns a Matrix\n\n      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)\n    },\n    'Matrix, Index': function MatrixIndex(value, index) {\n      return value.subset(index);\n    },\n    'Object, Index': _getObjectProperty,\n    'string, Index': _getSubstring,\n    // set subset\n    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {\n      return matrix(clone(value)).subset(index, replacement, undefined).valueOf();\n    },\n    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {\n      return matrix(clone(value)).subset(index, replacement, defaultValue).valueOf();\n    },\n    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {\n      return value.clone().subset(index, replacement);\n    },\n    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {\n      return value.clone().subset(index, replacement, defaultValue);\n    },\n    'string, Index, string': _setSubstring,\n    'string, Index, string, string': _setSubstring,\n    'Object, Index, any': _setObjectProperty\n  });\n});\n/**\n * Retrieve a subset of a string\n * @param {string} str            string from which to get a substring\n * @param {Index} index           An index containing ranges for each dimension\n * @returns {string} substring\n * @private\n */\n\nfunction _getSubstring(str, index) {\n  if (!isIndex(index)) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size().length, 1);\n  } // validate whether the range is out of range\n\n\n  var strLen = str.length;\n  validateIndex(index.min()[0], strLen);\n  validateIndex(index.max()[0], strLen);\n  var range = index.dimension(0);\n  var substr = '';\n  range.forEach(function (v) {\n    substr += str.charAt(v);\n  });\n  return substr;\n}\n/**\n * Replace a substring in a string\n * @param {string} str            string to be replaced\n * @param {Index} index           An index containing ranges for each dimension\n * @param {string} replacement    Replacement string\n * @param {string} [defaultValue] Default value to be uses when resizing\n *                                the string. is ' ' by default\n * @returns {string} result\n * @private\n */\n\n\nfunction _setSubstring(str, index, replacement, defaultValue) {\n  if (!index || index.isIndex !== true) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size().length, 1);\n  }\n\n  if (defaultValue !== undefined) {\n    if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\n      throw new TypeError('Single character expected as defaultValue');\n    }\n  } else {\n    defaultValue = ' ';\n  }\n\n  var range = index.dimension(0);\n  var len = range.size()[0];\n\n  if (len !== replacement.length) {\n    throw new DimensionError(range.size()[0], replacement.length);\n  } // validate whether the range is out of range\n\n\n  var strLen = str.length;\n  validateIndex(index.min()[0]);\n  validateIndex(index.max()[0]); // copy the string into an array with characters\n\n  var chars = [];\n\n  for (var i = 0; i < strLen; i++) {\n    chars[i] = str.charAt(i);\n  }\n\n  range.forEach(function (v, i) {\n    chars[v] = replacement.charAt(i[0]);\n  }); // initialize undefined characters with a space\n\n  if (chars.length > strLen) {\n    for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {\n      if (!chars[_i]) {\n        chars[_i] = defaultValue;\n      }\n    }\n  }\n\n  return chars.join('');\n}\n/**\n * Retrieve a property from an object\n * @param {Object} object\n * @param {Index} index\n * @return {*} Returns the value of the property\n * @private\n */\n\n\nfunction _getObjectProperty(object, index) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n\n  var key = index.dimension(0);\n\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n\n  return getSafeProperty(object, key);\n}\n/**\n * Set a property on an object\n * @param {Object} object\n * @param {Index} index\n * @param {*} replacement\n * @return {*} Returns the updated object\n * @private\n */\n\n\nfunction _setObjectProperty(object, index, replacement) {\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n\n  var key = index.dimension(0);\n\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  } // clone the object, and apply the property to the clone\n\n\n  var updated = clone(object);\n  setSafeProperty(updated, key, replacement);\n  return updated;\n}"]},"metadata":{},"sourceType":"module"}