{"ast":null,"code":"import { arraySize as size } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nvar name = 'kron';\nvar dependencies = ['typed', 'matrix', 'multiplyScalar'];\nexport var createKron = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      multiplyScalar = _ref.multiplyScalar;\n  /**\n     * Calculates the kronecker product of 2 matrices or vectors.\n     *\n     * NOTE: If a one dimensional vector / matrix is given, it will be\n     * wrapped so its two dimensions.\n     * See the examples.\n     *\n     * Syntax:\n     *\n     *    math.kron(x, y)\n     *\n     * Examples:\n     *\n     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])\n     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]\n     *\n     *    math.kron([1,1], [2,3,4])\n     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]\n     *\n     * See also:\n     *\n     *    multiply, dot, cross\n     *\n     * @param  {Array | Matrix} x     First vector\n     * @param  {Array | Matrix} y     Second vector\n     * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`\n     */\n\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      return matrix(_kron(x.toArray(), y.toArray()));\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      return matrix(_kron(x.toArray(), y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      return matrix(_kron(x, y.toArray()));\n    },\n    'Array, Array': _kron\n  });\n  /**\n     * Calculate the kronecker product of two matrices / vectors\n     * @param {Array} a  First vector\n     * @param {Array} b  Second vector\n     * @returns {Array} Returns the kronecker product of x and y\n     * @private\n     */\n\n  function _kron(a, b) {\n    // Deal with the dimensions of the matricies.\n    if (size(a).length === 1) {\n      // Wrap it in a 2D Matrix\n      a = [a];\n    }\n\n    if (size(b).length === 1) {\n      // Wrap it in a 2D Matrix\n      b = [b];\n    }\n\n    if (size(a).length > 2 || size(b).length > 2) {\n      throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' + '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');\n    }\n\n    var t = [];\n    var r = [];\n    return a.map(function (a) {\n      return b.map(function (b) {\n        r = [];\n        t.push(r);\n        return a.map(function (y) {\n          return b.map(function (x) {\n            return r.push(multiplyScalar(y, x));\n          });\n        });\n      });\n    }) && t;\n  }\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/matrix/kron.js"],"names":["arraySize","size","factory","name","dependencies","createKron","_ref","typed","matrix","multiplyScalar","MatrixMatrix","x","y","_kron","toArray","MatrixArray","ArrayMatrix","a","b","length","RangeError","JSON","stringify","t","r","map","push"],"mappings":"AAAA,SAASA,SAAS,IAAIC,IAAtB,QAAkC,mBAAlC;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,gBAApB,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACjF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAAA,MAEIC,cAAc,GAAGH,IAAI,CAACG,cAF1B;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAAOF,KAAK,CAACJ,IAAD,EAAO;AACjB,sBAAkB,SAASO,YAAT,CAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AAC5C,aAAOJ,MAAM,CAACK,KAAK,CAACF,CAAC,CAACG,OAAF,EAAD,EAAcF,CAAC,CAACE,OAAF,EAAd,CAAN,CAAb;AACD,KAHgB;AAIjB,qBAAiB,SAASC,WAAT,CAAqBJ,CAArB,EAAwBC,CAAxB,EAA2B;AAC1C,aAAOJ,MAAM,CAACK,KAAK,CAACF,CAAC,CAACG,OAAF,EAAD,EAAcF,CAAd,CAAN,CAAb;AACD,KANgB;AAOjB,qBAAiB,SAASI,WAAT,CAAqBL,CAArB,EAAwBC,CAAxB,EAA2B;AAC1C,aAAOJ,MAAM,CAACK,KAAK,CAACF,CAAD,EAAIC,CAAC,CAACE,OAAF,EAAJ,CAAN,CAAb;AACD,KATgB;AAUjB,oBAAgBD;AAVC,GAAP,CAAZ;AAYA;;;;;;;;AAQA,WAASA,KAAT,CAAeI,CAAf,EAAkBC,CAAlB,EAAqB;AACnB;AACA,QAAIjB,IAAI,CAACgB,CAAD,CAAJ,CAAQE,MAAR,KAAmB,CAAvB,EAA0B;AACxB;AACAF,MAAAA,CAAC,GAAG,CAACA,CAAD,CAAJ;AACD;;AAED,QAAIhB,IAAI,CAACiB,CAAD,CAAJ,CAAQC,MAAR,KAAmB,CAAvB,EAA0B;AACxB;AACAD,MAAAA,CAAC,GAAG,CAACA,CAAD,CAAJ;AACD;;AAED,QAAIjB,IAAI,CAACgB,CAAD,CAAJ,CAAQE,MAAR,GAAiB,CAAjB,IAAsBlB,IAAI,CAACiB,CAAD,CAAJ,CAAQC,MAAR,GAAiB,CAA3C,EAA8C;AAC5C,YAAM,IAAIC,UAAJ,CAAe,uEAAuE,YAAvE,GAAsFC,IAAI,CAACC,SAAL,CAAeL,CAAC,CAACE,MAAjB,CAAtF,GAAiH,QAAjH,GAA4HE,IAAI,CAACC,SAAL,CAAeJ,CAAC,CAACC,MAAjB,CAA5H,GAAuJ,GAAtK,CAAN;AACD;;AAED,QAAII,CAAC,GAAG,EAAR;AACA,QAAIC,CAAC,GAAG,EAAR;AACA,WAAOP,CAAC,CAACQ,GAAF,CAAM,UAAUR,CAAV,EAAa;AACxB,aAAOC,CAAC,CAACO,GAAF,CAAM,UAAUP,CAAV,EAAa;AACxBM,QAAAA,CAAC,GAAG,EAAJ;AACAD,QAAAA,CAAC,CAACG,IAAF,CAAOF,CAAP;AACA,eAAOP,CAAC,CAACQ,GAAF,CAAM,UAAUb,CAAV,EAAa;AACxB,iBAAOM,CAAC,CAACO,GAAF,CAAM,UAAUd,CAAV,EAAa;AACxB,mBAAOa,CAAC,CAACE,IAAF,CAAOjB,cAAc,CAACG,CAAD,EAAID,CAAJ,CAArB,CAAP;AACD,WAFM,CAAP;AAGD,SAJM,CAAP;AAKD,OARM,CAAP;AASD,KAVM,KAUDY,CAVN;AAWD;AACF,CAlF6C,CAAvC","sourcesContent":["import { arraySize as size } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nvar name = 'kron';\nvar dependencies = ['typed', 'matrix', 'multiplyScalar'];\nexport var createKron = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      multiplyScalar = _ref.multiplyScalar;\n\n  /**\n     * Calculates the kronecker product of 2 matrices or vectors.\n     *\n     * NOTE: If a one dimensional vector / matrix is given, it will be\n     * wrapped so its two dimensions.\n     * See the examples.\n     *\n     * Syntax:\n     *\n     *    math.kron(x, y)\n     *\n     * Examples:\n     *\n     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])\n     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]\n     *\n     *    math.kron([1,1], [2,3,4])\n     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]\n     *\n     * See also:\n     *\n     *    multiply, dot, cross\n     *\n     * @param  {Array | Matrix} x     First vector\n     * @param  {Array | Matrix} y     Second vector\n     * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`\n     */\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      return matrix(_kron(x.toArray(), y.toArray()));\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      return matrix(_kron(x.toArray(), y));\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      return matrix(_kron(x, y.toArray()));\n    },\n    'Array, Array': _kron\n  });\n  /**\n     * Calculate the kronecker product of two matrices / vectors\n     * @param {Array} a  First vector\n     * @param {Array} b  Second vector\n     * @returns {Array} Returns the kronecker product of x and y\n     * @private\n     */\n\n  function _kron(a, b) {\n    // Deal with the dimensions of the matricies.\n    if (size(a).length === 1) {\n      // Wrap it in a 2D Matrix\n      a = [a];\n    }\n\n    if (size(b).length === 1) {\n      // Wrap it in a 2D Matrix\n      b = [b];\n    }\n\n    if (size(a).length > 2 || size(b).length > 2) {\n      throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' + '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');\n    }\n\n    var t = [];\n    var r = [];\n    return a.map(function (a) {\n      return b.map(function (b) {\n        r = [];\n        t.push(r);\n        return a.map(function (y) {\n          return b.map(function (x) {\n            return r.push(multiplyScalar(y, x));\n          });\n        });\n      });\n    }) && t;\n  }\n});"]},"metadata":{},"sourceType":"module"}