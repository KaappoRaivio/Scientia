{"ast":null,"code":"import { factory } from '../utils/factory';\nimport { deepMap } from '../utils/collection';\nimport { format } from '../utils/number';\nvar name = 'string';\nvar dependencies = ['typed'];\nexport var createString = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Create a string or convert any object into a string.\n   * Elements of Arrays and Matrices are processed element wise.\n   *\n   * Syntax:\n   *\n   *    math.string(value)\n   *\n   * Examples:\n   *\n   *    math.string(4.2)               // returns string '4.2'\n   *    math.string(math.complex(3, 2) // returns string '3 + 2i'\n   *\n   *    const u = math.unit(5, 'km')\n   *    math.string(u.to('m'))         // returns string '5000 m'\n   *\n   *    math.string([true, false])     // returns ['true', 'false']\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, number, unit\n   *\n   * @param {* | Array | Matrix | null} [value]  A value to convert to a string\n   * @return {string | Array | Matrix} The created string\n   */\n\n  var string = typed(name, {\n    '': function _() {\n      return '';\n    },\n    number: format,\n    \"null\": function _null(x) {\n      return 'null';\n    },\n    \"boolean\": function boolean(x) {\n      return x + '';\n    },\n    string: function string(x) {\n      return x;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, string);\n    },\n    any: function any(x) {\n      return String(x);\n    }\n  });\n  return string;\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/type/string.js"],"names":["factory","deepMap","format","name","dependencies","createString","_ref","typed","string","_","number","_null","x","boolean","ArrayMatrix","any","String"],"mappings":"AAAA,SAASA,OAAT,QAAwB,kBAAxB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACnF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,MAAIC,MAAM,GAAGD,KAAK,CAACJ,IAAD,EAAO;AACvB,QAAI,SAASM,CAAT,GAAa;AACf,aAAO,EAAP;AACD,KAHsB;AAIvBC,IAAAA,MAAM,EAAER,MAJe;AAKvB,YAAQ,SAASS,KAAT,CAAeC,CAAf,EAAkB;AACxB,aAAO,MAAP;AACD,KAPsB;AAQvB,eAAW,SAASC,OAAT,CAAiBD,CAAjB,EAAoB;AAC7B,aAAOA,CAAC,GAAG,EAAX;AACD,KAVsB;AAWvBJ,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBI,CAAhB,EAAmB;AACzB,aAAOA,CAAP;AACD,KAbsB;AAcvB,sBAAkB,SAASE,WAAT,CAAqBF,CAArB,EAAwB;AACxC,aAAOX,OAAO,CAACW,CAAD,EAAIJ,MAAJ,CAAd;AACD,KAhBsB;AAiBvBO,IAAAA,GAAG,EAAE,SAASA,GAAT,CAAaH,CAAb,EAAgB;AACnB,aAAOI,MAAM,CAACJ,CAAD,CAAb;AACD;AAnBsB,GAAP,CAAlB;AAqBA,SAAOJ,MAAP;AACD,CAlD+C,CAAzC","sourcesContent":["import { factory } from '../utils/factory';\nimport { deepMap } from '../utils/collection';\nimport { format } from '../utils/number';\nvar name = 'string';\nvar dependencies = ['typed'];\nexport var createString = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Create a string or convert any object into a string.\n   * Elements of Arrays and Matrices are processed element wise.\n   *\n   * Syntax:\n   *\n   *    math.string(value)\n   *\n   * Examples:\n   *\n   *    math.string(4.2)               // returns string '4.2'\n   *    math.string(math.complex(3, 2) // returns string '3 + 2i'\n   *\n   *    const u = math.unit(5, 'km')\n   *    math.string(u.to('m'))         // returns string '5000 m'\n   *\n   *    math.string([true, false])     // returns ['true', 'false']\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, number, unit\n   *\n   * @param {* | Array | Matrix | null} [value]  A value to convert to a string\n   * @return {string | Array | Matrix} The created string\n   */\n  var string = typed(name, {\n    '': function _() {\n      return '';\n    },\n    number: format,\n    \"null\": function _null(x) {\n      return 'null';\n    },\n    \"boolean\": function boolean(x) {\n      return x + '';\n    },\n    string: function string(x) {\n      return x;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, string);\n    },\n    any: function any(x) {\n      return String(x);\n    }\n  });\n  return string;\n});"]},"metadata":{},"sourceType":"module"}