{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { createRange } from '../../function/matrix/range';\nvar name = 'range';\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];\nexport var createRangeTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      matrix = _ref.matrix,\n      bignumber = _ref.bignumber,\n      smaller = _ref.smaller,\n      smallerEq = _ref.smallerEq,\n      larger = _ref.larger,\n      largerEq = _ref.largerEq;\n  var range = createRange({\n    typed: typed,\n    config: config,\n    matrix: matrix,\n    bignumber: bignumber,\n    smaller: smaller,\n    smallerEq: smallerEq,\n    larger: larger,\n    largerEq: largerEq\n  });\n  /**\n   * Attach a transform function to math.range\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a range which includes the end value\n   */\n\n  return typed('range', {\n    '...any': function any(args) {\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n\n      if (typeof last !== 'boolean') {\n        // append a parameter includeEnd=true\n        args.push(true);\n      }\n\n      return range.apply(null, args);\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/expression/transform/range.transform.js"],"names":["factory","createRange","name","dependencies","createRangeTransform","_ref","typed","config","matrix","bignumber","smaller","smallerEq","larger","largerEq","range","any","args","lastIndex","length","last","push","apply","isTransformFunction"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,EAA+B,YAA/B,EAA6C,SAA7C,EAAwD,WAAxD,EAAqE,QAArE,EAA+E,UAA/E,CAAnB;AACA,OAAO,IAAIC,oBAAoB,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAC3F,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAAA,MAEIC,MAAM,GAAGH,IAAI,CAACG,MAFlB;AAAA,MAGIC,SAAS,GAAGJ,IAAI,CAACI,SAHrB;AAAA,MAIIC,OAAO,GAAGL,IAAI,CAACK,OAJnB;AAAA,MAKIC,SAAS,GAAGN,IAAI,CAACM,SALrB;AAAA,MAMIC,MAAM,GAAGP,IAAI,CAACO,MANlB;AAAA,MAOIC,QAAQ,GAAGR,IAAI,CAACQ,QAPpB;AAQA,MAAIC,KAAK,GAAGb,WAAW,CAAC;AACtBK,IAAAA,KAAK,EAAEA,KADe;AAEtBC,IAAAA,MAAM,EAAEA,MAFc;AAGtBC,IAAAA,MAAM,EAAEA,MAHc;AAItBC,IAAAA,SAAS,EAAEA,SAJW;AAKtBC,IAAAA,OAAO,EAAEA,OALa;AAMtBC,IAAAA,SAAS,EAAEA,SANW;AAOtBC,IAAAA,MAAM,EAAEA,MAPc;AAQtBC,IAAAA,QAAQ,EAAEA;AARY,GAAD,CAAvB;AAUA;;;;;;;AAOA,SAAOP,KAAK,CAAC,OAAD,EAAU;AACpB,cAAU,SAASS,GAAT,CAAaC,IAAb,EAAmB;AAC3B,UAAIC,SAAS,GAAGD,IAAI,CAACE,MAAL,GAAc,CAA9B;AACA,UAAIC,IAAI,GAAGH,IAAI,CAACC,SAAD,CAAf;;AAEA,UAAI,OAAOE,IAAP,KAAgB,SAApB,EAA+B;AAC7B;AACAH,QAAAA,IAAI,CAACI,IAAL,CAAU,IAAV;AACD;;AAED,aAAON,KAAK,CAACO,KAAN,CAAY,IAAZ,EAAkBL,IAAlB,CAAP;AACD;AAXmB,GAAV,CAAZ;AAaD,CAvCuD,EAuCrD;AACDM,EAAAA,mBAAmB,EAAE;AADpB,CAvCqD,CAAjD","sourcesContent":["import { factory } from '../../utils/factory';\nimport { createRange } from '../../function/matrix/range';\nvar name = 'range';\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];\nexport var createRangeTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      matrix = _ref.matrix,\n      bignumber = _ref.bignumber,\n      smaller = _ref.smaller,\n      smallerEq = _ref.smallerEq,\n      larger = _ref.larger,\n      largerEq = _ref.largerEq;\n  var range = createRange({\n    typed: typed,\n    config: config,\n    matrix: matrix,\n    bignumber: bignumber,\n    smaller: smaller,\n    smallerEq: smallerEq,\n    larger: larger,\n    largerEq: largerEq\n  });\n  /**\n   * Attach a transform function to math.range\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a range which includes the end value\n   */\n\n  return typed('range', {\n    '...any': function any(args) {\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n\n      if (typeof last !== 'boolean') {\n        // append a parameter includeEnd=true\n        args.push(true);\n      }\n\n      return range.apply(null, args);\n    }\n  });\n}, {\n  isTransformFunction: true\n});"]},"metadata":{},"sourceType":"module"}