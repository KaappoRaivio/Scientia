{"ast":null,"code":";\n\n(function (globalScope) {\n  'use strict';\n  /*\r\n   *  decimal.js v10.2.0\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\n  // The maximum exponent magnitude.\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\n\n  var EXP_LIMIT = 9e15,\n      // 0 to 9e15\n  // The limit on the value of `precision`, and on the value of the first argument to\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\n  MAX_DIGITS = 1e9,\n      // 0 to 1e9\n  // Base conversion alphabet.\n  NUMERALS = '0123456789abcdef',\n      // The natural logarithm of 10 (1025 digits).\n  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\n      // Pi (1025 digits).\n  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\n      // The initial configuration properties of the Decimal constructor.\n  DEFAULTS = {\n    // These values must be integers within the stated ranges (inclusive).\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\n    // The maximum number of significant digits of the result of a calculation or base conversion.\n    // E.g. `Decimal.config({ precision: 20 });`\n    precision: 20,\n    // 1 to MAX_DIGITS\n    // The rounding mode used when rounding to `precision`.\n    //\n    // ROUND_UP         0 Away from zero.\n    // ROUND_DOWN       1 Towards zero.\n    // ROUND_CEIL       2 Towards +Infinity.\n    // ROUND_FLOOR      3 Towards -Infinity.\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n    //\n    // E.g.\n    // `Decimal.rounding = 4;`\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\n    rounding: 4,\n    // 0 to 8\n    // The modulo mode used when calculating the modulus: a mod n.\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n    // The remainder (r) is calculated as: r = a - n * q.\n    //\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\n    // HALF_EVEN  6 The IEEE 754 remainder function.\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\n    //\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\n    // be used, but they may not give useful results.\n    modulo: 1,\n    // 0 to 9\n    // The exponent value at and beneath which `toString` returns exponential notation.\n    // JavaScript numbers: -7\n    toExpNeg: -7,\n    // 0 to -EXP_LIMIT\n    // The exponent value at and above which `toString` returns exponential notation.\n    // JavaScript numbers: 21\n    toExpPos: 21,\n    // 0 to EXP_LIMIT\n    // The minimum exponent value, beneath which underflow to zero occurs.\n    // JavaScript numbers: -324  (5e-324)\n    minE: -EXP_LIMIT,\n    // -1 to -EXP_LIMIT\n    // The maximum exponent value, above which overflow to Infinity occurs.\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\n    maxE: EXP_LIMIT,\n    // 1 to EXP_LIMIT\n    // Whether to use cryptographically-secure random number generation, if available.\n    crypto: false // true/false\n\n  },\n      // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\n  Decimal,\n      inexact,\n      noConflict,\n      quadrant,\n      external = true,\n      decimalError = '[DecimalError] ',\n      invalidArgument = decimalError + 'Invalid argument: ',\n      precisionLimitExceeded = decimalError + 'Precision limit exceeded',\n      cryptoUnavailable = decimalError + 'crypto unavailable',\n      mathfloor = Math.floor,\n      mathpow = Math.pow,\n      isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\n      isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\n      isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\n      isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n      BASE = 1e7,\n      LOG_BASE = 7,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      LN10_PRECISION = LN10.length - 1,\n      PI_PRECISION = PI.length - 1,\n      // Decimal.prototype object\n  P = {\n    name: '[object Decimal]'\n  }; // Decimal prototype methods\n\n  /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */\n\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\n\n  P.absoluteValue = P.abs = function () {\n    var x = new this.constructor(this);\n    if (x.s < 0) x.s = 1;\n    return finalise(x);\n  };\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */\n\n\n  P.ceil = function () {\n    return finalise(new this.constructor(this), this.e + 1, 2);\n  };\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */\n\n\n  P.comparedTo = P.cmp = function (y) {\n    var i,\n        j,\n        xdL,\n        ydL,\n        x = this,\n        xd = x.d,\n        yd = (y = new x.constructor(y)).d,\n        xs = x.s,\n        ys = y.s; // Either NaN or ±Infinity?\n\n    if (!xd || !yd) {\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\n    } // Either zero?\n\n\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0; // Signs differ?\n\n    if (xs !== ys) return xs; // Compare exponents.\n\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\n    xdL = xd.length;\n    ydL = yd.length; // Compare digit by digit.\n\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\n    } // Compare lengths.\n\n\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\n  };\n  /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */\n\n\n  P.cosine = P.cos = function () {\n    var pr,\n        rm,\n        x = this,\n        Ctor = x.constructor;\n    if (!x.d) return new Ctor(NaN); // cos(0) = cos(-0) = 1\n\n    if (!x.d[0]) return new Ctor(1);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n    Ctor.rounding = 1;\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\n  };\n  /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */\n\n\n  P.cubeRoot = P.cbrt = function () {\n    var e,\n        m,\n        n,\n        r,\n        rep,\n        s,\n        sd,\n        t,\n        t3,\n        t3plusx,\n        x = this,\n        Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    external = false; // Initial estimate.\n\n    s = x.s * mathpow(x.s * x, 1 / 3); // Math.cbrt underflow/overflow?\n    // Pass x to Math.pow as integer, then adjust the exponent of the result.\n\n    if (!s || Math.abs(s) == 1 / 0) {\n      n = digitsToString(x.d);\n      e = x.e; // Adjust n exponent so it is a multiple of 3 away from x exponent.\n\n      if (s = (e - n.length + 1) % 3) n += s == 1 || s == -2 ? '0' : '00';\n      s = mathpow(n, 1 / 3); // Rarely, e may be one less than the result exponent value.\n\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\n\n      if (s == 1 / 0) {\n        n = '5e' + e;\n      } else {\n        n = s.toExponential();\n        n = n.slice(0, n.indexOf('e') + 1) + e;\n      }\n\n      r = new Ctor(n);\n      r.s = x.s;\n    } else {\n      r = new Ctor(s.toString());\n    }\n\n    sd = (e = Ctor.precision) + 3; // Halley's method.\n    // TODO? Compare Newton's method.\n\n    for (;;) {\n      t = r;\n      t3 = t.times(t).times(t);\n      t3plusx = t3.plus(x);\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1); // TODO? Replace with for-loop and checkRoundingDigits.\n\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n        n = n.slice(sd - 3, sd + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\n        // , i.e. approaching a rounding boundary, continue the iteration.\n\n        if (n == '9999' || !rep && n == '4999') {\n          // On the first iteration only, check to see if rounding up gives the exact result as the\n          // nines may infinitely repeat.\n          if (!rep) {\n            finalise(t, e + 1, 0);\n\n            if (t.times(t).times(t).eq(x)) {\n              r = t;\n              break;\n            }\n          }\n\n          sd += 4;\n          rep = 1;\n        } else {\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n          // If not, then there are further digits and m will be truthy.\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n            // Truncate to the first rounding digit.\n            finalise(r, e + 1, 1);\n            m = !r.times(r).times(r).eq(x);\n          }\n\n          break;\n        }\n      }\n    }\n\n    external = true;\n    return finalise(r, e, Ctor.rounding, m);\n  };\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\n\n\n  P.decimalPlaces = P.dp = function () {\n    var w,\n        d = this.d,\n        n = NaN;\n\n    if (d) {\n      w = d.length - 1;\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last word.\n\n      w = d[w];\n      if (w) for (; w % 10 == 0; w /= 10) n--;\n      if (n < 0) n = 0;\n    }\n\n    return n;\n  };\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n\n\n  P.dividedBy = P.div = function (y) {\n    return divide(this, new this.constructor(y));\n  };\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n\n\n  P.dividedToIntegerBy = P.divToInt = function (y) {\n    var x = this,\n        Ctor = x.constructor;\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\n  };\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\n\n\n  P.equals = P.eq = function (y) {\n    return this.cmp(y) === 0;\n  };\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */\n\n\n  P.floor = function () {\n    return finalise(new this.constructor(this), this.e + 1, 3);\n  };\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\n\n\n  P.greaterThan = P.gt = function (y) {\n    return this.cmp(y) > 0;\n  };\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\n\n\n  P.greaterThanOrEqualTo = P.gte = function (y) {\n    var k = this.cmp(y);\n    return k == 1 || k === 0;\n  };\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */\n\n\n  P.hyperbolicCosine = P.cosh = function () {\n    var k,\n        n,\n        pr,\n        rm,\n        len,\n        x = this,\n        Ctor = x.constructor,\n        one = new Ctor(1);\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\n    if (x.isZero()) return one;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n    Ctor.rounding = 1;\n    len = x.d.length; // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\n    // Estimate the optimum number of times to use the argument reduction.\n    // TODO? Estimation reused from cosine() and may not be optimal here.\n\n    if (len < 32) {\n      k = Math.ceil(len / 3);\n      n = (1 / tinyPow(4, k)).toString();\n    } else {\n      k = 16;\n      n = '2.3283064365386962890625e-10';\n    }\n\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true); // Reverse argument reduction\n\n    var cosh2_x,\n        i = k,\n        d8 = new Ctor(8);\n\n    for (; i--;) {\n      cosh2_x = x.times(x);\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\n    }\n\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\n  };\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */\n\n\n  P.hyperbolicSine = P.sinh = function () {\n    var k,\n        pr,\n        rm,\n        len,\n        x = this,\n        Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n    Ctor.rounding = 1;\n    len = x.d.length;\n\n    if (len < 3) {\n      x = taylorSeries(Ctor, 2, x, x, true);\n    } else {\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\n      // 3 multiplications and 1 addition\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\n      // 4 multiplications and 2 additions\n      // Estimate the optimum number of times to use the argument reduction.\n      k = 1.4 * Math.sqrt(len);\n      k = k > 16 ? 16 : k | 0;\n      x = x.times(1 / tinyPow(5, k));\n      x = taylorSeries(Ctor, 2, x, x, true); // Reverse argument reduction\n\n      var sinh2_x,\n          d5 = new Ctor(5),\n          d16 = new Ctor(16),\n          d20 = new Ctor(20);\n\n      for (; k--;) {\n        sinh2_x = x.times(x);\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\n      }\n    }\n\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(x, pr, rm, true);\n  };\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */\n\n\n  P.hyperbolicTangent = P.tanh = function () {\n    var pr,\n        rm,\n        x = this,\n        Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(x.s);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 7;\n    Ctor.rounding = 1;\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\n  };\n  /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */\n\n\n  P.inverseCosine = P.acos = function () {\n    var halfPi,\n        x = this,\n        Ctor = x.constructor,\n        k = x.abs().cmp(1),\n        pr = Ctor.precision,\n        rm = Ctor.rounding;\n\n    if (k !== -1) {\n      return k === 0 // |x| is 1\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0) // |x| > 1 or x is NaN\n      : new Ctor(NaN);\n    }\n\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5); // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\n\n    Ctor.precision = pr + 6;\n    Ctor.rounding = 1;\n    x = x.asin();\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return halfPi.minus(x);\n  };\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */\n\n\n  P.inverseHyperbolicCosine = P.acosh = function () {\n    var pr,\n        rm,\n        x = this,\n        Ctor = x.constructor;\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\n    if (!x.isFinite()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\n    Ctor.rounding = 1;\n    external = false;\n    x = x.times(x).minus(1).sqrt().plus(x);\n    external = true;\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.ln();\n  };\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */\n\n\n  P.inverseHyperbolicSine = P.asinh = function () {\n    var pr,\n        rm,\n        x = this,\n        Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\n    Ctor.rounding = 1;\n    external = false;\n    x = x.times(x).plus(1).sqrt().plus(x);\n    external = true;\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.ln();\n  };\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */\n\n\n  P.inverseHyperbolicTangent = P.atanh = function () {\n    var pr,\n        rm,\n        wpr,\n        xsd,\n        x = this,\n        Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    xsd = x.sd();\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\n    Ctor.precision = wpr = xsd - x.e;\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\n    Ctor.precision = pr + 4;\n    Ctor.rounding = 1;\n    x = x.ln();\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.times(0.5);\n  };\n  /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */\n\n\n  P.inverseSine = P.asin = function () {\n    var halfPi,\n        k,\n        pr,\n        rm,\n        x = this,\n        Ctor = x.constructor;\n    if (x.isZero()) return new Ctor(x);\n    k = x.abs().cmp(1);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n\n    if (k !== -1) {\n      // |x| is 1\n      if (k === 0) {\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n        halfPi.s = x.s;\n        return halfPi;\n      } // |x| > 1 or x is NaN\n\n\n      return new Ctor(NaN);\n    } // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\n\n\n    Ctor.precision = pr + 6;\n    Ctor.rounding = 1;\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.times(2);\n  };\n  /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */\n\n\n  P.inverseTangent = P.atan = function () {\n    var i,\n        j,\n        k,\n        n,\n        px,\n        t,\n        r,\n        wpr,\n        x2,\n        x = this,\n        Ctor = x.constructor,\n        pr = Ctor.precision,\n        rm = Ctor.rounding;\n\n    if (!x.isFinite()) {\n      if (!x.s) return new Ctor(NaN);\n\n      if (pr + 4 <= PI_PRECISION) {\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\n        r.s = x.s;\n        return r;\n      }\n    } else if (x.isZero()) {\n      return new Ctor(x);\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\n      r.s = x.s;\n      return r;\n    }\n\n    Ctor.precision = wpr = pr + 10;\n    Ctor.rounding = 1; // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\n    // Argument reduction\n    // Ensure |x| < 0.42\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\n\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\n\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\n\n    external = false;\n    j = Math.ceil(wpr / LOG_BASE);\n    n = 1;\n    x2 = x.times(x);\n    r = new Ctor(x);\n    px = x; // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\n\n    for (; i !== -1;) {\n      px = px.times(x2);\n      t = r.minus(px.div(n += 2));\n      px = px.times(x2);\n      r = t.plus(px.div(n += 2));\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\n    }\n\n    if (k) r = r.times(2 << k - 1);\n    external = true;\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\n  };\n  /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */\n\n\n  P.isFinite = function () {\n    return !!this.d;\n  };\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\n\n\n  P.isInteger = P.isInt = function () {\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\n  };\n  /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */\n\n\n  P.isNaN = function () {\n    return !this.s;\n  };\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\n\n\n  P.isNegative = P.isNeg = function () {\n    return this.s < 0;\n  };\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\n\n\n  P.isPositive = P.isPos = function () {\n    return this.s > 0;\n  };\n  /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */\n\n\n  P.isZero = function () {\n    return !!this.d && this.d[0] === 0;\n  };\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\n\n\n  P.lessThan = P.lt = function (y) {\n    return this.cmp(y) < 0;\n  };\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\n\n\n  P.lessThanOrEqualTo = P.lte = function (y) {\n    return this.cmp(y) < 1;\n  };\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\n\n\n  P.logarithm = P.log = function (base) {\n    var isBase10,\n        d,\n        denominator,\n        k,\n        inf,\n        num,\n        sd,\n        r,\n        arg = this,\n        Ctor = arg.constructor,\n        pr = Ctor.precision,\n        rm = Ctor.rounding,\n        guard = 5; // Default base is 10.\n\n    if (base == null) {\n      base = new Ctor(10);\n      isBase10 = true;\n    } else {\n      base = new Ctor(base);\n      d = base.d; // Return NaN if base is negative, or non-finite, or is 0 or 1.\n\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\n      isBase10 = base.eq(10);\n    }\n\n    d = arg.d; // Is arg negative, non-finite, 0 or 1?\n\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\n    } // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\n    // integer power of 10.\n\n\n    if (isBase10) {\n      if (d.length > 1) {\n        inf = true;\n      } else {\n        for (k = d[0]; k % 10 === 0;) k /= 10;\n\n        inf = k !== 1;\n      }\n    }\n\n    external = false;\n    sd = pr + guard;\n    num = naturalLogarithm(arg, sd);\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd); // The result will have 5 rounding digits.\n\n    r = divide(num, denominator, sd, 1); // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\n    // calculate 10 further digits.\n    //\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\n    // further digits, the last 14 are nines, round up and assume the result is exact.\n    // Also assume the result is exact if the last 14 are zero.\n    //\n    // Example of a result that will be incorrectly rounded:\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\n    // place is still 2.6.\n\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\n      do {\n        sd += 10;\n        num = naturalLogarithm(arg, sd);\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n        r = divide(num, denominator, sd, 1);\n\n        if (!inf) {\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\n            r = finalise(r, pr + 1, 0);\n          }\n\n          break;\n        }\n      } while (checkRoundingDigits(r.d, k += 10, rm));\n    }\n\n    external = true;\n    return finalise(r, pr, rm);\n  };\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'lt');\r\n  };\r\n   */\n\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'gt');\r\n  };\r\n   */\n\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n\n\n  P.minus = P.sub = function (y) {\n    var d,\n        e,\n        i,\n        j,\n        k,\n        len,\n        pr,\n        rm,\n        xd,\n        xe,\n        xLTy,\n        yd,\n        x = this,\n        Ctor = x.constructor;\n    y = new Ctor(y); // If either is not finite...\n\n    if (!x.d || !y.d) {\n      // Return NaN if either is NaN.\n      if (!x.s || !y.s) y = new Ctor(NaN); // Return y negated if x is finite and y is ±Infinity.\n      else if (x.d) y.s = -y.s; // Return x if y is finite and x is ±Infinity.\n        // Return x if both are ±Infinity with different signs.\n        // Return NaN if both are ±Infinity with the same sign.\n        else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\n      return y;\n    } // If signs differ...\n\n\n    if (x.s != y.s) {\n      y.s = -y.s;\n      return x.plus(y);\n    }\n\n    xd = x.d;\n    yd = y.d;\n    pr = Ctor.precision;\n    rm = Ctor.rounding; // If either is zero...\n\n    if (!xd[0] || !yd[0]) {\n      // Return y negated if x is zero and y is non-zero.\n      if (yd[0]) y.s = -y.s; // Return x if y is zero and x is non-zero.\n      else if (xd[0]) y = new Ctor(x); // Return zero if both are zero.\n        // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\n        else return new Ctor(rm === 3 ? -0 : 0);\n      return external ? finalise(y, pr, rm) : y;\n    } // x and y are finite, non-zero numbers with the same sign.\n    // Calculate base 1e7 exponents.\n\n\n    e = mathfloor(y.e / LOG_BASE);\n    xe = mathfloor(x.e / LOG_BASE);\n    xd = xd.slice();\n    k = xe - e; // If base 1e7 exponents differ...\n\n    if (k) {\n      xLTy = k < 0;\n\n      if (xLTy) {\n        d = xd;\n        k = -k;\n        len = yd.length;\n      } else {\n        d = yd;\n        e = xe;\n        len = xd.length;\n      } // Numbers with massively different exponents would result in a very high number of\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\n\n\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\n\n      if (k > i) {\n        k = i;\n        d.length = 1;\n      } // Prepend zeros to equalise exponents.\n\n\n      d.reverse();\n\n      for (i = k; i--;) d.push(0);\n\n      d.reverse(); // Base 1e7 exponents equal.\n    } else {\n      // Check digits to determine which is the bigger number.\n      i = xd.length;\n      len = yd.length;\n      xLTy = i < len;\n      if (xLTy) len = i;\n\n      for (i = 0; i < len; i++) {\n        if (xd[i] != yd[i]) {\n          xLTy = xd[i] < yd[i];\n          break;\n        }\n      }\n\n      k = 0;\n    }\n\n    if (xLTy) {\n      d = xd;\n      xd = yd;\n      yd = d;\n      y.s = -y.s;\n    }\n\n    len = xd.length; // Append zeros to `xd` if shorter.\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\n\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0; // Subtract yd from xd.\n\n\n    for (i = yd.length; i > k;) {\n      if (xd[--i] < yd[i]) {\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\n\n        --xd[j];\n        xd[i] += BASE;\n      }\n\n      xd[i] -= yd[i];\n    } // Remove trailing zeros.\n\n\n    for (; xd[--len] === 0;) xd.pop(); // Remove leading zeros and adjust exponent accordingly.\n\n\n    for (; xd[0] === 0; xd.shift()) --e; // Zero?\n\n\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\n    y.d = xd;\n    y.e = getBase10Exponent(xd, e);\n    return external ? finalise(y, pr, rm) : y;\n  };\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */\n\n\n  P.modulo = P.mod = function (y) {\n    var q,\n        x = this,\n        Ctor = x.constructor;\n    y = new Ctor(y); // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\n\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN); // Return x if y is ±Infinity or x is ±0.\n\n    if (!y.d || x.d && !x.d[0]) {\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\n    } // Prevent rounding of intermediate calculations.\n\n\n    external = false;\n\n    if (Ctor.modulo == 9) {\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\n      // result = x - q * y    where  0 <= result < abs(y)\n      q = divide(x, y.abs(), 0, 3, 1);\n      q.s *= y.s;\n    } else {\n      q = divide(x, y, 0, Ctor.modulo, 1);\n    }\n\n    q = q.times(y);\n    external = true;\n    return x.minus(q);\n  };\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n\n\n  P.naturalExponential = P.exp = function () {\n    return naturalExponential(this);\n  };\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n\n\n  P.naturalLogarithm = P.ln = function () {\n    return naturalLogarithm(this);\n  };\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\n\n\n  P.negated = P.neg = function () {\n    var x = new this.constructor(this);\n    x.s = -x.s;\n    return finalise(x);\n  };\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n\n\n  P.plus = P.add = function (y) {\n    var carry,\n        d,\n        e,\n        i,\n        k,\n        len,\n        pr,\n        rm,\n        xd,\n        yd,\n        x = this,\n        Ctor = x.constructor;\n    y = new Ctor(y); // If either is not finite...\n\n    if (!x.d || !y.d) {\n      // Return NaN if either is NaN.\n      if (!x.s || !y.s) y = new Ctor(NaN); // Return x if y is finite and x is ±Infinity.\n      // Return x if both are ±Infinity with the same sign.\n      // Return NaN if both are ±Infinity with different signs.\n      // Return y if x is finite and y is ±Infinity.\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\n      return y;\n    } // If signs differ...\n\n\n    if (x.s != y.s) {\n      y.s = -y.s;\n      return x.minus(y);\n    }\n\n    xd = x.d;\n    yd = y.d;\n    pr = Ctor.precision;\n    rm = Ctor.rounding; // If either is zero...\n\n    if (!xd[0] || !yd[0]) {\n      // Return x if y is zero.\n      // Return y if y is non-zero.\n      if (!yd[0]) y = new Ctor(x);\n      return external ? finalise(y, pr, rm) : y;\n    } // x and y are finite, non-zero numbers with the same sign.\n    // Calculate base 1e7 exponents.\n\n\n    k = mathfloor(x.e / LOG_BASE);\n    e = mathfloor(y.e / LOG_BASE);\n    xd = xd.slice();\n    i = k - e; // If base 1e7 exponents differ...\n\n    if (i) {\n      if (i < 0) {\n        d = xd;\n        i = -i;\n        len = yd.length;\n      } else {\n        d = yd;\n        e = k;\n        len = xd.length;\n      } // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\n\n\n      k = Math.ceil(pr / LOG_BASE);\n      len = k > len ? k + 1 : len + 1;\n\n      if (i > len) {\n        i = len;\n        d.length = 1;\n      } // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\n\n\n      d.reverse();\n\n      for (; i--;) d.push(0);\n\n      d.reverse();\n    }\n\n    len = xd.length;\n    i = yd.length; // If yd is longer than xd, swap xd and yd so xd points to the longer array.\n\n    if (len - i < 0) {\n      i = len;\n      d = yd;\n      yd = xd;\n      xd = d;\n    } // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\n\n\n    for (carry = 0; i;) {\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\n      xd[i] %= BASE;\n    }\n\n    if (carry) {\n      xd.unshift(carry);\n      ++e;\n    } // Remove trailing zeros.\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n\n\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\n\n    y.d = xd;\n    y.e = getBase10Exponent(xd, e);\n    return external ? finalise(y, pr, rm) : y;\n  };\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\n\n\n  P.precision = P.sd = function (z) {\n    var k,\n        x = this;\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\n\n    if (x.d) {\n      k = getPrecision(x.d);\n      if (z && x.e + 1 > k) k = x.e + 1;\n    } else {\n      k = NaN;\n    }\n\n    return k;\n  };\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\n\n\n  P.round = function () {\n    var x = this,\n        Ctor = x.constructor;\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\n  };\n  /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */\n\n\n  P.sine = P.sin = function () {\n    var pr,\n        rm,\n        x = this,\n        Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n    Ctor.rounding = 1;\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\n  };\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */\n\n\n  P.squareRoot = P.sqrt = function () {\n    var m,\n        n,\n        sd,\n        r,\n        rep,\n        t,\n        x = this,\n        d = x.d,\n        e = x.e,\n        s = x.s,\n        Ctor = x.constructor; // Negative/NaN/Infinity/zero?\n\n    if (s !== 1 || !d || !d[0]) {\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\n    }\n\n    external = false; // Initial estimate.\n\n    s = Math.sqrt(+x); // Math.sqrt underflow/overflow?\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n\n    if (s == 0 || s == 1 / 0) {\n      n = digitsToString(d);\n      if ((n.length + e) % 2 == 0) n += '0';\n      s = Math.sqrt(n);\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\n\n      if (s == 1 / 0) {\n        n = '1e' + e;\n      } else {\n        n = s.toExponential();\n        n = n.slice(0, n.indexOf('e') + 1) + e;\n      }\n\n      r = new Ctor(n);\n    } else {\n      r = new Ctor(s.toString());\n    }\n\n    sd = (e = Ctor.precision) + 3; // Newton-Raphson iteration.\n\n    for (;;) {\n      t = r;\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5); // TODO? Replace with for-loop and checkRoundingDigits.\n\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n        n = n.slice(sd - 3, sd + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\n\n        if (n == '9999' || !rep && n == '4999') {\n          // On the first iteration only, check to see if rounding up gives the exact result as the\n          // nines may infinitely repeat.\n          if (!rep) {\n            finalise(t, e + 1, 0);\n\n            if (t.times(t).eq(x)) {\n              r = t;\n              break;\n            }\n          }\n\n          sd += 4;\n          rep = 1;\n        } else {\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n          // If not, then there are further digits and m will be truthy.\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n            // Truncate to the first rounding digit.\n            finalise(r, e + 1, 1);\n            m = !r.times(r).eq(x);\n          }\n\n          break;\n        }\n      }\n    }\n\n    external = true;\n    return finalise(r, e, Ctor.rounding, m);\n  };\n  /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */\n\n\n  P.tangent = P.tan = function () {\n    var pr,\n        rm,\n        x = this,\n        Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 10;\n    Ctor.rounding = 1;\n    x = x.sin();\n    x.s = 1;\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\n  };\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */\n\n\n  P.times = P.mul = function (y) {\n    var carry,\n        e,\n        i,\n        k,\n        r,\n        rL,\n        t,\n        xdL,\n        ydL,\n        x = this,\n        Ctor = x.constructor,\n        xd = x.d,\n        yd = (y = new Ctor(y)).d;\n    y.s *= x.s; // If either is NaN, ±Infinity or ±0...\n\n    if (!xd || !xd[0] || !yd || !yd[0]) {\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd // Return NaN if either is NaN.\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\n      ? NaN // Return ±Infinity if either is ±Infinity.\n      // Return ±0 if either is ±0.\n      : !xd || !yd ? y.s / 0 : y.s * 0);\n    }\n\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\n    xdL = xd.length;\n    ydL = yd.length; // Ensure xd points to the longer array.\n\n    if (xdL < ydL) {\n      r = xd;\n      xd = yd;\n      yd = r;\n      rL = xdL;\n      xdL = ydL;\n      ydL = rL;\n    } // Initialise the result array with zeros.\n\n\n    r = [];\n    rL = xdL + ydL;\n\n    for (i = rL; i--;) r.push(0); // Multiply!\n\n\n    for (i = ydL; --i >= 0;) {\n      carry = 0;\n\n      for (k = xdL + i; k > i;) {\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\n        r[k--] = t % BASE | 0;\n        carry = t / BASE | 0;\n      }\n\n      r[k] = (r[k] + carry) % BASE | 0;\n    } // Remove trailing zeros.\n\n\n    for (; !r[--rL];) r.pop();\n\n    if (carry) ++e;else r.shift();\n    y.d = r;\n    y.e = getBase10Exponent(r, e);\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\n  };\n  /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n\n\n  P.toBinary = function (sd, rm) {\n    return toStringBinary(this, 2, sd, rm);\n  };\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n\n\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\n    var x = this,\n        Ctor = x.constructor;\n    x = new Ctor(x);\n    if (dp === void 0) return x;\n    checkInt32(dp, 0, MAX_DIGITS);\n    if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n    return finalise(x, dp + x.e + 1, rm);\n  };\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n\n\n  P.toExponential = function (dp, rm) {\n    var str,\n        x = this,\n        Ctor = x.constructor;\n\n    if (dp === void 0) {\n      str = finiteToString(x, true);\n    } else {\n      checkInt32(dp, 0, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n      x = finalise(new Ctor(x), dp + 1, rm);\n      str = finiteToString(x, true, dp + 1);\n    }\n\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\n\n\n  P.toFixed = function (dp, rm) {\n    var str,\n        y,\n        x = this,\n        Ctor = x.constructor;\n\n    if (dp === void 0) {\n      str = finiteToString(x);\n    } else {\n      checkInt32(dp, 0, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\n      str = finiteToString(y, false, dp + y.e + 1);\n    } // To determine whether to add the minus sign look at the value before it was rounded,\n    // i.e. look at `x` rather than `y`.\n\n\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n  /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */\n\n\n  P.toFraction = function (maxD) {\n    var d,\n        d0,\n        d1,\n        d2,\n        e,\n        k,\n        n,\n        n0,\n        n1,\n        pr,\n        q,\n        r,\n        x = this,\n        xd = x.d,\n        Ctor = x.constructor;\n    if (!xd) return new Ctor(x);\n    n1 = d0 = new Ctor(1);\n    d1 = n0 = new Ctor(0);\n    d = new Ctor(d1);\n    e = d.e = getPrecision(xd) - x.e - 1;\n    k = e % LOG_BASE;\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\n\n    if (maxD == null) {\n      // d is 10**e, the minimum max-denominator needed.\n      maxD = e > 0 ? d : n1;\n    } else {\n      n = new Ctor(maxD);\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\n      maxD = n.gt(d) ? e > 0 ? d : n1 : n;\n    }\n\n    external = false;\n    n = new Ctor(digitsToString(xd));\n    pr = Ctor.precision;\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\n\n    for (;;) {\n      q = divide(n, d, 0, 1, 1);\n      d2 = d0.plus(q.times(d1));\n      if (d2.cmp(maxD) == 1) break;\n      d0 = d1;\n      d1 = d2;\n      d2 = n1;\n      n1 = n0.plus(q.times(d2));\n      n0 = d2;\n      d2 = d;\n      d = n.minus(q.times(d2));\n      n = d2;\n    }\n\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\n    n0 = n0.plus(d2.times(n1));\n    d0 = d0.plus(d2.times(d1));\n    n0.s = n1.s = x.s; // Determine which fraction is closer to x, n0/d0 or n1/d1?\n\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\n    Ctor.precision = pr;\n    external = true;\n    return r;\n  };\n  /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n\n\n  P.toHexadecimal = P.toHex = function (sd, rm) {\n    return toStringBinary(this, 16, sd, rm);\n  };\n  /*\r\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */\n\n\n  P.toNearest = function (y, rm) {\n    var x = this,\n        Ctor = x.constructor;\n    x = new Ctor(x);\n\n    if (y == null) {\n      // If x is not finite, return x.\n      if (!x.d) return x;\n      y = new Ctor(1);\n      rm = Ctor.rounding;\n    } else {\n      y = new Ctor(y);\n\n      if (rm === void 0) {\n        rm = Ctor.rounding;\n      } else {\n        checkInt32(rm, 0, 8);\n      } // If x is not finite, return x if y is not NaN, else NaN.\n\n\n      if (!x.d) return y.s ? x : y; // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\n\n      if (!y.d) {\n        if (y.s) y.s = x.s;\n        return y;\n      }\n    } // If y is not zero, calculate the nearest multiple of y to x.\n\n\n    if (y.d[0]) {\n      external = false;\n      x = divide(x, y, 0, rm, 1).times(y);\n      external = true;\n      finalise(x); // If y is zero, return zero with the sign of x.\n    } else {\n      y.s = x.s;\n      x = y;\n    }\n\n    return x;\n  };\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */\n\n\n  P.toNumber = function () {\n    return +this;\n  };\n  /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n\n\n  P.toOctal = function (sd, rm) {\n    return toStringBinary(this, 8, sd, rm);\n  };\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, ±0)                            = 1\r\n     *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\n\n\n  P.toPower = P.pow = function (y) {\n    var e,\n        k,\n        pr,\n        r,\n        rm,\n        s,\n        x = this,\n        Ctor = x.constructor,\n        yn = +(y = new Ctor(y)); // Either ±Infinity, NaN or ±0?\n\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\n    x = new Ctor(x);\n    if (x.eq(1)) return x;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    if (y.eq(1)) return finalise(x, pr, rm); // y exponent\n\n    e = mathfloor(y.e / LOG_BASE); // If y is a small integer use the 'exponentiation by squaring' algorithm.\n\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\n      r = intPow(Ctor, x, k, pr);\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\n    }\n\n    s = x.s; // if x is negative\n\n    if (s < 0) {\n      // if y is not an integer\n      if (e < y.d.length - 1) return new Ctor(NaN); // Result is positive if x is negative and the last digit of integer y is even.\n\n      if ((y.d[e] & 1) == 0) s = 1; // if x.eq(-1)\n\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\n        x.s = s;\n        return x;\n      }\n    } // Estimate result exponent.\n    // x^y = 10^e,  where e = y * log10(x)\n    // log10(x) = log10(x_significand) + x_exponent\n    // log10(x_significand) = ln(x_significand) / ln(10)\n\n\n    k = mathpow(+x, yn);\n    e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + '').e; // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\n    // Overflow/underflow?\n\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\n    external = false;\n    Ctor.rounding = x.s = 1; // Estimate the extra guard digits needed to ensure five correct rounding digits from\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\n    // new Decimal(2.32456).pow('2087987436534566.46411')\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\n\n    k = Math.min(12, (e + '').length); // r = x^y = exp(y*ln(x))\n\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr); // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\n\n    if (r.d) {\n      // Truncate to the required precision plus five rounding digits.\n      r = finalise(r, pr + 5, 1); // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\n      // the result.\n\n      if (checkRoundingDigits(r.d, pr, rm)) {\n        e = pr + 10; // Truncate to the increased precision plus five rounding digits.\n\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1); // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\n\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\n          r = finalise(r, pr + 1, 0);\n        }\n      }\n    }\n\n    r.s = s;\n    external = true;\n    Ctor.rounding = rm;\n    return finalise(r, pr, rm);\n  };\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n\n\n  P.toPrecision = function (sd, rm) {\n    var str,\n        x = this,\n        Ctor = x.constructor;\n\n    if (sd === void 0) {\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    } else {\n      checkInt32(sd, 1, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n      x = finalise(new Ctor(x), sd, rm);\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\n    }\n\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */\n\n\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\n    var x = this,\n        Ctor = x.constructor;\n\n    if (sd === void 0) {\n      sd = Ctor.precision;\n      rm = Ctor.rounding;\n    } else {\n      checkInt32(sd, 1, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n    }\n\n    return finalise(new Ctor(x), sd, rm);\n  };\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\n\n\n  P.toString = function () {\n    var x = this,\n        Ctor = x.constructor,\n        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */\n\n\n  P.truncated = P.trunc = function () {\n    return finalise(new this.constructor(this), this.e + 1, 1);\n  };\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */\n\n\n  P.valueOf = P.toJSON = function () {\n    var x = this,\n        Ctor = x.constructor,\n        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    return x.isNeg() ? '-' + str : str;\n  };\n  /*\r\n  // Add aliases to match BigDecimal method names.\r\n  // P.add = P.plus;\r\n  P.subtract = P.minus;\r\n  P.multiply = P.times;\r\n  P.divide = P.div;\r\n  P.remainder = P.mod;\r\n  P.compareTo = P.cmp;\r\n  P.negate = P.neg;\r\n   */\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\n\n  /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */\n\n\n  function digitsToString(d) {\n    var i,\n        k,\n        ws,\n        indexOfLastWord = d.length - 1,\n        str = '',\n        w = d[0];\n\n    if (indexOfLastWord > 0) {\n      str += w;\n\n      for (i = 1; i < indexOfLastWord; i++) {\n        ws = d[i] + '';\n        k = LOG_BASE - ws.length;\n        if (k) str += getZeroString(k);\n        str += ws;\n      }\n\n      w = d[i];\n      ws = w + '';\n      k = LOG_BASE - ws.length;\n      if (k) str += getZeroString(k);\n    } else if (w === 0) {\n      return '0';\n    } // Remove trailing zeros of last w.\n\n\n    for (; w % 10 === 0;) w /= 10;\n\n    return str + w;\n  }\n\n  function checkInt32(i, min, max) {\n    if (i !== ~~i || i < min || i > max) {\n      throw Error(invalidArgument + i);\n    }\n  }\n  /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */\n\n\n  function checkRoundingDigits(d, i, rm, repeating) {\n    var di, k, r, rd; // Get the length of the first word of the array d.\n\n    for (k = d[0]; k >= 10; k /= 10) --i; // Is the rounding digit in the first word of d?\n\n\n    if (--i < 0) {\n      i += LOG_BASE;\n      di = 0;\n    } else {\n      di = Math.ceil((i + 1) / LOG_BASE);\n      i %= LOG_BASE;\n    } // i is the index (0 - 6) of the rounding digit.\n    // E.g. if within the word 3487563 the first rounding digit is 5,\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\n\n\n    k = mathpow(10, LOG_BASE - i);\n    rd = d[di] % k | 0;\n\n    if (repeating == null) {\n      if (i < 3) {\n        if (i == 0) rd = rd / 100 | 0;else if (i == 1) rd = rd / 10 | 0;\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\n      } else {\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\n      }\n    } else {\n      if (i < 4) {\n        if (i == 0) rd = rd / 1000 | 0;else if (i == 1) rd = rd / 100 | 0;else if (i == 2) rd = rd / 10 | 0;\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\n      } else {\n        r = ((repeating || rm < 4) && rd + 1 == k || !repeating && rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\n      }\n    }\n\n    return r;\n  } // Convert string of `baseIn` to an array of numbers of `baseOut`.\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\n\n\n  function convertBase(str, baseIn, baseOut) {\n    var j,\n        arr = [0],\n        arrL,\n        i = 0,\n        strL = str.length;\n\n    for (; i < strL;) {\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\n\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\n\n      for (j = 0; j < arr.length; j++) {\n        if (arr[j] > baseOut - 1) {\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\n          arr[j + 1] += arr[j] / baseOut | 0;\n          arr[j] %= baseOut;\n        }\n      }\n    }\n\n    return arr.reverse();\n  }\n  /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\n\n\n  function cosine(Ctor, x) {\n    var k,\n        y,\n        len = x.d.length; // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\n    // Estimate the optimum number of times to use the argument reduction.\n\n    if (len < 32) {\n      k = Math.ceil(len / 3);\n      y = (1 / tinyPow(4, k)).toString();\n    } else {\n      k = 16;\n      y = '2.3283064365386962890625e-10';\n    }\n\n    Ctor.precision += k;\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1)); // Reverse argument reduction\n\n    for (var i = k; i--;) {\n      var cos2x = x.times(x);\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\n    }\n\n    Ctor.precision -= k;\n    return x;\n  }\n  /*\r\n   * Perform division in the specified base.\r\n   */\n\n\n  var divide = function () {\n    // Assumes non-zero x and k, and hence non-zero result.\n    function multiplyInteger(x, k, base) {\n      var temp,\n          carry = 0,\n          i = x.length;\n\n      for (x = x.slice(); i--;) {\n        temp = x[i] * k + carry;\n        x[i] = temp % base | 0;\n        carry = temp / base | 0;\n      }\n\n      if (carry) x.unshift(carry);\n      return x;\n    }\n\n    function compare(a, b, aL, bL) {\n      var i, r;\n\n      if (aL != bL) {\n        r = aL > bL ? 1 : -1;\n      } else {\n        for (i = r = 0; i < aL; i++) {\n          if (a[i] != b[i]) {\n            r = a[i] > b[i] ? 1 : -1;\n            break;\n          }\n        }\n      }\n\n      return r;\n    }\n\n    function subtract(a, b, aL, base) {\n      var i = 0; // Subtract b from a.\n\n      for (; aL--;) {\n        a[aL] -= i;\n        i = a[aL] < b[aL] ? 1 : 0;\n        a[aL] = i * base + a[aL] - b[aL];\n      } // Remove leading zeros.\n\n\n      for (; !a[0] && a.length > 1;) a.shift();\n    }\n\n    return function (x, y, pr, rm, dp, base) {\n      var cmp,\n          e,\n          i,\n          k,\n          logBase,\n          more,\n          prod,\n          prodL,\n          q,\n          qd,\n          rem,\n          remL,\n          rem0,\n          sd,\n          t,\n          xi,\n          xL,\n          yd0,\n          yL,\n          yz,\n          Ctor = x.constructor,\n          sign = x.s == y.s ? 1 : -1,\n          xd = x.d,\n          yd = y.d; // Either NaN, Infinity or 0?\n\n      if (!xd || !xd[0] || !yd || !yd[0]) {\n        return new Ctor( // Return NaN if either NaN, or both Infinity or 0.\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN : // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\n      }\n\n      if (base) {\n        logBase = 1;\n        e = x.e - y.e;\n      } else {\n        base = BASE;\n        logBase = LOG_BASE;\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\n      }\n\n      yL = yd.length;\n      xL = xd.length;\n      q = new Ctor(sign);\n      qd = q.d = []; // Result exponent may be one less than e.\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\n\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\n\n      if (yd[i] > (xd[i] || 0)) e--;\n\n      if (pr == null) {\n        sd = pr = Ctor.precision;\n        rm = Ctor.rounding;\n      } else if (dp) {\n        sd = pr + (x.e - y.e) + 1;\n      } else {\n        sd = pr;\n      }\n\n      if (sd < 0) {\n        qd.push(1);\n        more = true;\n      } else {\n        // Convert precision in number of base 10 digits to base 1e7 digits.\n        sd = sd / logBase + 2 | 0;\n        i = 0; // divisor < 1e7\n\n        if (yL == 1) {\n          k = 0;\n          yd = yd[0];\n          sd++; // k is the carry.\n\n          for (; (i < xL || k) && sd--; i++) {\n            t = k * base + (xd[i] || 0);\n            qd[i] = t / yd | 0;\n            k = t % yd | 0;\n          }\n\n          more = k || i < xL; // divisor >= 1e7\n        } else {\n          // Normalise xd and yd so highest order digit of yd is >= base/2\n          k = base / (yd[0] + 1) | 0;\n\n          if (k > 1) {\n            yd = multiplyInteger(yd, k, base);\n            xd = multiplyInteger(xd, k, base);\n            yL = yd.length;\n            xL = xd.length;\n          }\n\n          xi = yL;\n          rem = xd.slice(0, yL);\n          remL = rem.length; // Add zeros to make remainder as long as divisor.\n\n          for (; remL < yL;) rem[remL++] = 0;\n\n          yz = yd.slice();\n          yz.unshift(0);\n          yd0 = yd[0];\n          if (yd[1] >= base / 2) ++yd0;\n\n          do {\n            k = 0; // Compare divisor and remainder.\n\n            cmp = compare(yd, rem, yL, remL); // If divisor < remainder.\n\n            if (cmp < 0) {\n              // Calculate trial digit, k.\n              rem0 = rem[0];\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // k will be how many times the divisor goes into the current remainder.\n\n              k = rem0 / yd0 | 0; //  Algorithm:\n              //  1. product = divisor * trial digit (k)\n              //  2. if product > remainder: product -= divisor, k--\n              //  3. remainder -= product\n              //  4. if product was < remainder at 2:\n              //    5. compare new remainder and divisor\n              //    6. If remainder > divisor: remainder -= divisor, k++\n\n              if (k > 1) {\n                if (k >= base) k = base - 1; // product = divisor * trial digit.\n\n                prod = multiplyInteger(yd, k, base);\n                prodL = prod.length;\n                remL = rem.length; // Compare product and remainder.\n\n                cmp = compare(prod, rem, prodL, remL); // product > remainder.\n\n                if (cmp == 1) {\n                  k--; // Subtract divisor from product.\n\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\n                }\n              } else {\n                // cmp is -1.\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\n                if (k == 0) cmp = k = 1;\n                prod = yd.slice();\n              }\n\n              prodL = prod.length;\n              if (prodL < remL) prod.unshift(0); // Subtract product from remainder.\n\n              subtract(rem, prod, remL, base); // If product was < previous remainder.\n\n              if (cmp == -1) {\n                remL = rem.length; // Compare divisor and new remainder.\n\n                cmp = compare(yd, rem, yL, remL); // If divisor < new remainder, subtract divisor from remainder.\n\n                if (cmp < 1) {\n                  k++; // Subtract divisor from remainder.\n\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\n                }\n              }\n\n              remL = rem.length;\n            } else if (cmp === 0) {\n              k++;\n              rem = [0];\n            } // if cmp === 1, k will be 0\n            // Add the next digit, k, to the result array.\n\n\n            qd[i++] = k; // Update the remainder.\n\n            if (cmp && rem[0]) {\n              rem[remL++] = xd[xi] || 0;\n            } else {\n              rem = [xd[xi]];\n              remL = 1;\n            }\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\n\n          more = rem[0] !== void 0;\n        } // Leading zero?\n\n\n        if (!qd[0]) qd.shift();\n      } // logBase is 1 when divide is being used for base conversion.\n\n\n      if (logBase == 1) {\n        q.e = e;\n        inexact = more;\n      } else {\n        // To calculate q.e, first get the number of digits of qd[0].\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\n\n        q.e = i + e * logBase - 1;\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\n      }\n\n      return q;\n    };\n  }();\n  /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */\n\n\n  function finalise(x, sd, rm, isTruncated) {\n    var digits,\n        i,\n        j,\n        k,\n        rd,\n        roundUp,\n        w,\n        xd,\n        xdi,\n        Ctor = x.constructor; // Don't round if sd is null or undefined.\n\n    out: if (sd != null) {\n      xd = x.d; // Infinity/NaN.\n\n      if (!xd) return x; // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\n      // w: the word of xd containing rd, a base 1e7 number.\n      // xdi: the index of w within xd.\n      // digits: the number of digits of w.\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\n      // they had leading zeros)\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\n      // Get the length of the first word of the digits array xd.\n\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\n\n      i = sd - digits; // Is the rounding digit in the first word of xd?\n\n      if (i < 0) {\n        i += LOG_BASE;\n        j = sd;\n        w = xd[xdi = 0]; // Get the rounding digit at index j of w.\n\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\n      } else {\n        xdi = Math.ceil((i + 1) / LOG_BASE);\n        k = xd.length;\n\n        if (xdi >= k) {\n          if (isTruncated) {\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\n            for (; k++ <= xdi;) xd.push(0);\n\n            w = rd = 0;\n            digits = 1;\n            i %= LOG_BASE;\n            j = i - LOG_BASE + 1;\n          } else {\n            break out;\n          }\n        } else {\n          w = k = xd[xdi]; // Get the number of digits of w.\n\n          for (digits = 1; k >= 10; k /= 10) digits++; // Get the index of rd within w.\n\n\n          i %= LOG_BASE; // Get the index of rd within w, adjusted for leading zeros.\n          // The number of leading zeros of w is given by LOG_BASE - digits.\n\n          j = i - LOG_BASE + digits; // Get the rounding digit at index j of w.\n\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\n        }\n      } // Are there any non-zero digits after the rounding digit?\n\n\n      isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1)); // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\n      // will give 714.\n\n      roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.\n      (i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n\n      if (sd < 1 || !xd[0]) {\n        xd.length = 0;\n\n        if (roundUp) {\n          // Convert sd to decimal places.\n          sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\n          x.e = -sd || 0;\n        } else {\n          // Zero.\n          xd[0] = x.e = 0;\n        }\n\n        return x;\n      } // Remove excess digits.\n\n\n      if (i == 0) {\n        xd.length = xdi;\n        k = 1;\n        xdi--;\n      } else {\n        xd.length = xdi + 1;\n        k = mathpow(10, LOG_BASE - i); // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n        // j > 0 means i > number of leading zeros of w.\n\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\n      }\n\n      if (roundUp) {\n        for (;;) {\n          // Is the digit to be rounded up in the first word of xd?\n          if (xdi == 0) {\n            // i will be the length of xd[0] before k is added.\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\n\n            j = xd[0] += k;\n\n            for (k = 1; j >= 10; j /= 10) k++; // if i != k the length has increased.\n\n\n            if (i != k) {\n              x.e++;\n              if (xd[0] == BASE) xd[0] = 1;\n            }\n\n            break;\n          } else {\n            xd[xdi] += k;\n            if (xd[xdi] != BASE) break;\n            xd[xdi--] = 0;\n            k = 1;\n          }\n        }\n      } // Remove trailing zeros.\n\n\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\n    }\n\n    if (external) {\n      // Overflow?\n      if (x.e > Ctor.maxE) {\n        // Infinity.\n        x.d = null;\n        x.e = NaN; // Underflow?\n      } else if (x.e < Ctor.minE) {\n        // Zero.\n        x.e = 0;\n        x.d = [0]; // Ctor.underflow = true;\n      } // else Ctor.underflow = false;\n\n    }\n\n    return x;\n  }\n\n  function finiteToString(x, isExp, sd) {\n    if (!x.isFinite()) return nonFiniteToString(x);\n    var k,\n        e = x.e,\n        str = digitsToString(x.d),\n        len = str.length;\n\n    if (isExp) {\n      if (sd && (k = sd - len) > 0) {\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\n      } else if (len > 1) {\n        str = str.charAt(0) + '.' + str.slice(1);\n      }\n\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\n    } else if (e < 0) {\n      str = '0.' + getZeroString(-e - 1) + str;\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\n    } else if (e >= len) {\n      str += getZeroString(e + 1 - len);\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\n    } else {\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\n\n      if (sd && (k = sd - len) > 0) {\n        if (e + 1 === len) str += '.';\n        str += getZeroString(k);\n      }\n    }\n\n    return str;\n  } // Calculate the base 10 exponent from the base 1e7 exponent.\n\n\n  function getBase10Exponent(digits, e) {\n    var w = digits[0]; // Add the number of digits of the first word of the digits array.\n\n    for (e *= LOG_BASE; w >= 10; w /= 10) e++;\n\n    return e;\n  }\n\n  function getLn10(Ctor, sd, pr) {\n    if (sd > LN10_PRECISION) {\n      // Reset global state in case the exception is caught.\n      external = true;\n      if (pr) Ctor.precision = pr;\n      throw Error(precisionLimitExceeded);\n    }\n\n    return finalise(new Ctor(LN10), sd, 1, true);\n  }\n\n  function getPi(Ctor, sd, rm) {\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\n    return finalise(new Ctor(PI), sd, rm, true);\n  }\n\n  function getPrecision(digits) {\n    var w = digits.length - 1,\n        len = w * LOG_BASE + 1;\n    w = digits[w]; // If non-zero...\n\n    if (w) {\n      // Subtract the number of trailing zeros of the last word.\n      for (; w % 10 == 0; w /= 10) len--; // Add the number of digits of the first word.\n\n\n      for (w = digits[0]; w >= 10; w /= 10) len++;\n    }\n\n    return len;\n  }\n\n  function getZeroString(k) {\n    var zs = '';\n\n    for (; k--;) zs += '0';\n\n    return zs;\n  }\n  /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */\n\n\n  function intPow(Ctor, x, n, pr) {\n    var isTruncated,\n        r = new Ctor(1),\n        // Max n of 9007199254740991 takes 53 loop iterations.\n    // Maximum digits array length; leaves [28, 34] guard digits.\n    k = Math.ceil(pr / LOG_BASE + 4);\n    external = false;\n\n    for (;;) {\n      if (n % 2) {\n        r = r.times(x);\n        if (truncate(r.d, k)) isTruncated = true;\n      }\n\n      n = mathfloor(n / 2);\n\n      if (n === 0) {\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\n        n = r.d.length - 1;\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\n        break;\n      }\n\n      x = x.times(x);\n      truncate(x.d, k);\n    }\n\n    external = true;\n    return r;\n  }\n\n  function isOdd(n) {\n    return n.d[n.d.length - 1] & 1;\n  }\n  /*\r\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n   */\n\n\n  function maxOrMin(Ctor, args, ltgt) {\n    var y,\n        x = new Ctor(args[0]),\n        i = 0;\n\n    for (; ++i < args.length;) {\n      y = new Ctor(args[i]);\n\n      if (!y.s) {\n        x = y;\n        break;\n      } else if (x[ltgt](y)) {\n        x = y;\n      }\n    }\n\n    return x;\n  }\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(±0)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */\n\n\n  function naturalExponential(x, sd) {\n    var denominator,\n        guard,\n        j,\n        pow,\n        sum,\n        t,\n        wpr,\n        rep = 0,\n        i = 0,\n        k = 0,\n        Ctor = x.constructor,\n        rm = Ctor.rounding,\n        pr = Ctor.precision; // 0/NaN/Infinity?\n\n    if (!x.d || !x.d[0] || x.e > 17) {\n      return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);\n    }\n\n    if (sd == null) {\n      external = false;\n      wpr = pr;\n    } else {\n      wpr = sd;\n    }\n\n    t = new Ctor(0.03125); // while abs(x) >= 0.1\n\n    while (x.e > -2) {\n      // x = x / 2^5\n      x = x.times(t);\n      k += 5;\n    } // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\n    // necessary to ensure the first 4 rounding digits are correct.\n\n\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\n    wpr += guard;\n    denominator = pow = sum = new Ctor(1);\n    Ctor.precision = wpr;\n\n    for (;;) {\n      pow = finalise(pow.times(x), wpr, 1);\n      denominator = denominator.times(++i);\n      t = sum.plus(divide(pow, denominator, wpr, 1));\n\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n        j = k;\n\n        while (j--) sum = finalise(sum.times(sum), wpr, 1); // Check to see if the first 4 rounding digits are [49]999.\n        // If so, repeat the summation with a higher precision, otherwise\n        // e.g. with precision: 18, rounding: 1\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\n        // `wpr - guard` is the index of first rounding digit.\n\n\n        if (sd == null) {\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n            Ctor.precision = wpr += 10;\n            denominator = pow = t = new Ctor(1);\n            i = 0;\n            rep++;\n          } else {\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\n          }\n        } else {\n          Ctor.precision = pr;\n          return sum;\n        }\n      }\n\n      sum = t;\n    }\n  }\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */\n\n\n  function naturalLogarithm(y, sd) {\n    var c,\n        c0,\n        denominator,\n        e,\n        numerator,\n        rep,\n        sum,\n        t,\n        wpr,\n        x1,\n        x2,\n        n = 1,\n        guard = 10,\n        x = y,\n        xd = x.d,\n        Ctor = x.constructor,\n        rm = Ctor.rounding,\n        pr = Ctor.precision; // Is x negative or Infinity, NaN, 0 or 1?\n\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\n    }\n\n    if (sd == null) {\n      external = false;\n      wpr = pr;\n    } else {\n      wpr = sd;\n    }\n\n    Ctor.precision = wpr += guard;\n    c = digitsToString(xd);\n    c0 = c.charAt(0);\n\n    if (Math.abs(e = x.e) < 1.5e15) {\n      // Argument reduction.\n      // The series converges faster the closer the argument is to 1, so using\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\n      // later be divided by this number, then separate out the power of 10 using\n      // ln(a*10^b) = ln(a) + b*ln(10).\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\n      // max n is 6 (gives 0.7 - 1.3)\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\n        x = x.times(y);\n        c = digitsToString(x.d);\n        c0 = c.charAt(0);\n        n++;\n      }\n\n      e = x.e;\n\n      if (c0 > 1) {\n        x = new Ctor('0.' + c);\n        e++;\n      } else {\n        x = new Ctor(c0 + '.' + c.slice(1));\n      }\n    } else {\n      // The argument reduction method above may result in overflow if the argument y is a massive\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\n      Ctor.precision = pr;\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\n    } // x1 is x reduced to a value near 1.\n\n\n    x1 = x; // Taylor series.\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\n\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\n    x2 = finalise(x.times(x), wpr, 1);\n    denominator = 3;\n\n    for (;;) {\n      numerator = finalise(numerator.times(x2), wpr, 1);\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\n\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n        sum = sum.times(2); // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\n\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\n        sum = divide(sum, new Ctor(n), wpr, 1); // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\n        // been repeated previously) and the first 4 rounding digits 9999?\n        // If so, restart the summation with a higher precision, otherwise\n        // e.g. with precision: 12, rounding: 1\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\n        // `wpr - guard` is the index of first rounding digit.\n\n        if (sd == null) {\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n            Ctor.precision = wpr += guard;\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\n            x2 = finalise(x.times(x), wpr, 1);\n            denominator = rep = 1;\n          } else {\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\n          }\n        } else {\n          Ctor.precision = pr;\n          return sum;\n        }\n      }\n\n      sum = t;\n      denominator += 2;\n    }\n  } // ±Infinity, NaN.\n\n\n  function nonFiniteToString(x) {\n    // Unsigned.\n    return String(x.s * x.s / 0);\n  }\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\n\n\n  function parseDecimal(x, str) {\n    var e, i, len; // Decimal point?\n\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?\n\n    if ((i = str.search(/e/i)) > 0) {\n      // Determine exponent.\n      if (e < 0) e = i;\n      e += +str.slice(i + 1);\n      str = str.substring(0, i);\n    } else if (e < 0) {\n      // Integer.\n      e = str.length;\n    } // Determine leading zeros.\n\n\n    for (i = 0; str.charCodeAt(i) === 48; i++); // Determine trailing zeros.\n\n\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\n\n    str = str.slice(i, len);\n\n    if (str) {\n      len -= i;\n      x.e = e = e - i - 1;\n      x.d = []; // Transform base\n      // e is the base 10 exponent.\n      // i is where to slice str to get the first word of the digits array.\n\n      i = (e + 1) % LOG_BASE;\n      if (e < 0) i += LOG_BASE;\n\n      if (i < len) {\n        if (i) x.d.push(+str.slice(0, i));\n\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\n\n        str = str.slice(i);\n        i = LOG_BASE - str.length;\n      } else {\n        i -= len;\n      }\n\n      for (; i--;) str += '0';\n\n      x.d.push(+str);\n\n      if (external) {\n        // Overflow?\n        if (x.e > x.constructor.maxE) {\n          // Infinity.\n          x.d = null;\n          x.e = NaN; // Underflow?\n        } else if (x.e < x.constructor.minE) {\n          // Zero.\n          x.e = 0;\n          x.d = [0]; // x.constructor.underflow = true;\n        } // else x.constructor.underflow = false;\n\n      }\n    } else {\n      // Zero.\n      x.e = 0;\n      x.d = [0];\n    }\n\n    return x;\n  }\n  /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */\n\n\n  function parseOther(x, str) {\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\n\n    if (str === 'Infinity' || str === 'NaN') {\n      if (!+str) x.s = NaN;\n      x.e = NaN;\n      x.d = null;\n      return x;\n    }\n\n    if (isHex.test(str)) {\n      base = 16;\n      str = str.toLowerCase();\n    } else if (isBinary.test(str)) {\n      base = 2;\n    } else if (isOctal.test(str)) {\n      base = 8;\n    } else {\n      throw Error(invalidArgument + str);\n    } // Is there a binary exponent part?\n\n\n    i = str.search(/p/i);\n\n    if (i > 0) {\n      p = +str.slice(i + 1);\n      str = str.substring(2, i);\n    } else {\n      str = str.slice(2);\n    } // Convert `str` as an integer then divide the result by `base` raised to a power such that the\n    // fraction part will be restored.\n\n\n    i = str.indexOf('.');\n    isFloat = i >= 0;\n    Ctor = x.constructor;\n\n    if (isFloat) {\n      str = str.replace('.', '');\n      len = str.length;\n      i = len - i; // log[10](16) = 1.2041... , log[10](88) = 1.9444....\n\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\n    }\n\n    xd = convertBase(str, base, BASE);\n    xe = xd.length - 1; // Remove trailing zeros.\n\n    for (i = xe; xd[i] === 0; --i) xd.pop();\n\n    if (i < 0) return new Ctor(x.s * 0);\n    x.e = getBase10Exponent(xd, xe);\n    x.d = xd;\n    external = false; // At what precision to perform the division to ensure exact conversion?\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\n    // Therefore using 4 * the number of digits of str will always be enough.\n\n    if (isFloat) x = divide(x, divisor, len * 4); // Multiply by the binary exponent part if present.\n\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\n    external = true;\n    return x;\n  }\n  /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\n\n\n  function sine(Ctor, x) {\n    var k,\n        len = x.d.length;\n    if (len < 3) return taylorSeries(Ctor, 2, x, x); // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\n    // Estimate the optimum number of times to use the argument reduction.\n\n    k = 1.4 * Math.sqrt(len);\n    k = k > 16 ? 16 : k | 0;\n    x = x.times(1 / tinyPow(5, k));\n    x = taylorSeries(Ctor, 2, x, x); // Reverse argument reduction\n\n    var sin2_x,\n        d5 = new Ctor(5),\n        d16 = new Ctor(16),\n        d20 = new Ctor(20);\n\n    for (; k--;) {\n      sin2_x = x.times(x);\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\n    }\n\n    return x;\n  } // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\n\n\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\n    var j,\n        t,\n        u,\n        x2,\n        i = 1,\n        pr = Ctor.precision,\n        k = Math.ceil(pr / LOG_BASE);\n    external = false;\n    x2 = x.times(x);\n    u = new Ctor(y);\n\n    for (;;) {\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\n      t = u.plus(y);\n\n      if (t.d[k] !== void 0) {\n        for (j = k; t.d[j] === u.d[j] && j--;);\n\n        if (j == -1) break;\n      }\n\n      j = u;\n      u = y;\n      y = t;\n      t = j;\n      i++;\n    }\n\n    external = true;\n    t.d.length = k + 1;\n    return t;\n  } // Exponent e must be positive and non-zero.\n\n\n  function tinyPow(b, e) {\n    var n = b;\n\n    while (--e) n *= b;\n\n    return n;\n  } // Return the absolute value of `x` reduced to less than or equal to half pi.\n\n\n  function toLessThanHalfPi(Ctor, x) {\n    var t,\n        isNeg = x.s < 0,\n        pi = getPi(Ctor, Ctor.precision, 1),\n        halfPi = pi.times(0.5);\n    x = x.abs();\n\n    if (x.lte(halfPi)) {\n      quadrant = isNeg ? 4 : 1;\n      return x;\n    }\n\n    t = x.divToInt(pi);\n\n    if (t.isZero()) {\n      quadrant = isNeg ? 3 : 2;\n    } else {\n      x = x.minus(t.times(pi)); // 0 <= x < pi\n\n      if (x.lte(halfPi)) {\n        quadrant = isOdd(t) ? isNeg ? 2 : 3 : isNeg ? 4 : 1;\n        return x;\n      }\n\n      quadrant = isOdd(t) ? isNeg ? 1 : 4 : isNeg ? 3 : 2;\n    }\n\n    return x.minus(pi).abs();\n  }\n  /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */\n\n\n  function toStringBinary(x, baseOut, sd, rm) {\n    var base,\n        e,\n        i,\n        k,\n        len,\n        roundUp,\n        str,\n        xd,\n        y,\n        Ctor = x.constructor,\n        isExp = sd !== void 0;\n\n    if (isExp) {\n      checkInt32(sd, 1, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n    } else {\n      sd = Ctor.precision;\n      rm = Ctor.rounding;\n    }\n\n    if (!x.isFinite()) {\n      str = nonFiniteToString(x);\n    } else {\n      str = finiteToString(x);\n      i = str.indexOf('.'); // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\n      // log[2](10) = 3.321928094887362347870319429489390175864\n\n      if (isExp) {\n        base = 2;\n\n        if (baseOut == 16) {\n          sd = sd * 4 - 3;\n        } else if (baseOut == 8) {\n          sd = sd * 3 - 2;\n        }\n      } else {\n        base = baseOut;\n      } // Convert the number as an integer then divide the result by its base raised to a power such\n      // that the fraction part will be restored.\n      // Non-integer.\n\n\n      if (i >= 0) {\n        str = str.replace('.', '');\n        y = new Ctor(1);\n        y.e = str.length - i;\n        y.d = convertBase(finiteToString(y), 10, base);\n        y.e = y.d.length;\n      }\n\n      xd = convertBase(str, 10, base);\n      e = len = xd.length; // Remove trailing zeros.\n\n      for (; xd[--len] == 0;) xd.pop();\n\n      if (!xd[0]) {\n        str = isExp ? '0p+0' : '0';\n      } else {\n        if (i < 0) {\n          e--;\n        } else {\n          x = new Ctor(x);\n          x.d = xd;\n          x.e = e;\n          x = divide(x, y, sd, rm, 0, base);\n          xd = x.d;\n          e = x.e;\n          roundUp = inexact;\n        } // The rounding digit, i.e. the digit after the digit that may be rounded up.\n\n\n        i = xd[sd];\n        k = base / 2;\n        roundUp = roundUp || xd[sd + 1] !== void 0;\n        roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));\n        xd.length = sd;\n\n        if (roundUp) {\n          // Rounding up may mean the previous digit has to be rounded up and so on.\n          for (; ++xd[--sd] > base - 1;) {\n            xd[sd] = 0;\n\n            if (!sd) {\n              ++e;\n              xd.unshift(1);\n            }\n          }\n        } // Determine trailing zeros.\n\n\n        for (len = xd.length; !xd[len - 1]; --len); // E.g. [4, 11, 15] becomes 4bf.\n\n\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]); // Add binary exponent suffix?\n\n\n        if (isExp) {\n          if (len > 1) {\n            if (baseOut == 16 || baseOut == 8) {\n              i = baseOut == 16 ? 4 : 3;\n\n              for (--len; len % i; len++) str += '0';\n\n              xd = convertBase(str, base, baseOut);\n\n              for (len = xd.length; !xd[len - 1]; --len); // xd[0] will always be be 1\n\n\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\n            } else {\n              str = str.charAt(0) + '.' + str.slice(1);\n            }\n          }\n\n          str = str + (e < 0 ? 'p' : 'p+') + e;\n        } else if (e < 0) {\n          for (; ++e;) str = '0' + str;\n\n          str = '0.' + str;\n        } else {\n          if (++e > len) for (e -= len; e--;) str += '0';else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\n        }\n      }\n\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\n    }\n\n    return x.s < 0 ? '-' + str : str;\n  } // Does not strip trailing zeros.\n\n\n  function truncate(arr, len) {\n    if (arr.length > len) {\n      arr.length = len;\n      return true;\n    }\n  } // Decimal methods\n\n  /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */\n\n  /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function abs(x) {\n    return new this(x).abs();\n  }\n  /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function acos(x) {\n    return new this(x).acos();\n  }\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n\n\n  function acosh(x) {\n    return new this(x).acosh();\n  }\n  /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function add(x, y) {\n    return new this(x).plus(y);\n  }\n  /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function asin(x) {\n    return new this(x).asin();\n  }\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n\n\n  function asinh(x) {\n    return new this(x).asinh();\n  }\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function atan(x) {\n    return new this(x).atan();\n  }\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n\n\n  function atanh(x) {\n    return new this(x).atanh();\n  }\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|Decimal} The y-coordinate.\r\n   * x {number|string|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(±0, -0)               = ±pi\r\n   * atan2(±0, +0)               = ±0\r\n   * atan2(±0, -x)               = ±pi for x > 0\r\n   * atan2(±0, x)                = ±0 for x > 0\r\n   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n   * atan2(y, ±0)                = pi/2 for y > 0\r\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n   * atan2(±Infinity, +Infinity) = ±pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */\n\n\n  function atan2(y, x) {\n    y = new this(y);\n    x = new this(x);\n    var r,\n        pr = this.precision,\n        rm = this.rounding,\n        wpr = pr + 4; // Either NaN\n\n    if (!y.s || !x.s) {\n      r = new this(NaN); // Both ±Infinity\n    } else if (!y.d && !x.d) {\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\n      r.s = y.s; // x is ±Infinity or y is ±0\n    } else if (!x.d || y.isZero()) {\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\n      r.s = y.s; // y is ±Infinity or x is ±0\n    } else if (!y.d || x.isZero()) {\n      r = getPi(this, wpr, 1).times(0.5);\n      r.s = y.s; // Both non-zero and finite\n    } else if (x.s < 0) {\n      this.precision = wpr;\n      this.rounding = 1;\n      r = this.atan(divide(y, x, wpr, 1));\n      x = getPi(this, wpr, 1);\n      this.precision = pr;\n      this.rounding = rm;\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\n    } else {\n      r = this.atan(divide(y, x, wpr, 1));\n    }\n\n    return r;\n  }\n  /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function cbrt(x) {\n    return new this(x).cbrt();\n  }\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function ceil(x) {\n    return finalise(x = new this(x), x.e + 1, 2);\n  }\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *   defaults   {true}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\n\n\n  function config(obj) {\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\n    var i,\n        p,\n        v,\n        useDefaults = obj.defaults === true,\n        ps = ['precision', 1, MAX_DIGITS, 'rounding', 0, 8, 'toExpNeg', -EXP_LIMIT, 0, 'toExpPos', 0, EXP_LIMIT, 'maxE', 0, EXP_LIMIT, 'minE', -EXP_LIMIT, 0, 'modulo', 0, 9];\n\n    for (i = 0; i < ps.length; i += 3) {\n      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\n\n      if ((v = obj[p]) !== void 0) {\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;else throw Error(invalidArgument + p + ': ' + v);\n      }\n    }\n\n    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\n\n    if ((v = obj[p]) !== void 0) {\n      if (v === true || v === false || v === 0 || v === 1) {\n        if (v) {\n          if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n            this[p] = true;\n          } else {\n            throw Error(cryptoUnavailable);\n          }\n        } else {\n          this[p] = false;\n        }\n      } else {\n        throw Error(invalidArgument + p + ': ' + v);\n      }\n    }\n\n    return this;\n  }\n  /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n\n\n  function cos(x) {\n    return new this(x).cos();\n  }\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n\n\n  function cosh(x) {\n    return new this(x).cosh();\n  }\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\n\n\n  function clone(obj) {\n    var i, p, ps;\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|Decimal} A numeric value.\r\n     *\r\n     */\n\n    function Decimal(v) {\n      var e,\n          i,\n          t,\n          x = this; // Decimal called without new.\n\n      if (!(x instanceof Decimal)) return new Decimal(v); // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\n      // which points to Object.\n\n      x.constructor = Decimal; // Duplicate.\n\n      if (v instanceof Decimal) {\n        x.s = v.s;\n\n        if (external) {\n          if (!v.d || v.e > Decimal.maxE) {\n            // Infinity.\n            x.e = NaN;\n            x.d = null;\n          } else if (v.e < Decimal.minE) {\n            // Zero.\n            x.e = 0;\n            x.d = [0];\n          } else {\n            x.e = v.e;\n            x.d = v.d.slice();\n          }\n        } else {\n          x.e = v.e;\n          x.d = v.d ? v.d.slice() : v.d;\n        }\n\n        return;\n      }\n\n      t = typeof v;\n\n      if (t === 'number') {\n        if (v === 0) {\n          x.s = 1 / v < 0 ? -1 : 1;\n          x.e = 0;\n          x.d = [0];\n          return;\n        }\n\n        if (v < 0) {\n          v = -v;\n          x.s = -1;\n        } else {\n          x.s = 1;\n        } // Fast path for small integers.\n\n\n        if (v === ~~v && v < 1e7) {\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\n\n          if (external) {\n            if (e > Decimal.maxE) {\n              x.e = NaN;\n              x.d = null;\n            } else if (e < Decimal.minE) {\n              x.e = 0;\n              x.d = [0];\n            } else {\n              x.e = e;\n              x.d = [v];\n            }\n          } else {\n            x.e = e;\n            x.d = [v];\n          }\n\n          return; // Infinity, NaN.\n        } else if (v * 0 !== 0) {\n          if (!v) x.s = NaN;\n          x.e = NaN;\n          x.d = null;\n          return;\n        }\n\n        return parseDecimal(x, v.toString());\n      } else if (t !== 'string') {\n        throw Error(invalidArgument + v);\n      } // Minus sign?\n\n\n      if ((i = v.charCodeAt(0)) === 45) {\n        v = v.slice(1);\n        x.s = -1;\n      } else {\n        // Plus sign?\n        if (i === 43) v = v.slice(1);\n        x.s = 1;\n      }\n\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\n    }\n\n    Decimal.prototype = P;\n    Decimal.ROUND_UP = 0;\n    Decimal.ROUND_DOWN = 1;\n    Decimal.ROUND_CEIL = 2;\n    Decimal.ROUND_FLOOR = 3;\n    Decimal.ROUND_HALF_UP = 4;\n    Decimal.ROUND_HALF_DOWN = 5;\n    Decimal.ROUND_HALF_EVEN = 6;\n    Decimal.ROUND_HALF_CEIL = 7;\n    Decimal.ROUND_HALF_FLOOR = 8;\n    Decimal.EUCLID = 9;\n    Decimal.config = Decimal.set = config;\n    Decimal.clone = clone;\n    Decimal.isDecimal = isDecimalInstance;\n    Decimal.abs = abs;\n    Decimal.acos = acos;\n    Decimal.acosh = acosh; // ES6\n\n    Decimal.add = add;\n    Decimal.asin = asin;\n    Decimal.asinh = asinh; // ES6\n\n    Decimal.atan = atan;\n    Decimal.atanh = atanh; // ES6\n\n    Decimal.atan2 = atan2;\n    Decimal.cbrt = cbrt; // ES6\n\n    Decimal.ceil = ceil;\n    Decimal.cos = cos;\n    Decimal.cosh = cosh; // ES6\n\n    Decimal.div = div;\n    Decimal.exp = exp;\n    Decimal.floor = floor;\n    Decimal.hypot = hypot; // ES6\n\n    Decimal.ln = ln;\n    Decimal.log = log;\n    Decimal.log10 = log10; // ES6\n\n    Decimal.log2 = log2; // ES6\n\n    Decimal.max = max;\n    Decimal.min = min;\n    Decimal.mod = mod;\n    Decimal.mul = mul;\n    Decimal.pow = pow;\n    Decimal.random = random;\n    Decimal.round = round;\n    Decimal.sign = sign; // ES6\n\n    Decimal.sin = sin;\n    Decimal.sinh = sinh; // ES6\n\n    Decimal.sqrt = sqrt;\n    Decimal.sub = sub;\n    Decimal.tan = tan;\n    Decimal.tanh = tanh; // ES6\n\n    Decimal.trunc = trunc; // ES6\n\n    if (obj === void 0) obj = {};\n\n    if (obj) {\n      if (obj.defaults !== true) {\n        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\n\n        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\n      }\n    }\n\n    Decimal.config(obj);\n    return Decimal;\n  }\n  /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function div(x, y) {\n    return new this(x).div(y);\n  }\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */\n\n\n  function exp(x) {\n    return new this(x).exp();\n  }\n  /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function floor(x) {\n    return finalise(x = new this(x), x.e + 1, 3);\n  }\n  /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function hypot() {\n    var i,\n        n,\n        t = new this(0);\n    external = false;\n\n    for (i = 0; i < arguments.length;) {\n      n = new this(arguments[i++]);\n\n      if (!n.d) {\n        if (n.s) {\n          external = true;\n          return new this(1 / 0);\n        }\n\n        t = n;\n      } else if (t.d) {\n        t = t.plus(n.times(n));\n      }\n    }\n\n    external = true;\n    return t.sqrt();\n  }\n  /*\r\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n   * otherwise return false.\r\n   *\r\n   */\n\n\n  function isDecimalInstance(obj) {\n    return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;\n  }\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function ln(x) {\n    return new this(x).ln();\n  }\n  /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|Decimal} The argument of the logarithm.\r\n   * y {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\n\n\n  function log(x, y) {\n    return new this(x).log(y);\n  }\n  /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function log2(x) {\n    return new this(x).log(2);\n  }\n  /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function log10(x) {\n    return new this(x).log(10);\n  }\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function max() {\n    return maxOrMin(this, arguments, 'lt');\n  }\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function min() {\n    return maxOrMin(this, arguments, 'gt');\n  }\n  /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function mod(x, y) {\n    return new this(x).mod(y);\n  }\n  /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function mul(x, y) {\n    return new this(x).mul(y);\n  }\n  /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The base.\r\n   * y {number|string|Decimal} The exponent.\r\n   *\r\n   */\n\n\n  function pow(x, y) {\n    return new this(x).pow(y);\n  }\n  /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */\n\n\n  function random(sd) {\n    var d,\n        e,\n        k,\n        n,\n        i = 0,\n        r = new this(1),\n        rd = [];\n    if (sd === void 0) sd = this.precision;else checkInt32(sd, 1, MAX_DIGITS);\n    k = Math.ceil(sd / LOG_BASE);\n\n    if (!this.crypto) {\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0; // Browsers supporting crypto.getRandomValues.\n\n    } else if (crypto.getRandomValues) {\n      d = crypto.getRandomValues(new Uint32Array(k));\n\n      for (; i < k;) {\n        n = d[i]; // 0 <= n < 4294967296\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\n\n        if (n >= 4.29e9) {\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\n        } else {\n          // 0 <= n <= 4289999999\n          // 0 <= (n % 1e7) <= 9999999\n          rd[i++] = n % 1e7;\n        }\n      } // Node.js supporting crypto.randomBytes.\n\n    } else if (crypto.randomBytes) {\n      // buffer\n      d = crypto.randomBytes(k *= 4);\n\n      for (; i < k;) {\n        // 0 <= n < 2147483648\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24); // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\n\n        if (n >= 2.14e9) {\n          crypto.randomBytes(4).copy(d, i);\n        } else {\n          // 0 <= n <= 2139999999\n          // 0 <= (n % 1e7) <= 9999999\n          rd.push(n % 1e7);\n          i += 4;\n        }\n      }\n\n      i = k / 4;\n    } else {\n      throw Error(cryptoUnavailable);\n    }\n\n    k = rd[--i];\n    sd %= LOG_BASE; // Convert trailing digits to zeros according to sd.\n\n    if (k && sd) {\n      n = mathpow(10, LOG_BASE - sd);\n      rd[i] = (k / n | 0) * n;\n    } // Remove trailing words which are zero.\n\n\n    for (; rd[i] === 0; i--) rd.pop(); // Zero?\n\n\n    if (i < 0) {\n      e = 0;\n      rd = [0];\n    } else {\n      e = -1; // Remove leading words which are zero and adjust exponent accordingly.\n\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift(); // Count the digits of the first word of rd to determine leading zeros.\n\n\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++; // Adjust the exponent for leading zeros of the first word of rd.\n\n\n      if (k < LOG_BASE) e -= LOG_BASE - k;\n    }\n\n    r.e = e;\n    r.d = rd;\n    return r;\n  }\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function round(x) {\n    return finalise(x = new this(x), x.e + 1, this.rounding);\n  }\n  /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function sign(x) {\n    x = new this(x);\n    return x.d ? x.d[0] ? x.s : 0 * x.s : x.s || NaN;\n  }\n  /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n\n\n  function sin(x) {\n    return new this(x).sin();\n  }\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n\n\n  function sinh(x) {\n    return new this(x).sinh();\n  }\n  /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function sqrt(x) {\n    return new this(x).sqrt();\n  }\n  /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function sub(x, y) {\n    return new this(x).sub(y);\n  }\n  /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n\n\n  function tan(x) {\n    return new this(x).tan();\n  }\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n\n\n  function tanh(x) {\n    return new this(x).tanh();\n  }\n  /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n\n\n  function trunc(x) {\n    return finalise(x = new this(x), x.e + 1, 1);\n  } // Create and configure initial Decimal constructor.\n\n\n  Decimal = clone(DEFAULTS);\n  Decimal['default'] = Decimal.Decimal = Decimal; // Create the internal constants from their string values.\n\n  LN10 = new Decimal(LN10);\n  PI = new Decimal(PI); // Export.\n  // AMD.\n\n  if (typeof define == 'function' && define.amd) {\n    define(function () {\n      return Decimal;\n    }); // Node and other environments that support module.exports.\n  } else if (typeof module != 'undefined' && module.exports) {\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\n      P[Symbol.toStringTag] = 'Decimal';\n    }\n\n    module.exports = Decimal; // Browser.\n  } else {\n    if (!globalScope) {\n      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;\n    }\n\n    noConflict = globalScope.Decimal;\n\n    Decimal.noConflict = function () {\n      globalScope.Decimal = noConflict;\n      return Decimal;\n    };\n\n    globalScope.Decimal = Decimal;\n  }\n})(this);","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/decimal.js/decimal.js"],"names":["globalScope","EXP_LIMIT","MAX_DIGITS","NUMERALS","LN10","PI","DEFAULTS","precision","rounding","modulo","toExpNeg","toExpPos","minE","maxE","crypto","Decimal","inexact","noConflict","quadrant","external","decimalError","invalidArgument","precisionLimitExceeded","cryptoUnavailable","mathfloor","Math","floor","mathpow","pow","isBinary","isHex","isOctal","isDecimal","BASE","LOG_BASE","MAX_SAFE_INTEGER","LN10_PRECISION","length","PI_PRECISION","P","name","absoluteValue","abs","x","constructor","s","finalise","ceil","e","comparedTo","cmp","y","i","j","xdL","ydL","xd","d","yd","xs","ys","NaN","cosine","cos","pr","rm","Ctor","max","sd","toLessThanHalfPi","neg","cubeRoot","cbrt","m","n","r","rep","t","t3","t3plusx","isFinite","isZero","digitsToString","toExponential","slice","indexOf","toString","times","plus","divide","eq","charAt","decimalPlaces","dp","w","dividedBy","div","dividedToIntegerBy","divToInt","equals","greaterThan","gt","greaterThanOrEqualTo","gte","k","hyperbolicCosine","cosh","len","one","tinyPow","taylorSeries","cosh2_x","d8","minus","hyperbolicSine","sinh","sqrt","sinh2_x","d5","d16","d20","hyperbolicTangent","tanh","inverseCosine","acos","halfPi","isNeg","getPi","asin","inverseHyperbolicCosine","acosh","lte","ln","inverseHyperbolicSine","asinh","inverseHyperbolicTangent","atanh","wpr","xsd","inverseSine","atan","inverseTangent","px","x2","min","isInteger","isInt","isNaN","isNegative","isPositive","isPos","lessThan","lt","lessThanOrEqualTo","logarithm","log","base","isBase10","denominator","inf","num","arg","guard","naturalLogarithm","getLn10","checkRoundingDigits","sub","xe","xLTy","reverse","push","pop","shift","getBase10Exponent","mod","q","naturalExponential","exp","negated","add","carry","unshift","z","Error","getPrecision","round","sine","sin","squareRoot","tangent","tan","mul","rL","toBinary","toStringBinary","toDecimalPlaces","toDP","checkInt32","str","finiteToString","toFixed","toFraction","maxD","d0","d1","d2","n0","n1","toHexadecimal","toHex","toNearest","toNumber","toOctal","toPower","yn","intPow","toPrecision","toSignificantDigits","toSD","truncated","trunc","valueOf","toJSON","ws","indexOfLastWord","getZeroString","repeating","di","rd","convertBase","baseIn","baseOut","arr","arrL","strL","cos2x","multiplyInteger","temp","compare","a","b","aL","bL","subtract","logBase","more","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","sign","isTruncated","digits","roundUp","xdi","out","isExp","nonFiniteToString","zs","truncate","isOdd","maxOrMin","args","ltgt","sum","c","c0","numerator","x1","String","parseDecimal","replace","search","substring","charCodeAt","parseOther","divisor","isFloat","p","test","toLowerCase","sin2_x","isHyperbolic","u","pi","atan2","config","obj","v","useDefaults","defaults","ps","getRandomValues","randomBytes","clone","prototype","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","set","isDecimalInstance","hypot","log10","log2","random","hasOwnProperty","arguments","Uint32Array","copy","define","amd","module","exports","Symbol","iterator","for","toStringTag","self","window"],"mappings":"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","sourcesContent":[";(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*\r\n   *  decimal.js v10.2.0\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The maximum exponent magnitude.\r\n    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\n  var EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n    // Base conversion alphabet.\r\n    NUMERALS = '0123456789abcdef',\r\n\r\n    // The natural logarithm of 10 (1025 digits).\r\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n    // Pi (1025 digits).\r\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    DEFAULTS = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used when rounding to `precision`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN  6 The IEEE 754 remainder function.\r\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n      //\r\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n      // be used, but they may not give useful results.\r\n      modulo: 1,                             // 0 to 9\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // JavaScript numbers: -324  (5e-324)\r\n      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      crypto: false                          // true/false\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    Decimal, inexact, noConflict, quadrant,\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n    cryptoUnavailable = decimalError + 'crypto unavailable',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n    LN10_PRECISION = LN10.length - 1,\r\n    PI_PRECISION = PI.length - 1,\r\n\r\n    // Decimal.prototype object\r\n    P = { name: '[object Decimal]' };\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */\r\n  P.ceil = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this,\r\n      xd = x.d,\r\n      yd = (y = new x.constructor(y)).d,\r\n      xs = x.s,\r\n      ys = y.s;\r\n\r\n    // Either NaN or ±Infinity?\r\n    if (!xd || !yd) {\r\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Either zero?\r\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n    // Signs differ?\r\n    if (xs !== ys) return xs;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */\r\n  P.cosine = P.cos = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.d) return new Ctor(NaN);\r\n\r\n    // cos(0) = cos(-0) = 1\r\n    if (!x.d[0]) return new Ctor(1);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */\r\n  P.cubeRoot = P.cbrt = function () {\r\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n     // Math.cbrt underflow/overflow?\r\n     // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n    if (!s || Math.abs(s) == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      e = x.e;\r\n\r\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n      s = mathpow(n, 1 / 3);\r\n\r\n      // Rarely, e may be one less than the result exponent value.\r\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n      r.s = x.s;\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Halley's method.\r\n    // TODO? Compare Newton's method.\r\n    for (;;) {\r\n      t = r;\r\n      t3 = t.times(t).times(t);\r\n      t3plusx = t3.plus(x);\r\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n        // , i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var w,\r\n      d = this.d,\r\n      n = NaN;\r\n\r\n    if (d) {\r\n      w = d.length - 1;\r\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      w = d[w];\r\n      if (w) for (; w % 10 == 0; w /= 10) n--;\r\n      if (n < 0) n = 0;\r\n    }\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.divToInt = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */\r\n  P.floor = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 3);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    var k = this.cmp(y);\r\n    return k == 1 || k === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicCosine = P.cosh = function () {\r\n    var k, n, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      one = new Ctor(1);\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n    if (x.isZero()) return one;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    // TODO? Estimation reused from cosine() and may not be optimal here.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      n = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      n = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n    // Reverse argument reduction\r\n    var cosh2_x,\r\n      i = k,\r\n      d8 = new Ctor(8);\r\n    for (; i--;) {\r\n      cosh2_x = x.times(x);\r\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n    }\r\n\r\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicSine = P.sinh = function () {\r\n    var k, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n    } else {\r\n\r\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n      // 3 multiplications and 1 addition\r\n\r\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n      // 4 multiplications and 2 additions\r\n\r\n      // Estimate the optimum number of times to use the argument reduction.\r\n      k = 1.4 * Math.sqrt(len);\r\n      k = k > 16 ? 16 : k | 0;\r\n\r\n      x = x.times(1 / tinyPow(5, k));\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n      // Reverse argument reduction\r\n      var sinh2_x,\r\n        d5 = new Ctor(5),\r\n        d16 = new Ctor(16),\r\n        d20 = new Ctor(20);\r\n      for (; k--;) {\r\n        sinh2_x = x.times(x);\r\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n      }\r\n    }\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */\r\n  P.hyperbolicTangent = P.tanh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 7;\r\n    Ctor.rounding = 1;\r\n\r\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */\r\n  P.inverseCosine = P.acos = function () {\r\n    var halfPi,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      k = x.abs().cmp(1),\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n      return k === 0\r\n        // |x| is 1\r\n        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n        // |x| > 1 or x is NaN\r\n        : new Ctor(NaN);\r\n    }\r\n\r\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.asin();\r\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return halfPi.minus(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */\r\n  P.inverseHyperbolicCosine = P.acosh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n    if (!x.isFinite()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */\r\n  P.inverseHyperbolicSine = P.asinh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */\r\n  P.inverseHyperbolicTangent = P.atanh = function () {\r\n    var pr, rm, wpr, xsd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    xsd = x.sd();\r\n\r\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n    Ctor.precision = wpr = xsd - x.e;\r\n\r\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n    Ctor.precision = pr + 4;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.ln();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(0.5);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */\r\n  P.inverseSine = P.asin = function () {\r\n    var halfPi, k,\r\n      pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    k = x.abs().cmp(1);\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n\r\n      // |x| is 1\r\n      if (k === 0) {\r\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        halfPi.s = x.s;\r\n        return halfPi;\r\n      }\r\n\r\n      // |x| > 1 or x is NaN\r\n      return new Ctor(NaN);\r\n    }\r\n\r\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.inverseTangent = P.atan = function () {\r\n    var i, j, k, n, px, t, r, wpr, x2,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (!x.isFinite()) {\r\n      if (!x.s) return new Ctor(NaN);\r\n      if (pr + 4 <= PI_PRECISION) {\r\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        r.s = x.s;\r\n        return r;\r\n      }\r\n    } else if (x.isZero()) {\r\n      return new Ctor(x);\r\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n\r\n    Ctor.precision = wpr = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n    // Argument reduction\r\n    // Ensure |x| < 0.42\r\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n    external = false;\r\n\r\n    j = Math.ceil(wpr / LOG_BASE);\r\n    n = 1;\r\n    x2 = x.times(x);\r\n    r = new Ctor(x);\r\n    px = x;\r\n\r\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n    for (; i !== -1;) {\r\n      px = px.times(x2);\r\n      t = r.minus(px.div(n += 2));\r\n\r\n      px = px.times(x2);\r\n      r = t.plus(px.div(n += 2));\r\n\r\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n    }\r\n\r\n    if (k) r = r.times(2 << (k - 1));\r\n\r\n    external = true;\r\n\r\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.d;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isInt = function () {\r\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isNeg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.isPos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.d && this.d[0] === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var isBase10, d, denominator, k, inf, num, sd, r,\r\n      arg = this,\r\n      Ctor = arg.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding,\r\n      guard = 5;\r\n\r\n    // Default base is 10.\r\n    if (base == null) {\r\n      base = new Ctor(10);\r\n      isBase10 = true;\r\n    } else {\r\n      base = new Ctor(base);\r\n      d = base.d;\r\n\r\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n      isBase10 = base.eq(10);\r\n    }\r\n\r\n    d = arg.d;\r\n\r\n    // Is arg negative, non-finite, 0 or 1?\r\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n    }\r\n\r\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n    // integer power of 10.\r\n    if (isBase10) {\r\n      if (d.length > 1) {\r\n        inf = true;\r\n      } else {\r\n        for (k = d[0]; k % 10 === 0;) k /= 10;\r\n        inf = k !== 1;\r\n      }\r\n    }\r\n\r\n    external = false;\r\n    sd = pr + guard;\r\n    num = naturalLogarithm(arg, sd);\r\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n    // The result will have 5 rounding digits.\r\n    r = divide(num, denominator, sd, 1);\r\n\r\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n    // calculate 10 further digits.\r\n    //\r\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n    // further digits, the last 14 are nines, round up and assume the result is exact.\r\n    // Also assume the result is exact if the last 14 are zero.\r\n    //\r\n    // Example of a result that will be incorrectly rounded:\r\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n    // place is still 2.6.\r\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n      do {\r\n        sd += 10;\r\n        num = naturalLogarithm(arg, sd);\r\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n        r = divide(num, denominator, sd, 1);\r\n\r\n        if (!inf) {\r\n\r\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n            r = finalise(r, pr + 1, 0);\r\n          }\r\n\r\n          break;\r\n        }\r\n      } while (checkRoundingDigits(r.d, k += 10, rm));\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'lt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'gt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return y negated if x is finite and y is ±Infinity.\r\n      else if (x.d) y.s = -y.s;\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with different signs.\r\n      // Return NaN if both are ±Infinity with the same sign.\r\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n    // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.plus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return y negated if x is zero and y is non-zero.\r\n      if (yd[0]) y.s = -y.s;\r\n\r\n      // Return x if y is zero and x is non-zero.\r\n      else if (xd[0]) y = new Ctor(x);\r\n\r\n      // Return zero if both are zero.\r\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n      else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    e = mathfloor(y.e / LOG_BASE);\r\n    xe = mathfloor(x.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of\r\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to `xd` if shorter.\r\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n    // Return x if y is ±Infinity or x is ±0.\r\n    if (!y.d || x.d && !x.d[0]) {\r\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n    }\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n\r\n    if (Ctor.modulo == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // result = x - q * y    where  0 <= result < abs(y)\r\n      q = divide(x, y.abs(), 0, 3, 1);\r\n      q.s *= y.s;\r\n    } else {\r\n      q = divide(x, y, 0, Ctor.modulo, 1);\r\n    }\r\n\r\n    q = q.times(y);\r\n\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return naturalExponential(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return naturalLogarithm(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with the same sign.\r\n      // Return NaN if both are ±Infinity with different signs.\r\n      // Return y if x is finite and y is ±Infinity.\r\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n     // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!yd[0]) y = new Ctor(x);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    k = mathfloor(x.e / LOG_BASE);\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var k,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    if (x.d) {\r\n      k = getPrecision(x.d);\r\n      if (z && x.e + 1 > k) k = x.e + 1;\r\n    } else {\r\n      k = NaN;\r\n    }\r\n\r\n    return k;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.round = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */\r\n  P.sine = P.sin = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, sd, r, rep, t,\r\n      x = this,\r\n      d = x.d,\r\n      e = x.e,\r\n      s = x.s,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !d || !d[0]) {\r\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n    }\r\n\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(d);\r\n\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '1e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.tangent = P.tan = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.sin();\r\n    x.s = 1;\r\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    y.s *= x.s;\r\n\r\n     // If either is NaN, ±Infinity or ±0...\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n        // Return NaN if either is NaN.\r\n        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n        ? NaN\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        // Return ±0 if either is ±0.\r\n        : !xd || !yd ? y.s / 0 : y.s * 0);\r\n    }\r\n\r\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = getBase10Exponent(r, e);\r\n\r\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toBinary = function (sd, rm) {\r\n    return toStringBinary(this, 2, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return finalise(x, dp + x.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), dp + 1, rm);\r\n      str = finiteToString(x, true, dp + 1);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n      str = finiteToString(y, false, dp + y.e + 1);\r\n    }\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */\r\n  P.toFraction = function (maxD) {\r\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n      x = this,\r\n      xd = x.d,\r\n      Ctor = x.constructor;\r\n\r\n    if (!xd) return new Ctor(x);\r\n\r\n    n1 = d0 = new Ctor(1);\r\n    d1 = n0 = new Ctor(0);\r\n\r\n    d = new Ctor(d1);\r\n    e = d.e = getPrecision(xd) - x.e - 1;\r\n    k = e % LOG_BASE;\r\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n    if (maxD == null) {\r\n\r\n      // d is 10**e, the minimum max-denominator needed.\r\n      maxD = e > 0 ? d : n1;\r\n    } else {\r\n      n = new Ctor(maxD);\r\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n    }\r\n\r\n    external = false;\r\n    n = new Ctor(digitsToString(xd));\r\n    pr = Ctor.precision;\r\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n    for (;;)  {\r\n      q = divide(n, d, 0, 1, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.cmp(maxD) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      d2 = n1;\r\n      n1 = n0.plus(q.times(d2));\r\n      n0 = d2;\r\n      d2 = d;\r\n      d = n.minus(q.times(d2));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n        ? [n1, d1] : [n0, d0];\r\n\r\n    Ctor.precision = pr;\r\n    external = true;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toHexadecimal = P.toHex = function (sd, rm) {\r\n    return toStringBinary(this, 16, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toNearest = function (y, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (y == null) {\r\n\r\n      // If x is not finite, return x.\r\n      if (!x.d) return x;\r\n\r\n      y = new Ctor(1);\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      y = new Ctor(y);\r\n      if (rm === void 0) {\r\n        rm = Ctor.rounding;\r\n      } else {\r\n        checkInt32(rm, 0, 8);\r\n      }\r\n\r\n      // If x is not finite, return x if y is not NaN, else NaN.\r\n      if (!x.d) return y.s ? x : y;\r\n\r\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n      if (!y.d) {\r\n        if (y.s) y.s = x.s;\r\n        return y;\r\n      }\r\n    }\r\n\r\n    // If y is not zero, calculate the nearest multiple of y to x.\r\n    if (y.d[0]) {\r\n      external = false;\r\n      x = divide(x, y, 0, rm, 1).times(y);\r\n      external = true;\r\n      finalise(x);\r\n\r\n    // If y is zero, return zero with the sign of x.\r\n    } else {\r\n      y.s = x.s;\r\n      x = y;\r\n    }\r\n\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toOctal = function (sd, rm) {\r\n    return toStringBinary(this, 8, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, ±0)                            = 1\r\n\r\n   *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, rm, s,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // Either ±Infinity, NaN or ±0?\r\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (x.eq(1)) return x;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n    // y exponent\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = intPow(Ctor, x, k, pr);\r\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n    }\r\n\r\n    s = x.s;\r\n\r\n    // if x is negative\r\n    if (s < 0) {\r\n\r\n      // if y is not an integer\r\n      if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n      // Result is positive if x is negative and the last digit of integer y is even.\r\n      if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n      // if x.eq(-1)\r\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n        x.s = s;\r\n        return x;\r\n      }\r\n    }\r\n\r\n    // Estimate result exponent.\r\n    // x^y = 10^e,  where e = y * log10(x)\r\n    // log10(x) = log10(x_significand) + x_exponent\r\n    // log10(x_significand) = ln(x_significand) / ln(10)\r\n    k = mathpow(+x, yn);\r\n    e = k == 0 || !isFinite(k)\r\n      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n      : new Ctor(k + '').e;\r\n\r\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n    // Overflow/underflow?\r\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n    external = false;\r\n    Ctor.rounding = x.s = 1;\r\n\r\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n    // new Decimal(2.32456).pow('2087987436534566.46411')\r\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n    k = Math.min(12, (e + '').length);\r\n\r\n    // r = x^y = exp(y*ln(x))\r\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n    if (r.d) {\r\n\r\n      // Truncate to the required precision plus five rounding digits.\r\n      r = finalise(r, pr + 5, 1);\r\n\r\n      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n      // the result.\r\n      if (checkRoundingDigits(r.d, pr, rm)) {\r\n        e = pr + 10;\r\n\r\n        // Truncate to the increased precision plus five rounding digits.\r\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n      }\r\n    }\r\n\r\n    r.s = s;\r\n    external = true;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), sd, rm);\r\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return finalise(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */\r\n  P.truncated = P.trunc = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n  // Add aliases to match BigDecimal method names.\r\n  // P.add = P.plus;\r\n  P.subtract = P.minus;\r\n  P.multiply = P.times;\r\n  P.divide = P.div;\r\n  P.remainder = P.mod;\r\n  P.compareTo = P.cmp;\r\n  P.negate = P.neg;\r\n   */\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */\r\n  function checkRoundingDigits(d, i, rm, repeating) {\r\n    var di, k, r, rd;\r\n\r\n    // Get the length of the first word of the array d.\r\n    for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n    // Is the rounding digit in the first word of d?\r\n    if (--i < 0) {\r\n      i += LOG_BASE;\r\n      di = 0;\r\n    } else {\r\n      di = Math.ceil((i + 1) / LOG_BASE);\r\n      i %= LOG_BASE;\r\n    }\r\n\r\n    // i is the index (0 - 6) of the rounding digit.\r\n    // E.g. if within the word 3487563 the first rounding digit is 5,\r\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n    k = mathpow(10, LOG_BASE - i);\r\n    rd = d[di] % k | 0;\r\n\r\n    if (repeating == null) {\r\n      if (i < 3) {\r\n        if (i == 0) rd = rd / 100 | 0;\r\n        else if (i == 1) rd = rd / 10 | 0;\r\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n      } else {\r\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n      }\r\n    } else {\r\n      if (i < 4) {\r\n        if (i == 0) rd = rd / 1000 | 0;\r\n        else if (i == 1) rd = rd / 100 | 0;\r\n        else if (i == 2) rd = rd / 10 | 0;\r\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n      } else {\r\n        r = ((repeating || rm < 4) && rd + 1 == k ||\r\n        (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\r\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n  function convertBase(str, baseIn, baseOut) {\r\n    var j,\r\n      arr = [0],\r\n      arrL,\r\n      i = 0,\r\n      strL = str.length;\r\n\r\n    for (; i < strL;) {\r\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n      for (j = 0; j < arr.length; j++) {\r\n        if (arr[j] > baseOut - 1) {\r\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n          arr[j + 1] += arr[j] / baseOut | 0;\r\n          arr[j] %= baseOut;\r\n        }\r\n      }\r\n    }\r\n\r\n    return arr.reverse();\r\n  }\r\n\r\n\r\n  /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function cosine(Ctor, x) {\r\n    var k, y,\r\n      len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      y = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      y = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    Ctor.precision += k;\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n    // Reverse argument reduction\r\n    for (var i = k; i--;) {\r\n      var cos2x = x.times(x);\r\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n    }\r\n\r\n    Ctor.precision -= k;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Perform division in the specified base.\r\n   */\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k, base) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % base | 0;\r\n        carry = temp / base | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, rm, dp, base) {\r\n      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n        yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n      }\r\n\r\n      if (base) {\r\n        logBase = 1;\r\n        e = x.e - y.e;\r\n      } else {\r\n        base = BASE;\r\n        logBase = LOG_BASE;\r\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n      }\r\n\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n      if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n        rm = Ctor.rounding;\r\n      } else if (dp) {\r\n        sd = pr + (x.e - y.e) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) {\r\n        qd.push(1);\r\n        more = true;\r\n      } else {\r\n\r\n        // Convert precision in number of base 10 digits to base 1e7 digits.\r\n        sd = sd / logBase + 2 | 0;\r\n        i = 0;\r\n\r\n        // divisor < 1e7\r\n        if (yL == 1) {\r\n          k = 0;\r\n          yd = yd[0];\r\n          sd++;\r\n\r\n          // k is the carry.\r\n          for (; (i < xL || k) && sd--; i++) {\r\n            t = k * base + (xd[i] || 0);\r\n            qd[i] = t / yd | 0;\r\n            k = t % yd | 0;\r\n          }\r\n\r\n          more = k || i < xL;\r\n\r\n        // divisor >= 1e7\r\n        } else {\r\n\r\n          // Normalise xd and yd so highest order digit of yd is >= base/2\r\n          k = base / (yd[0] + 1) | 0;\r\n\r\n          if (k > 1) {\r\n            yd = multiplyInteger(yd, k, base);\r\n            xd = multiplyInteger(xd, k, base);\r\n            yL = yd.length;\r\n            xL = xd.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xd.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL;) rem[remL++] = 0;\r\n\r\n          yz = yd.slice();\r\n          yz.unshift(0);\r\n          yd0 = yd[0];\r\n\r\n          if (yd[1] >= base / 2) ++yd0;\r\n\r\n          do {\r\n            k = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, k.\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // k will be how many times the divisor goes into the current remainder.\r\n              k = rem0 / yd0 | 0;\r\n\r\n              //  Algorithm:\r\n              //  1. product = divisor * trial digit (k)\r\n              //  2. if product > remainder: product -= divisor, k--\r\n              //  3. remainder -= product\r\n              //  4. if product was < remainder at 2:\r\n              //    5. compare new remainder and divisor\r\n              //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n              if (k > 1) {\r\n                if (k >= base) k = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiplyInteger(yd, k, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                cmp = compare(prod, rem, prodL, remL);\r\n\r\n                // product > remainder.\r\n                if (cmp == 1) {\r\n                  k--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n                }\r\n              } else {\r\n\r\n                // cmp is -1.\r\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n                if (k == 0) cmp = k = 1;\r\n                prod = yd.slice();\r\n              }\r\n\r\n              prodL = prod.length;\r\n              if (prodL < remL) prod.unshift(0);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n\r\n              // If product was < previous remainder.\r\n              if (cmp == -1) {\r\n                remL = rem.length;\r\n\r\n                // Compare divisor and new remainder.\r\n                cmp = compare(yd, rem, yL, remL);\r\n\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                if (cmp < 1) {\r\n                  k++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\r\n                }\r\n              }\r\n\r\n              remL = rem.length;\r\n            } else if (cmp === 0) {\r\n              k++;\r\n              rem = [0];\r\n            }    // if cmp === 1, k will be 0\r\n\r\n            // Add the next digit, k, to the result array.\r\n            qd[i++] = k;\r\n\r\n            // Update the remainder.\r\n            if (cmp && rem[0]) {\r\n              rem[remL++] = xd[xi] || 0;\r\n            } else {\r\n              rem = [xd[xi]];\r\n              remL = 1;\r\n            }\r\n\r\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n          more = rem[0] !== void 0;\r\n        }\r\n\r\n        // Leading zero?\r\n        if (!qd[0]) qd.shift();\r\n      }\r\n\r\n      // logBase is 1 when divide is being used for base conversion.\r\n      if (logBase == 1) {\r\n        q.e = e;\r\n        inexact = more;\r\n      } else {\r\n\r\n        // To calculate q.e, first get the number of digits of qd[0].\r\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n        q.e = i + e * logBase - 1;\r\n\r\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */\r\n   function finalise(x, sd, rm, isTruncated) {\r\n    var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n      Ctor = x.constructor;\r\n\r\n    // Don't round if sd is null or undefined.\r\n    out: if (sd != null) {\r\n      xd = x.d;\r\n\r\n      // Infinity/NaN.\r\n      if (!xd) return x;\r\n\r\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // w: the word of xd containing rd, a base 1e7 number.\r\n      // xdi: the index of w within xd.\r\n      // digits: the number of digits of w.\r\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n      // they had leading zeros)\r\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n      // Get the length of the first word of the digits array xd.\r\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n      i = sd - digits;\r\n\r\n      // Is the rounding digit in the first word of xd?\r\n      if (i < 0) {\r\n        i += LOG_BASE;\r\n        j = sd;\r\n        w = xd[xdi = 0];\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      } else {\r\n        xdi = Math.ceil((i + 1) / LOG_BASE);\r\n        k = xd.length;\r\n        if (xdi >= k) {\r\n          if (isTruncated) {\r\n\r\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n            for (; k++ <= xdi;) xd.push(0);\r\n            w = rd = 0;\r\n            digits = 1;\r\n            i %= LOG_BASE;\r\n            j = i - LOG_BASE + 1;\r\n          } else {\r\n            break out;\r\n          }\r\n        } else {\r\n          w = k = xd[xdi];\r\n\r\n          // Get the number of digits of w.\r\n          for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n          // Get the index of rd within w.\r\n          i %= LOG_BASE;\r\n\r\n          // Get the index of rd within w, adjusted for leading zeros.\r\n          // The number of leading zeros of w is given by LOG_BASE - digits.\r\n          j = i - LOG_BASE + digits;\r\n\r\n          // Get the rounding digit at index j of w.\r\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n        }\r\n      }\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      isTruncated = isTruncated || sd < 0 ||\r\n        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n      // will give 714.\r\n\r\n      roundUp = rm < 4\r\n        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n\r\n      if (sd < 1 || !xd[0]) {\r\n        xd.length = 0;\r\n        if (roundUp) {\r\n\r\n          // Convert sd to decimal places.\r\n          sd -= x.e + 1;\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n          x.e = -sd || 0;\r\n        } else {\r\n\r\n          // Zero.\r\n          xd[0] = x.e = 0;\r\n        }\r\n\r\n        return x;\r\n      }\r\n\r\n      // Remove excess digits.\r\n      if (i == 0) {\r\n        xd.length = xdi;\r\n        k = 1;\r\n        xdi--;\r\n      } else {\r\n        xd.length = xdi + 1;\r\n        k = mathpow(10, LOG_BASE - i);\r\n\r\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n        // j > 0 means i > number of leading zeros of w.\r\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n      }\r\n\r\n      if (roundUp) {\r\n        for (;;) {\r\n\r\n          // Is the digit to be rounded up in the first word of xd?\r\n          if (xdi == 0) {\r\n\r\n            // i will be the length of xd[0] before k is added.\r\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n            j = xd[0] += k;\r\n            for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n            // if i != k the length has increased.\r\n            if (i != k) {\r\n              x.e++;\r\n              if (xd[0] == BASE) xd[0] = 1;\r\n            }\r\n\r\n            break;\r\n          } else {\r\n            xd[xdi] += k;\r\n            if (xd[xdi] != BASE) break;\r\n            xd[xdi--] = 0;\r\n            k = 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n    }\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > Ctor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < Ctor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // Ctor.underflow = true;\r\n      } // else Ctor.underflow = false;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function finiteToString(x, isExp, sd) {\r\n    if (!x.isFinite()) return nonFiniteToString(x);\r\n    var k,\r\n      e = x.e,\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(digits, e) {\r\n    var w = digits[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n    if (sd > LN10_PRECISION) {\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(precisionLimitExceeded);\r\n    }\r\n    return finalise(new Ctor(LN10), sd, 1, true);\r\n  }\r\n\r\n\r\n  function getPi(Ctor, sd, rm) {\r\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n    return finalise(new Ctor(PI), sd, rm, true);\r\n  }\r\n\r\n\r\n  function getPrecision(digits) {\r\n    var w = digits.length - 1,\r\n      len = w * LOG_BASE + 1;\r\n\r\n    w = digits[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) len--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = digits[0]; w >= 10; w /= 10) len++;\r\n    }\r\n\r\n    return len;\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */\r\n  function intPow(Ctor, x, n, pr) {\r\n    var isTruncated,\r\n      r = new Ctor(1),\r\n\r\n      // Max n of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (n % 2) {\r\n        r = r.times(x);\r\n        if (truncate(r.d, k)) isTruncated = true;\r\n      }\r\n\r\n      n = mathfloor(n / 2);\r\n      if (n === 0) {\r\n\r\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n        n = r.d.length - 1;\r\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n        break;\r\n      }\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, k);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  function isOdd(n) {\r\n    return n.d[n.d.length - 1] & 1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n   */\r\n  function maxOrMin(Ctor, args, ltgt) {\r\n    var y,\r\n      x = new Ctor(args[0]),\r\n      i = 0;\r\n\r\n    for (; ++i < args.length;) {\r\n      y = new Ctor(args[i]);\r\n      if (!y.s) {\r\n        x = y;\r\n        break;\r\n      } else if (x[ltgt](y)) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(±0)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */\r\n  function naturalExponential(x, sd) {\r\n    var denominator, guard, j, pow, sum, t, wpr,\r\n      rep = 0,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // 0/NaN/Infinity?\r\n    if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n      return new Ctor(x.d\r\n        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    // while abs(x) >= 0.1\r\n    while (x.e > -2) {\r\n\r\n      // x = x / 2^5\r\n      x = x.times(t);\r\n      k += 5;\r\n    }\r\n\r\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n    // necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(1);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = finalise(pow.times(x), wpr, 1);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        j = k;\r\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n        // Check to see if the first 4 rounding digits are [49]999.\r\n        // If so, repeat the summation with a higher precision, otherwise\r\n        // e.g. with precision: 18, rounding: 1\r\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n\r\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += 10;\r\n            denominator = pow = t = new Ctor(1);\r\n            i = 0;\r\n            rep++;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */\r\n  function naturalLogarithm(y, sd) {\r\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // Is x negative or Infinity, NaN, 0 or 1?\r\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    Ctor.precision = wpr += guard;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n\r\n    if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = x.e;\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n      Ctor.precision = pr;\r\n\r\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n    }\r\n\r\n    // x1 is x reduced to a value near 1.\r\n    x1 = x;\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n    x2 = finalise(x.times(x), wpr, 1);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = finalise(numerator.times(x2), wpr, 1);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n        // been repeated previously) and the first 4 rounding digits 9999?\r\n        // If so, restart the summation with a higher precision, otherwise\r\n        // e.g. with precision: 12, rounding: 1\r\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += guard;\r\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n            x2 = finalise(x.times(x), wpr, 1);\r\n            denominator = rep = 1;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  // ±Infinity, NaN.\r\n  function nonFiniteToString(x) {\r\n    // Unsigned.\r\n    return String(x.s * x.s / 0);\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      x.e = e = e - i - 1;\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external) {\r\n\r\n        // Overflow?\r\n        if (x.e > x.constructor.maxE) {\r\n\r\n          // Infinity.\r\n          x.d = null;\r\n          x.e = NaN;\r\n\r\n        // Underflow?\r\n        } else if (x.e < x.constructor.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n          // x.constructor.underflow = true;\r\n        } // else x.constructor.underflow = false;\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */\r\n  function parseOther(x, str) {\r\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n    if (str === 'Infinity' || str === 'NaN') {\r\n      if (!+str) x.s = NaN;\r\n      x.e = NaN;\r\n      x.d = null;\r\n      return x;\r\n    }\r\n\r\n    if (isHex.test(str))  {\r\n      base = 16;\r\n      str = str.toLowerCase();\r\n    } else if (isBinary.test(str))  {\r\n      base = 2;\r\n    } else if (isOctal.test(str))  {\r\n      base = 8;\r\n    } else {\r\n      throw Error(invalidArgument + str);\r\n    }\r\n\r\n    // Is there a binary exponent part?\r\n    i = str.search(/p/i);\r\n\r\n    if (i > 0) {\r\n      p = +str.slice(i + 1);\r\n      str = str.substring(2, i);\r\n    } else {\r\n      str = str.slice(2);\r\n    }\r\n\r\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n    // fraction part will be restored.\r\n    i = str.indexOf('.');\r\n    isFloat = i >= 0;\r\n    Ctor = x.constructor;\r\n\r\n    if (isFloat) {\r\n      str = str.replace('.', '');\r\n      len = str.length;\r\n      i = len - i;\r\n\r\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n    }\r\n\r\n    xd = convertBase(str, base, BASE);\r\n    xe = xd.length - 1;\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xe; xd[i] === 0; --i) xd.pop();\r\n    if (i < 0) return new Ctor(x.s * 0);\r\n    x.e = getBase10Exponent(xd, xe);\r\n    x.d = xd;\r\n    external = false;\r\n\r\n    // At what precision to perform the division to ensure exact conversion?\r\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n    // Therefore using 4 * the number of digits of str will always be enough.\r\n    if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n    // Multiply by the binary exponent part if present.\r\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n    external = true;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function sine(Ctor, x) {\r\n    var k,\r\n      len = x.d.length;\r\n\r\n    if (len < 3) return taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Reverse argument reduction\r\n    var sin2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sin2_x = x.times(x);\r\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n    var j, t, u, x2,\r\n      i = 1,\r\n      pr = Ctor.precision,\r\n      k = Math.ceil(pr / LOG_BASE);\r\n\r\n    external = false;\r\n    x2 = x.times(x);\r\n    u = new Ctor(y);\r\n\r\n    for (;;) {\r\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      t = u.plus(y);\r\n\r\n      if (t.d[k] !== void 0) {\r\n        for (j = k; t.d[j] === u.d[j] && j--;);\r\n        if (j == -1) break;\r\n      }\r\n\r\n      j = u;\r\n      u = y;\r\n      y = t;\r\n      t = j;\r\n      i++;\r\n    }\r\n\r\n    external = true;\r\n    t.d.length = k + 1;\r\n\r\n    return t;\r\n  }\r\n\r\n\r\n  // Exponent e must be positive and non-zero.\r\n  function tinyPow(b, e) {\r\n    var n = b;\r\n    while (--e) n *= b;\r\n    return n;\r\n  }\r\n\r\n\r\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\r\n  function toLessThanHalfPi(Ctor, x) {\r\n    var t,\r\n      isNeg = x.s < 0,\r\n      pi = getPi(Ctor, Ctor.precision, 1),\r\n      halfPi = pi.times(0.5);\r\n\r\n    x = x.abs();\r\n\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isNeg ? 4 : 1;\r\n      return x;\r\n    }\r\n\r\n    t = x.divToInt(pi);\r\n\r\n    if (t.isZero()) {\r\n      quadrant = isNeg ? 3 : 2;\r\n    } else {\r\n      x = x.minus(t.times(pi));\r\n\r\n      // 0 <= x < pi\r\n      if (x.lte(halfPi)) {\r\n        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n        return x;\r\n      }\r\n\r\n      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n    }\r\n\r\n    return x.minus(pi).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */\r\n  function toStringBinary(x, baseOut, sd, rm) {\r\n    var base, e, i, k, len, roundUp, str, xd, y,\r\n      Ctor = x.constructor,\r\n      isExp = sd !== void 0;\r\n\r\n    if (isExp) {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    } else {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    }\r\n\r\n    if (!x.isFinite()) {\r\n      str = nonFiniteToString(x);\r\n    } else {\r\n      str = finiteToString(x);\r\n      i = str.indexOf('.');\r\n\r\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n      // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n      if (isExp) {\r\n        base = 2;\r\n        if (baseOut == 16) {\r\n          sd = sd * 4 - 3;\r\n        } else if (baseOut == 8) {\r\n          sd = sd * 3 - 2;\r\n        }\r\n      } else {\r\n        base = baseOut;\r\n      }\r\n\r\n      // Convert the number as an integer then divide the result by its base raised to a power such\r\n      // that the fraction part will be restored.\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        str = str.replace('.', '');\r\n        y = new Ctor(1);\r\n        y.e = str.length - i;\r\n        y.d = convertBase(finiteToString(y), 10, base);\r\n        y.e = y.d.length;\r\n      }\r\n\r\n      xd = convertBase(str, 10, base);\r\n      e = len = xd.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xd[--len] == 0;) xd.pop();\r\n\r\n      if (!xd[0]) {\r\n        str = isExp ? '0p+0' : '0';\r\n      } else {\r\n        if (i < 0) {\r\n          e--;\r\n        } else {\r\n          x = new Ctor(x);\r\n          x.d = xd;\r\n          x.e = e;\r\n          x = divide(x, y, sd, rm, 0, base);\r\n          xd = x.d;\r\n          e = x.e;\r\n          roundUp = inexact;\r\n        }\r\n\r\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        i = xd[sd];\r\n        k = base / 2;\r\n        roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n        roundUp = rm < 4\r\n          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n            rm === (x.s < 0 ? 8 : 7));\r\n\r\n        xd.length = sd;\r\n\r\n        if (roundUp) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (; ++xd[--sd] > base - 1;) {\r\n            xd[sd] = 0;\r\n            if (!sd) {\r\n              ++e;\r\n              xd.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n        // Add binary exponent suffix?\r\n        if (isExp) {\r\n          if (len > 1) {\r\n            if (baseOut == 16 || baseOut == 8) {\r\n              i = baseOut == 16 ? 4 : 3;\r\n              for (--len; len % i; len++) str += '0';\r\n              xd = convertBase(str, base, baseOut);\r\n              for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n              // xd[0] will always be be 1\r\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n            } else {\r\n              str = str.charAt(0) + '.' + str.slice(1);\r\n            }\r\n          }\r\n\r\n          str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n        } else if (e < 0) {\r\n          for (; ++e;) str = '0' + str;\r\n          str = '0.' + str;\r\n        } else {\r\n          if (++e > len) for (e -= len; e-- ;) str += '0';\r\n          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n        }\r\n      }\r\n\r\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function abs(x) {\r\n    return new this(x).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function acos(x) {\r\n    return new this(x).acos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function acosh(x) {\r\n    return new this(x).acosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function add(x, y) {\r\n    return new this(x).plus(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function asin(x) {\r\n    return new this(x).asin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function asinh(x) {\r\n    return new this(x).asinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function atan(x) {\r\n    return new this(x).atan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function atanh(x) {\r\n    return new this(x).atanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|Decimal} The y-coordinate.\r\n   * x {number|string|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(±0, -0)               = ±pi\r\n   * atan2(±0, +0)               = ±0\r\n   * atan2(±0, -x)               = ±pi for x > 0\r\n   * atan2(±0, x)                = ±0 for x > 0\r\n   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n   * atan2(y, ±0)                = pi/2 for y > 0\r\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n   * atan2(±Infinity, +Infinity) = ±pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */\r\n  function atan2(y, x) {\r\n    y = new this(y);\r\n    x = new this(x);\r\n    var r,\r\n      pr = this.precision,\r\n      rm = this.rounding,\r\n      wpr = pr + 4;\r\n\r\n    // Either NaN\r\n    if (!y.s || !x.s) {\r\n      r = new this(NaN);\r\n\r\n    // Both ±Infinity\r\n    } else if (!y.d && !x.d) {\r\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n      r.s = y.s;\r\n\r\n    // x is ±Infinity or y is ±0\r\n    } else if (!x.d || y.isZero()) {\r\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n      r.s = y.s;\r\n\r\n    // y is ±Infinity or x is ±0\r\n    } else if (!y.d || x.isZero()) {\r\n      r = getPi(this, wpr, 1).times(0.5);\r\n      r.s = y.s;\r\n\r\n    // Both non-zero and finite\r\n    } else if (x.s < 0) {\r\n      this.precision = wpr;\r\n      this.rounding = 1;\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n      x = getPi(this, wpr, 1);\r\n      this.precision = pr;\r\n      this.rounding = rm;\r\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n    } else {\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function cbrt(x) {\r\n    return new this(x).cbrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ceil(x) {\r\n    return finalise(x = new this(x), x.e + 1, 2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *   defaults   {true}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n    var i, p, v,\r\n      useDefaults = obj.defaults === true,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -EXP_LIMIT, 0,\r\n        'toExpPos', 0, EXP_LIMIT,\r\n        'maxE', 0, EXP_LIMIT,\r\n        'minE', -EXP_LIMIT, 0,\r\n        'modulo', 0, 9\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n      if ((v = obj[p]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (v === true || v === false || v === 0 || v === 1) {\r\n        if (v) {\r\n          if (typeof crypto != 'undefined' && crypto &&\r\n            (crypto.getRandomValues || crypto.randomBytes)) {\r\n            this[p] = true;\r\n          } else {\r\n            throw Error(cryptoUnavailable);\r\n          }\r\n        } else {\r\n          this[p] = false;\r\n        }\r\n      } else {\r\n        throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cos(x) {\r\n    return new this(x).cos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cosh(x) {\r\n    return new this(x).cosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(v) {\r\n      var e, i, t,\r\n        x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (v instanceof Decimal) {\r\n        x.s = v.s;\r\n\r\n        if (external) {\r\n          if (!v.d || v.e > Decimal.maxE) {\r\n\r\n            // Infinity.\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (v.e < Decimal.minE) {\r\n\r\n            // Zero.\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.d = v.d.slice();\r\n          }\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d ? v.d.slice() : v.d;\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      t = typeof v;\r\n\r\n      if (t === 'number') {\r\n        if (v === 0) {\r\n          x.s = 1 / v < 0 ? -1 : 1;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        if (v < 0) {\r\n          v = -v;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 1;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (v === ~~v && v < 1e7) {\r\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n          if (external) {\r\n            if (e > Decimal.maxE) {\r\n              x.e = NaN;\r\n              x.d = null;\r\n            } else if (e < Decimal.minE) {\r\n              x.e = 0;\r\n              x.d = [0];\r\n            } else {\r\n              x.e = e;\r\n              x.d = [v];\r\n            }\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n\r\n          return;\r\n\r\n        // Infinity, NaN.\r\n        } else if (v * 0 !== 0) {\r\n          if (!v) x.s = NaN;\r\n          x.e = NaN;\r\n          x.d = null;\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, v.toString());\r\n\r\n      } else if (t !== 'string') {\r\n        throw Error(invalidArgument + v);\r\n      }\r\n\r\n      // Minus sign?\r\n      if ((i = v.charCodeAt(0)) === 45) {\r\n        v = v.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        // Plus sign?\r\n        if (i === 43) v = v.slice(1);\r\n        x.s = 1;\r\n      }\r\n\r\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n    Decimal.EUCLID = 9;\r\n\r\n    Decimal.config = Decimal.set = config;\r\n    Decimal.clone = clone;\r\n    Decimal.isDecimal = isDecimalInstance;\r\n\r\n    Decimal.abs = abs;\r\n    Decimal.acos = acos;\r\n    Decimal.acosh = acosh;        // ES6\r\n    Decimal.add = add;\r\n    Decimal.asin = asin;\r\n    Decimal.asinh = asinh;        // ES6\r\n    Decimal.atan = atan;\r\n    Decimal.atanh = atanh;        // ES6\r\n    Decimal.atan2 = atan2;\r\n    Decimal.cbrt = cbrt;          // ES6\r\n    Decimal.ceil = ceil;\r\n    Decimal.cos = cos;\r\n    Decimal.cosh = cosh;          // ES6\r\n    Decimal.div = div;\r\n    Decimal.exp = exp;\r\n    Decimal.floor = floor;\r\n    Decimal.hypot = hypot;        // ES6\r\n    Decimal.ln = ln;\r\n    Decimal.log = log;\r\n    Decimal.log10 = log10;        // ES6\r\n    Decimal.log2 = log2;          // ES6\r\n    Decimal.max = max;\r\n    Decimal.min = min;\r\n    Decimal.mod = mod;\r\n    Decimal.mul = mul;\r\n    Decimal.pow = pow;\r\n    Decimal.random = random;\r\n    Decimal.round = round;\r\n    Decimal.sign = sign;          // ES6\r\n    Decimal.sin = sin;\r\n    Decimal.sinh = sinh;          // ES6\r\n    Decimal.sqrt = sqrt;\r\n    Decimal.sub = sub;\r\n    Decimal.tan = tan;\r\n    Decimal.tanh = tanh;          // ES6\r\n    Decimal.trunc = trunc;        // ES6\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      if (obj.defaults !== true) {\r\n        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n      }\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function div(x, y) {\r\n    return new this(x).div(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */\r\n  function exp(x) {\r\n    return new this(x).exp();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function floor(x) {\r\n    return finalise(x = new this(x), x.e + 1, 3);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function hypot() {\r\n    var i, n,\r\n      t = new this(0);\r\n\r\n    external = false;\r\n\r\n    for (i = 0; i < arguments.length;) {\r\n      n = new this(arguments[i++]);\r\n      if (!n.d) {\r\n        if (n.s) {\r\n          external = true;\r\n          return new this(1 / 0);\r\n        }\r\n        t = n;\r\n      } else if (t.d) {\r\n        t = t.plus(n.times(n));\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return t.sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  function isDecimalInstance(obj) {\r\n    return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ln(x) {\r\n    return new this(x).ln();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|Decimal} The argument of the logarithm.\r\n   * y {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  function log(x, y) {\r\n    return new this(x).log(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log2(x) {\r\n    return new this(x).log(2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log10(x) {\r\n    return new this(x).log(10);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function max() {\r\n    return maxOrMin(this, arguments, 'lt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function min() {\r\n    return maxOrMin(this, arguments, 'gt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mod(x, y) {\r\n    return new this(x).mod(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mul(x, y) {\r\n    return new this(x).mul(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The base.\r\n   * y {number|string|Decimal} The exponent.\r\n   *\r\n   */\r\n  function pow(x, y) {\r\n    return new this(x).pow(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */\r\n  function random(sd) {\r\n    var d, e, k, n,\r\n      i = 0,\r\n      r = new this(1),\r\n      rd = [];\r\n\r\n    if (sd === void 0) sd = this.precision;\r\n    else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    k = Math.ceil(sd / LOG_BASE);\r\n\r\n    if (!this.crypto) {\r\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n    // Browsers supporting crypto.getRandomValues.\r\n    } else if (crypto.getRandomValues) {\r\n      d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n      for (; i < k;) {\r\n        n = d[i];\r\n\r\n        // 0 <= n < 4294967296\r\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n        if (n >= 4.29e9) {\r\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n        } else {\r\n\r\n          // 0 <= n <= 4289999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd[i++] = n % 1e7;\r\n        }\r\n      }\r\n\r\n    // Node.js supporting crypto.randomBytes.\r\n    } else if (crypto.randomBytes) {\r\n\r\n      // buffer\r\n      d = crypto.randomBytes(k *= 4);\r\n\r\n      for (; i < k;) {\r\n\r\n        // 0 <= n < 2147483648\r\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n        if (n >= 2.14e9) {\r\n          crypto.randomBytes(4).copy(d, i);\r\n        } else {\r\n\r\n          // 0 <= n <= 2139999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd.push(n % 1e7);\r\n          i += 4;\r\n        }\r\n      }\r\n\r\n      i = k / 4;\r\n    } else {\r\n      throw Error(cryptoUnavailable);\r\n    }\r\n\r\n    k = rd[--i];\r\n    sd %= LOG_BASE;\r\n\r\n    // Convert trailing digits to zeros according to sd.\r\n    if (k && sd) {\r\n      n = mathpow(10, LOG_BASE - sd);\r\n      rd[i] = (k / n | 0) * n;\r\n    }\r\n\r\n    // Remove trailing words which are zero.\r\n    for (; rd[i] === 0; i--) rd.pop();\r\n\r\n    // Zero?\r\n    if (i < 0) {\r\n      e = 0;\r\n      rd = [0];\r\n    } else {\r\n      e = -1;\r\n\r\n      // Remove leading words which are zero and adjust exponent accordingly.\r\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n      // Count the digits of the first word of rd to determine leading zeros.\r\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n      // Adjust the exponent for leading zeros of the first word of rd.\r\n      if (k < LOG_BASE) e -= LOG_BASE - k;\r\n    }\r\n\r\n    r.e = e;\r\n    r.d = rd;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function round(x) {\r\n    return finalise(x = new this(x), x.e + 1, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sign(x) {\r\n    x = new this(x);\r\n    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sin(x) {\r\n    return new this(x).sin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sinh(x) {\r\n    return new this(x).sinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sqrt(x) {\r\n    return new this(x).sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function sub(x, y) {\r\n    return new this(x).sub(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tan(x) {\r\n    return new this(x).tan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tanh(x) {\r\n    return new this(x).tanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function trunc(x) {\r\n    return finalise(x = new this(x), x.e + 1, 1);\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(DEFAULTS);\r\n\r\n  Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Create the internal constants from their string values.\r\n  LN10 = new Decimal(LN10);\r\n  PI = new Decimal(PI);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\r\n      P[Symbol.toStringTag] = 'Decimal';\r\n    }\r\n\r\n    module.exports = Decimal;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;\r\n    }\r\n\r\n    noConflict = globalScope.Decimal;\r\n    Decimal.noConflict = function () {\r\n      globalScope.Decimal = noConflict;\r\n      return Decimal;\r\n    };\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n"]},"metadata":{},"sourceType":"script"}