{"ast":null,"code":"/**\n * Compares two BigNumbers.\n * @param {BigNumber} x       First value to compare\n * @param {BigNumber} y       Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n */\nexport function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x.eq(y);\n  } // use \"==\" operator, handles infinities\n\n\n  if (x.eq(y)) {\n    return true;\n  } // NaN\n\n\n  if (x.isNaN() || y.isNaN()) {\n    return false;\n  } // at this point x and y should be finite\n\n\n  if (x.isFinite() && y.isFinite()) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = x.minus(y).abs();\n\n    if (diff.isZero()) {\n      return true;\n    } else {\n      // use relative error\n      var max = x.constructor.max(x.abs(), y.abs());\n      return diff.lte(max.times(epsilon));\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n\n  return false;\n}","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/utils/bignumber/nearlyEqual.js"],"names":["nearlyEqual","x","y","epsilon","undefined","eq","isNaN","isFinite","diff","minus","abs","isZero","max","constructor","lte","times"],"mappings":"AAAA;;;;;;;;;AASA,OAAO,SAASA,WAAT,CAAqBC,CAArB,EAAwBC,CAAxB,EAA2BC,OAA3B,EAAoC;AACzC;AACA,MAAIA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAKC,SAApC,EAA+C;AAC7C,WAAOH,CAAC,CAACI,EAAF,CAAKH,CAAL,CAAP;AACD,GAJwC,CAIvC;;;AAGF,MAAID,CAAC,CAACI,EAAF,CAAKH,CAAL,CAAJ,EAAa;AACX,WAAO,IAAP;AACD,GATwC,CASvC;;;AAGF,MAAID,CAAC,CAACK,KAAF,MAAaJ,CAAC,CAACI,KAAF,EAAjB,EAA4B;AAC1B,WAAO,KAAP;AACD,GAdwC,CAcvC;;;AAGF,MAAIL,CAAC,CAACM,QAAF,MAAgBL,CAAC,CAACK,QAAF,EAApB,EAAkC;AAChC;AACA,QAAIC,IAAI,GAAGP,CAAC,CAACQ,KAAF,CAAQP,CAAR,EAAWQ,GAAX,EAAX;;AAEA,QAAIF,IAAI,CAACG,MAAL,EAAJ,EAAmB;AACjB,aAAO,IAAP;AACD,KAFD,MAEO;AACL;AACA,UAAIC,GAAG,GAAGX,CAAC,CAACY,WAAF,CAAcD,GAAd,CAAkBX,CAAC,CAACS,GAAF,EAAlB,EAA2BR,CAAC,CAACQ,GAAF,EAA3B,CAAV;AACA,aAAOF,IAAI,CAACM,GAAL,CAASF,GAAG,CAACG,KAAJ,CAAUZ,OAAV,CAAT,CAAP;AACD;AACF,GA5BwC,CA4BvC;;;AAGF,SAAO,KAAP;AACD","sourcesContent":["/**\n * Compares two BigNumbers.\n * @param {BigNumber} x       First value to compare\n * @param {BigNumber} y       Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n */\nexport function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x.eq(y);\n  } // use \"==\" operator, handles infinities\n\n\n  if (x.eq(y)) {\n    return true;\n  } // NaN\n\n\n  if (x.isNaN() || y.isNaN()) {\n    return false;\n  } // at this point x and y should be finite\n\n\n  if (x.isFinite() && y.isFinite()) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = x.minus(y).abs();\n\n    if (diff.isZero()) {\n      return true;\n    } else {\n      // use relative error\n      var max = x.constructor.max(x.abs(), y.abs());\n      return diff.lte(max.times(epsilon));\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n\n  return false;\n}"]},"metadata":{},"sourceType":"module"}