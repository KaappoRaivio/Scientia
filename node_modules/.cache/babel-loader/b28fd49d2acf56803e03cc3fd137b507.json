{"ast":null,"code":"import { deepMap } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nvar name = 'isPrime';\nvar dependencies = ['typed'];\nexport var createIsPrime = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Test whether a value is prime: has no divisors other than itself and one.\n   * The function supports type `number`, `bignumber`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPrime(x)\n   *\n   * Examples:\n   *\n   *    math.isPrime(3)                     // returns true\n   *    math.isPrime(-2)                    // returns false\n   *    math.isPrime(0)                     // returns false\n   *    math.isPrime(-0)                    // returns false\n   *    math.isPrime(0.5)                   // returns false\n   *    math.isPrime('2')                   // returns true\n   *    math.isPrime([2, 17, 100])           // returns [true, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n\n  var isPrime = typed(name, {\n    number: function number(x) {\n      if (x * 0 !== 0) {\n        return false;\n      }\n\n      if (x <= 3) {\n        return x > 1;\n      }\n\n      if (x % 2 === 0 || x % 3 === 0) {\n        return false;\n      }\n\n      for (var i = 5; i * i <= x; i += 6) {\n        if (x % i === 0 || x % (i + 2) === 0) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.toNumber() * 0 !== 0) {\n        return false;\n      }\n\n      if (n.lte(3)) return n.gt(1);\n      if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;\n\n      for (var i = 5; n.gte(i * i); i += 6) {\n        if (n.mod(i).eq(0) || n.mod(i + 2).eq(0)) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, isPrime);\n    }\n  });\n  return isPrime;\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/utils/isPrime.js"],"names":["deepMap","factory","name","dependencies","createIsPrime","_ref","typed","isPrime","number","x","i","BigNumber","n","toNumber","lte","gt","mod","eq","gte","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACpF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,MAAIC,OAAO,GAAGD,KAAK,CAACJ,IAAD,EAAO;AACxBM,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB,UAAIA,CAAC,GAAG,CAAJ,KAAU,CAAd,EAAiB;AACf,eAAO,KAAP;AACD;;AAED,UAAIA,CAAC,IAAI,CAAT,EAAY;AACV,eAAOA,CAAC,GAAG,CAAX;AACD;;AAED,UAAIA,CAAC,GAAG,CAAJ,KAAU,CAAV,IAAeA,CAAC,GAAG,CAAJ,KAAU,CAA7B,EAAgC;AAC9B,eAAO,KAAP;AACD;;AAED,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGA,CAAJ,IAASD,CAAzB,EAA4BC,CAAC,IAAI,CAAjC,EAAoC;AAClC,YAAID,CAAC,GAAGC,CAAJ,KAAU,CAAV,IAAeD,CAAC,IAAIC,CAAC,GAAG,CAAR,CAAD,KAAgB,CAAnC,EAAsC;AACpC,iBAAO,KAAP;AACD;AACF;;AAED,aAAO,IAAP;AACD,KArBuB;AAsBxBC,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,CAAnB,EAAsB;AAC/B,UAAIA,CAAC,CAACC,QAAF,KAAe,CAAf,KAAqB,CAAzB,EAA4B;AAC1B,eAAO,KAAP;AACD;;AAED,UAAID,CAAC,CAACE,GAAF,CAAM,CAAN,CAAJ,EAAc,OAAOF,CAAC,CAACG,EAAF,CAAK,CAAL,CAAP;AACd,UAAIH,CAAC,CAACI,GAAF,CAAM,CAAN,EAASC,EAAT,CAAY,CAAZ,KAAkBL,CAAC,CAACI,GAAF,CAAM,CAAN,EAASC,EAAT,CAAY,CAAZ,CAAtB,EAAsC,OAAO,KAAP;;AAEtC,WAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBE,CAAC,CAACM,GAAF,CAAMR,CAAC,GAAGA,CAAV,CAAhB,EAA8BA,CAAC,IAAI,CAAnC,EAAsC;AACpC,YAAIE,CAAC,CAACI,GAAF,CAAMN,CAAN,EAASO,EAAT,CAAY,CAAZ,KAAkBL,CAAC,CAACI,GAAF,CAAMN,CAAC,GAAG,CAAV,EAAaO,EAAb,CAAgB,CAAhB,CAAtB,EAA0C;AACxC,iBAAO,KAAP;AACD;AACF;;AAED,aAAO,IAAP;AACD,KArCuB;AAsCxB,sBAAkB,SAASE,WAAT,CAAqBV,CAArB,EAAwB;AACxC,aAAOT,OAAO,CAACS,CAAD,EAAIF,OAAJ,CAAd;AACD;AAxCuB,GAAP,CAAnB;AA0CA,SAAOA,OAAP;AACD,CA1EgD,CAA1C","sourcesContent":["import { deepMap } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nvar name = 'isPrime';\nvar dependencies = ['typed'];\nexport var createIsPrime = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Test whether a value is prime: has no divisors other than itself and one.\n   * The function supports type `number`, `bignumber`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPrime(x)\n   *\n   * Examples:\n   *\n   *    math.isPrime(3)                     // returns true\n   *    math.isPrime(-2)                    // returns false\n   *    math.isPrime(0)                     // returns false\n   *    math.isPrime(-0)                    // returns false\n   *    math.isPrime(0.5)                   // returns false\n   *    math.isPrime('2')                   // returns true\n   *    math.isPrime([2, 17, 100])           // returns [true, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  var isPrime = typed(name, {\n    number: function number(x) {\n      if (x * 0 !== 0) {\n        return false;\n      }\n\n      if (x <= 3) {\n        return x > 1;\n      }\n\n      if (x % 2 === 0 || x % 3 === 0) {\n        return false;\n      }\n\n      for (var i = 5; i * i <= x; i += 6) {\n        if (x % i === 0 || x % (i + 2) === 0) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.toNumber() * 0 !== 0) {\n        return false;\n      }\n\n      if (n.lte(3)) return n.gt(1);\n      if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;\n\n      for (var i = 5; n.gte(i * i); i += 6) {\n        if (n.mod(i).eq(0) || n.mod(i + 2).eq(0)) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, isPrime);\n    }\n  });\n  return isPrime;\n});"]},"metadata":{},"sourceType":"module"}