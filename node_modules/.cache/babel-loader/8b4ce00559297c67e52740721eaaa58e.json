{"ast":null,"code":"import { factory } from '../../utils/factory';\nvar name = 'norm';\nvar dependencies = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix'];\nexport var createNorm = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      abs = _ref.abs,\n      add = _ref.add,\n      pow = _ref.pow,\n      conj = _ref.conj,\n      sqrt = _ref.sqrt,\n      multiply = _ref.multiply,\n      equalScalar = _ref.equalScalar,\n      larger = _ref.larger,\n      smaller = _ref.smaller,\n      matrix = _ref.matrix;\n  /**\n   * Calculate the norm of a number, vector or matrix.\n   *\n   * The second parameter p is optional. If not provided, it defaults to 2.\n   *\n   * Syntax:\n   *\n   *    math.norm(x)\n   *    math.norm(x, p)\n   *\n   * Examples:\n   *\n   *    math.abs(-3.5)                         // returns 3.5\n   *    math.norm(-3.5)                        // returns 3.5\n   *\n   *    math.norm(math.complex(3, -4))         // returns 5\n   *\n   *    math.norm([1, 2, -3], Infinity)        // returns 3\n   *    math.norm([1, 2, -3], -Infinity)       // returns 1\n   *\n   *    math.norm([3, 4], 2)                   // returns 5\n   *\n   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\n   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7\n   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661\n   *\n   * See also:\n   *\n   *    abs, hypot\n   *\n   * @param  {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the norm\n   * @param  {number | BigNumber | string} [p=2]\n   *            Vector space.\n   *            Supported numbers include Infinity and -Infinity.\n   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\n   * @return {number | BigNumber} the p-norm\n   */\n\n  var norm = typed(name, {\n    number: Math.abs,\n    Complex: function Complex(x) {\n      return x.abs();\n    },\n    BigNumber: function BigNumber(x) {\n      // norm(x) = abs(x)\n      return x.abs();\n    },\n    \"boolean\": function boolean(x) {\n      // norm(x) = abs(x)\n      return Math.abs(x);\n    },\n    Array: function Array(x) {\n      return _norm(matrix(x), 2);\n    },\n    Matrix: function Matrix(x) {\n      return _norm(x, 2);\n    },\n    'number | Complex | BigNumber | boolean, number | BigNumber | string': function numberComplexBigNumberBooleanNumberBigNumberString(x) {\n      // ignore second parameter, TODO: remove the option of second parameter for these types\n      return norm(x);\n    },\n    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {\n      return _norm(matrix(x), p);\n    },\n    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {\n      return _norm(x, p);\n    }\n  });\n  /**\n   * Calculate the norm for an array\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n  function _norm(x, p) {\n    // size\n    var sizeX = x.size(); // check if it is a vector\n\n    if (sizeX.length === 1) {\n      // check p\n      if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n        // norm(x, Infinity) = max(abs(x))\n        var pinf = 0; // skip zeros since abs(0) === 0\n\n        x.forEach(function (value) {\n          var v = abs(value);\n\n          if (larger(v, pinf)) {\n            pinf = v;\n          }\n        }, true);\n        return pinf;\n      }\n\n      if (p === Number.NEGATIVE_INFINITY || p === '-inf') {\n        // norm(x, -Infinity) = min(abs(x))\n        var ninf; // skip zeros since abs(0) === 0\n\n        x.forEach(function (value) {\n          var v = abs(value);\n\n          if (!ninf || smaller(v, ninf)) {\n            ninf = v;\n          }\n        }, true);\n        return ninf || 0;\n      }\n\n      if (p === 'fro') {\n        return _norm(x, 2);\n      }\n\n      if (typeof p === 'number' && !isNaN(p)) {\n        // check p != 0\n        if (!equalScalar(p, 0)) {\n          // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p\n          var n = 0; // skip zeros since abs(0) === 0\n\n          x.forEach(function (value) {\n            n = add(pow(abs(value), p), n);\n          }, true);\n          return pow(n, 1 / p);\n        }\n\n        return Number.POSITIVE_INFINITY;\n      } // invalid parameter value\n\n\n      throw new Error('Unsupported parameter value');\n    } // MxN matrix\n\n\n    if (sizeX.length === 2) {\n      // check p\n      if (p === 1) {\n        // norm(x) = the largest column sum\n        var c = []; // result\n\n        var maxc = 0; // skip zeros since abs(0) == 0\n\n        x.forEach(function (value, index) {\n          var j = index[1];\n          var cj = add(c[j] || 0, abs(value));\n\n          if (larger(cj, maxc)) {\n            maxc = cj;\n          }\n\n          c[j] = cj;\n        }, true);\n        return maxc;\n      }\n\n      if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n        // norm(x) = the largest row sum\n        var r = []; // result\n\n        var maxr = 0; // skip zeros since abs(0) == 0\n\n        x.forEach(function (value, index) {\n          var i = index[0];\n          var ri = add(r[i] || 0, abs(value));\n\n          if (larger(ri, maxr)) {\n            maxr = ri;\n          }\n\n          r[i] = ri;\n        }, true);\n        return maxr;\n      }\n\n      if (p === 'fro') {\n        // norm(x) = sqrt(sum(diag(x'x)))\n        var fro = 0;\n        x.forEach(function (value, index) {\n          fro = add(fro, multiply(value, conj(value)));\n        });\n        return abs(sqrt(fro));\n      }\n\n      if (p === 2) {\n        // not implemented\n        throw new Error('Unsupported parameter value, missing implementation of matrix singular value decomposition');\n      } // invalid parameter value\n\n\n      throw new Error('Unsupported parameter value');\n    }\n  }\n\n  return norm;\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/arithmetic/norm.js"],"names":["factory","name","dependencies","createNorm","_ref","typed","abs","add","pow","conj","sqrt","multiply","equalScalar","larger","smaller","matrix","norm","number","Math","Complex","x","BigNumber","boolean","Array","_norm","Matrix","numberComplexBigNumberBooleanNumberBigNumberString","ArrayNumberBigNumberString","p","MatrixNumberBigNumberString","sizeX","size","length","Number","POSITIVE_INFINITY","pinf","forEach","value","v","NEGATIVE_INFINITY","ninf","isNaN","n","Error","c","maxc","index","j","cj","r","maxr","i","ri","fro"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory';\nvar name = 'norm';\nvar dependencies = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix'];\nexport var createNorm = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      abs = _ref.abs,\n      add = _ref.add,\n      pow = _ref.pow,\n      conj = _ref.conj,\n      sqrt = _ref.sqrt,\n      multiply = _ref.multiply,\n      equalScalar = _ref.equalScalar,\n      larger = _ref.larger,\n      smaller = _ref.smaller,\n      matrix = _ref.matrix;\n\n  /**\n   * Calculate the norm of a number, vector or matrix.\n   *\n   * The second parameter p is optional. If not provided, it defaults to 2.\n   *\n   * Syntax:\n   *\n   *    math.norm(x)\n   *    math.norm(x, p)\n   *\n   * Examples:\n   *\n   *    math.abs(-3.5)                         // returns 3.5\n   *    math.norm(-3.5)                        // returns 3.5\n   *\n   *    math.norm(math.complex(3, -4))         // returns 5\n   *\n   *    math.norm([1, 2, -3], Infinity)        // returns 3\n   *    math.norm([1, 2, -3], -Infinity)       // returns 1\n   *\n   *    math.norm([3, 4], 2)                   // returns 5\n   *\n   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\n   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7\n   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661\n   *\n   * See also:\n   *\n   *    abs, hypot\n   *\n   * @param  {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the norm\n   * @param  {number | BigNumber | string} [p=2]\n   *            Vector space.\n   *            Supported numbers include Infinity and -Infinity.\n   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\n   * @return {number | BigNumber} the p-norm\n   */\n  var norm = typed(name, {\n    number: Math.abs,\n    Complex: function Complex(x) {\n      return x.abs();\n    },\n    BigNumber: function BigNumber(x) {\n      // norm(x) = abs(x)\n      return x.abs();\n    },\n    \"boolean\": function boolean(x) {\n      // norm(x) = abs(x)\n      return Math.abs(x);\n    },\n    Array: function Array(x) {\n      return _norm(matrix(x), 2);\n    },\n    Matrix: function Matrix(x) {\n      return _norm(x, 2);\n    },\n    'number | Complex | BigNumber | boolean, number | BigNumber | string': function numberComplexBigNumberBooleanNumberBigNumberString(x) {\n      // ignore second parameter, TODO: remove the option of second parameter for these types\n      return norm(x);\n    },\n    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {\n      return _norm(matrix(x), p);\n    },\n    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {\n      return _norm(x, p);\n    }\n  });\n  /**\n   * Calculate the norm for an array\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n  function _norm(x, p) {\n    // size\n    var sizeX = x.size(); // check if it is a vector\n\n    if (sizeX.length === 1) {\n      // check p\n      if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n        // norm(x, Infinity) = max(abs(x))\n        var pinf = 0; // skip zeros since abs(0) === 0\n\n        x.forEach(function (value) {\n          var v = abs(value);\n\n          if (larger(v, pinf)) {\n            pinf = v;\n          }\n        }, true);\n        return pinf;\n      }\n\n      if (p === Number.NEGATIVE_INFINITY || p === '-inf') {\n        // norm(x, -Infinity) = min(abs(x))\n        var ninf; // skip zeros since abs(0) === 0\n\n        x.forEach(function (value) {\n          var v = abs(value);\n\n          if (!ninf || smaller(v, ninf)) {\n            ninf = v;\n          }\n        }, true);\n        return ninf || 0;\n      }\n\n      if (p === 'fro') {\n        return _norm(x, 2);\n      }\n\n      if (typeof p === 'number' && !isNaN(p)) {\n        // check p != 0\n        if (!equalScalar(p, 0)) {\n          // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p\n          var n = 0; // skip zeros since abs(0) === 0\n\n          x.forEach(function (value) {\n            n = add(pow(abs(value), p), n);\n          }, true);\n          return pow(n, 1 / p);\n        }\n\n        return Number.POSITIVE_INFINITY;\n      } // invalid parameter value\n\n\n      throw new Error('Unsupported parameter value');\n    } // MxN matrix\n\n\n    if (sizeX.length === 2) {\n      // check p\n      if (p === 1) {\n        // norm(x) = the largest column sum\n        var c = []; // result\n\n        var maxc = 0; // skip zeros since abs(0) == 0\n\n        x.forEach(function (value, index) {\n          var j = index[1];\n          var cj = add(c[j] || 0, abs(value));\n\n          if (larger(cj, maxc)) {\n            maxc = cj;\n          }\n\n          c[j] = cj;\n        }, true);\n        return maxc;\n      }\n\n      if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n        // norm(x) = the largest row sum\n        var r = []; // result\n\n        var maxr = 0; // skip zeros since abs(0) == 0\n\n        x.forEach(function (value, index) {\n          var i = index[0];\n          var ri = add(r[i] || 0, abs(value));\n\n          if (larger(ri, maxr)) {\n            maxr = ri;\n          }\n\n          r[i] = ri;\n        }, true);\n        return maxr;\n      }\n\n      if (p === 'fro') {\n        // norm(x) = sqrt(sum(diag(x'x)))\n        var fro = 0;\n        x.forEach(function (value, index) {\n          fro = add(fro, multiply(value, conj(value)));\n        });\n        return abs(sqrt(fro));\n      }\n\n      if (p === 2) {\n        // not implemented\n        throw new Error('Unsupported parameter value, missing implementation of matrix singular value decomposition');\n      } // invalid parameter value\n\n\n      throw new Error('Unsupported parameter value');\n    }\n  }\n\n  return norm;\n});"]},"metadata":{},"sourceType":"module"}