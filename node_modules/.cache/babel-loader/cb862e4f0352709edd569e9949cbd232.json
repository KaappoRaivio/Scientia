{"ast":null,"code":"import { deepMap } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nvar name = 'evaluate';\nvar dependencies = ['typed', 'parse'];\nexport var createEvaluate = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      parse = _ref.parse;\n  /**\n   * Evaluate an expression.\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.evaluate(expr)\n   *     math.evaluate(expr, scope)\n   *     math.evaluate([expr1, expr2, expr3, ...])\n   *     math.evaluate([expr1, expr2, expr3, ...], scope)\n   *\n   * Example:\n   *\n   *     math.evaluate('(2+3)/4')                // 1.25\n   *     math.evaluate('sqrt(3^2 + 4^2)')        // 5\n   *     math.evaluate('sqrt(-4)')               // 2i\n   *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]\n   *\n   *     let scope = {a:3, b:4}\n   *     math.evaluate('a * b', scope)           // 12\n   *\n   * See also:\n   *\n   *    parse, compile\n   *\n   * @param {string | string[] | Matrix} expr   The expression to be evaluated\n   * @param {Object} [scope]                    Scope to read/write variables\n   * @return {*} The result of the expression\n   * @throws {Error}\n   */\n\n  return typed(name, {\n    string: function string(expr) {\n      var scope = {};\n      return parse(expr).compile().evaluate(scope);\n    },\n    'string, Object': function stringObject(expr, scope) {\n      return parse(expr).compile().evaluate(scope);\n    },\n    'Array | Matrix': function ArrayMatrix(expr) {\n      var scope = {};\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().evaluate(scope);\n      });\n    },\n    'Array | Matrix, Object': function ArrayMatrixObject(expr, scope) {\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().evaluate(scope);\n      });\n    }\n  });\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/expression/function/evaluate.js"],"names":["deepMap","factory","name","dependencies","createEvaluate","_ref","typed","parse","string","expr","scope","compile","evaluate","stringObject","ArrayMatrix","entry","ArrayMatrixObject"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,UAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,OAAV,CAAnB;AACA,OAAO,IAAIC,cAAc,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACrF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,KAAK,GAAGF,IAAI,CAACE,KADjB;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,SAAOD,KAAK,CAACJ,IAAD,EAAO;AACjBM,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,IAAhB,EAAsB;AAC5B,UAAIC,KAAK,GAAG,EAAZ;AACA,aAAOH,KAAK,CAACE,IAAD,CAAL,CAAYE,OAAZ,GAAsBC,QAAtB,CAA+BF,KAA/B,CAAP;AACD,KAJgB;AAKjB,sBAAkB,SAASG,YAAT,CAAsBJ,IAAtB,EAA4BC,KAA5B,EAAmC;AACnD,aAAOH,KAAK,CAACE,IAAD,CAAL,CAAYE,OAAZ,GAAsBC,QAAtB,CAA+BF,KAA/B,CAAP;AACD,KAPgB;AAQjB,sBAAkB,SAASI,WAAT,CAAqBL,IAArB,EAA2B;AAC3C,UAAIC,KAAK,GAAG,EAAZ;AACA,aAAOV,OAAO,CAACS,IAAD,EAAO,UAAUM,KAAV,EAAiB;AACpC,eAAOR,KAAK,CAACQ,KAAD,CAAL,CAAaJ,OAAb,GAAuBC,QAAvB,CAAgCF,KAAhC,CAAP;AACD,OAFa,CAAd;AAGD,KAbgB;AAcjB,8BAA0B,SAASM,iBAAT,CAA2BP,IAA3B,EAAiCC,KAAjC,EAAwC;AAChE,aAAOV,OAAO,CAACS,IAAD,EAAO,UAAUM,KAAV,EAAiB;AACpC,eAAOR,KAAK,CAACQ,KAAD,CAAL,CAAaJ,OAAb,GAAuBC,QAAvB,CAAgCF,KAAhC,CAAP;AACD,OAFa,CAAd;AAGD;AAlBgB,GAAP,CAAZ;AAoBD,CAxDiD,CAA3C","sourcesContent":["import { deepMap } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nvar name = 'evaluate';\nvar dependencies = ['typed', 'parse'];\nexport var createEvaluate = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      parse = _ref.parse;\n\n  /**\n   * Evaluate an expression.\n   *\n   * Note the evaluating arbitrary expressions may involve security risks,\n   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.\n   *\n   * Syntax:\n   *\n   *     math.evaluate(expr)\n   *     math.evaluate(expr, scope)\n   *     math.evaluate([expr1, expr2, expr3, ...])\n   *     math.evaluate([expr1, expr2, expr3, ...], scope)\n   *\n   * Example:\n   *\n   *     math.evaluate('(2+3)/4')                // 1.25\n   *     math.evaluate('sqrt(3^2 + 4^2)')        // 5\n   *     math.evaluate('sqrt(-4)')               // 2i\n   *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]\n   *\n   *     let scope = {a:3, b:4}\n   *     math.evaluate('a * b', scope)           // 12\n   *\n   * See also:\n   *\n   *    parse, compile\n   *\n   * @param {string | string[] | Matrix} expr   The expression to be evaluated\n   * @param {Object} [scope]                    Scope to read/write variables\n   * @return {*} The result of the expression\n   * @throws {Error}\n   */\n  return typed(name, {\n    string: function string(expr) {\n      var scope = {};\n      return parse(expr).compile().evaluate(scope);\n    },\n    'string, Object': function stringObject(expr, scope) {\n      return parse(expr).compile().evaluate(scope);\n    },\n    'Array | Matrix': function ArrayMatrix(expr) {\n      var scope = {};\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().evaluate(scope);\n      });\n    },\n    'Array | Matrix, Object': function ArrayMatrixObject(expr, scope) {\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile().evaluate(scope);\n      });\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}