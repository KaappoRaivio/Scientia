{"ast":null,"code":"/**\n * Bitwise and for Bignumbers\n *\n * Special Cases:\n *   N &  n =  N\n *   n &  0 =  0\n *   n & -1 =  n\n *   n &  n =  n\n *   I &  I =  I\n *  -I & -I = -I\n *   I & -I =  0\n *   I &  n =  n\n *   I & -n =  I\n *  -I &  n =  0\n *  -I & -n = -I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` & `y`, is fully precise\n * @private\n */\nexport function bitAndBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitAnd');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.eq(-1) || x.eq(y)) {\n    return x;\n  }\n\n  if (y.isZero() || x.eq(-1)) {\n    return y;\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      if (x.isNegative() === y.isNegative()) {\n        return x;\n      }\n\n      return new BigNumber(0);\n    }\n\n    if (!x.isFinite()) {\n      if (y.isNegative()) {\n        return x;\n      }\n\n      if (x.isNegative()) {\n        return new BigNumber(0);\n      }\n\n      return y;\n    }\n\n    if (!y.isFinite()) {\n      if (x.isNegative()) {\n        return y;\n      }\n\n      if (y.isNegative()) {\n        return new BigNumber(0);\n      }\n\n      return x;\n    }\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a & b;\n  });\n}\n/**\n * Bitwise not\n * @param {BigNumber} x\n * @return {BigNumber} Result of ~`x`, fully precise\n *\n */\n\nexport function bitNotBigNumber(x) {\n  if (x.isFinite() && !x.isInteger()) {\n    throw new Error('Integer expected in function bitNot');\n  }\n\n  var BigNumber = x.constructor;\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({\n    precision: 1E9\n  });\n  var result = x.plus(new BigNumber(1));\n  result.s = -result.s || null;\n  BigNumber.config({\n    precision: prevPrec\n  });\n  return result;\n}\n/**\n * Bitwise OR for BigNumbers\n *\n * Special Cases:\n *   N |  n =  N\n *   n |  0 =  n\n *   n | -1 = -1\n *   n |  n =  n\n *   I |  I =  I\n *  -I | -I = -I\n *   I | -n = -1\n *   I | -I = -1\n *   I |  n =  I\n *  -I |  n = -I\n *  -I | -n = -n\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` | `y`, fully precise\n */\n\nexport function bitOrBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitOr');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  var negOne = new BigNumber(-1);\n\n  if (x.isZero() || y.eq(negOne) || x.eq(y)) {\n    return y;\n  }\n\n  if (y.isZero() || x.eq(negOne)) {\n    return x;\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {\n      return negOne;\n    }\n\n    if (x.isNegative() && y.isNegative()) {\n      return x.isFinite() ? x : y;\n    }\n\n    return x.isFinite() ? y : x;\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a | b;\n  });\n}\n/**\n * Applies bitwise function to numbers\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @param {function (a, b)} func\n * @return {BigNumber}\n */\n\nexport function bitwise(x, y, func) {\n  var BigNumber = x.constructor;\n  var xBits, yBits;\n  var xSign = +(x.s < 0);\n  var ySign = +(y.s < 0);\n\n  if (xSign) {\n    xBits = decCoefficientToBinaryString(bitNotBigNumber(x));\n\n    for (var i = 0; i < xBits.length; ++i) {\n      xBits[i] ^= 1;\n    }\n  } else {\n    xBits = decCoefficientToBinaryString(x);\n  }\n\n  if (ySign) {\n    yBits = decCoefficientToBinaryString(bitNotBigNumber(y));\n\n    for (var _i = 0; _i < yBits.length; ++_i) {\n      yBits[_i] ^= 1;\n    }\n  } else {\n    yBits = decCoefficientToBinaryString(y);\n  }\n\n  var minBits, maxBits, minSign;\n\n  if (xBits.length <= yBits.length) {\n    minBits = xBits;\n    maxBits = yBits;\n    minSign = xSign;\n  } else {\n    minBits = yBits;\n    maxBits = xBits;\n    minSign = ySign;\n  }\n\n  var shortLen = minBits.length;\n  var longLen = maxBits.length;\n  var expFuncVal = func(xSign, ySign) ^ 1;\n  var outVal = new BigNumber(expFuncVal ^ 1);\n  var twoPower = new BigNumber(1);\n  var two = new BigNumber(2);\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({\n    precision: 1E9\n  });\n\n  while (shortLen > 0) {\n    if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n\n    twoPower = twoPower.times(two);\n  }\n\n  while (longLen > 0) {\n    if (func(minSign, maxBits[--longLen]) === expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n\n    twoPower = twoPower.times(two);\n  }\n\n  BigNumber.config({\n    precision: prevPrec\n  });\n\n  if (expFuncVal === 0) {\n    outVal.s = -outVal.s;\n  }\n\n  return outVal;\n}\n/* Extracted from decimal.js, and edited to specialize. */\n\nfunction decCoefficientToBinaryString(x) {\n  // Convert to string\n  var a = x.d; // array with digits\n\n  var r = a[0] + '';\n\n  for (var i = 1; i < a.length; ++i) {\n    var s = a[i] + '';\n\n    for (var z = 7 - s.length; z--;) {\n      s = '0' + s;\n    }\n\n    r += s;\n  }\n\n  var j = r.length;\n\n  while (r.charAt(j) === '0') {\n    j--;\n  }\n\n  var xe = x.e;\n  var str = r.slice(0, j + 1 || 1);\n  var strL = str.length;\n\n  if (xe > 0) {\n    if (++xe > strL) {\n      // Append zeros.\n      xe -= strL;\n\n      while (xe--) {\n        str += '0';\n      }\n    } else if (xe < strL) {\n      str = str.slice(0, xe) + '.' + str.slice(xe);\n    }\n  } // Convert from base 10 (decimal) to base 2\n\n\n  var arr = [0];\n\n  for (var _i2 = 0; _i2 < str.length;) {\n    var arrL = arr.length;\n\n    while (arrL--) {\n      arr[arrL] *= 10;\n    }\n\n    arr[0] += parseInt(str.charAt(_i2++)); // convert to int\n\n    for (var _j = 0; _j < arr.length; ++_j) {\n      if (arr[_j] > 1) {\n        if (arr[_j + 1] === null || arr[_j + 1] === undefined) {\n          arr[_j + 1] = 0;\n        }\n\n        arr[_j + 1] += arr[_j] >> 1;\n        arr[_j] &= 1;\n      }\n    }\n  }\n\n  return arr.reverse();\n}\n/**\n * Bitwise XOR for BigNumbers\n *\n * Special Cases:\n *   N ^  n =  N\n *   n ^  0 =  n\n *   n ^  n =  0\n *   n ^ -1 = ~n\n *   I ^  n =  I\n *   I ^ -n = -I\n *   I ^ -I = -1\n *  -I ^  n = -I\n *  -I ^ -n =  I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` ^ `y`, fully precise\n *\n */\n\n\nexport function bitXor(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitXor');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero()) {\n    return y;\n  }\n\n  if (y.isZero()) {\n    return x;\n  }\n\n  if (x.eq(y)) {\n    return new BigNumber(0);\n  }\n\n  var negOne = new BigNumber(-1);\n\n  if (x.eq(negOne)) {\n    return bitNotBigNumber(y);\n  }\n\n  if (y.eq(negOne)) {\n    return bitNotBigNumber(x);\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      return negOne;\n    }\n\n    return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a ^ b;\n  });\n}\n/**\n * Bitwise left shift\n *\n * Special Cases:\n *  n << -n = N\n *  n <<  N = N\n *  N <<  n = N\n *  n <<  0 = n\n *  0 <<  n = 0\n *  I <<  I = N\n *  I <<  n = I\n *  n <<  I = I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` << `y`\n *\n */\n\nexport function leftShiftBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function leftShift');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n\n  if (!x.isFinite() && !y.isFinite()) {\n    return new BigNumber(NaN);\n  } // Math.pow(2, y) is fully precise for y < 55, and fast\n\n\n  if (y.lt(55)) {\n    return x.times(Math.pow(2, y.toNumber()) + '');\n  }\n\n  return x.times(new BigNumber(2).pow(y));\n}\n/*\n * Special Cases:\n *   n >> -n =  N\n *   n >>  N =  N\n *   N >>  n =  N\n *   I >>  I =  N\n *   n >>  0 =  n\n *   I >>  n =  I\n *  -I >>  n = -I\n *  -I >>  I = -I\n *   n >>  I =  I\n *  -n >>  I = -1\n *   0 >>  n =  0\n *\n * @param {BigNumber} value\n * @param {BigNumber} value\n * @return {BigNumber} Result of `x` >> `y`\n *\n */\n\nexport function rightArithShiftBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function rightArithShift');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n\n  if (!y.isFinite()) {\n    if (x.isNegative()) {\n      return new BigNumber(-1);\n    }\n\n    if (!x.isFinite()) {\n      return new BigNumber(NaN);\n    }\n\n    return new BigNumber(0);\n  } // Math.pow(2, y) is fully precise for y < 55, and fast\n\n\n  if (y.lt(55)) {\n    return x.div(Math.pow(2, y.toNumber()) + '').floor();\n  }\n\n  return x.div(new BigNumber(2).pow(y)).floor();\n}","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/utils/bignumber/bitwise.js"],"names":["bitAndBigNumber","x","y","isFinite","isInteger","Error","BigNumber","constructor","isNaN","NaN","isZero","eq","isNegative","bitwise","a","b","bitNotBigNumber","prevPrec","precision","config","result","plus","s","bitOrBigNumber","negOne","func","xBits","yBits","xSign","ySign","decCoefficientToBinaryString","i","length","_i","minBits","maxBits","minSign","shortLen","longLen","expFuncVal","outVal","twoPower","two","times","d","r","z","j","charAt","xe","e","str","slice","strL","arr","_i2","arrL","parseInt","_j","undefined","reverse","bitXor","Infinity","leftShiftBigNumber","lt","Math","pow","toNumber","rightArithShiftBigNumber","div","floor"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAqBA,OAAO,SAASA,eAAT,CAAyBC,CAAzB,EAA4BC,CAA5B,EAA+B;AACpC,MAAID,CAAC,CAACE,QAAF,MAAgB,CAACF,CAAC,CAACG,SAAF,EAAjB,IAAkCF,CAAC,CAACC,QAAF,MAAgB,CAACD,CAAC,CAACE,SAAF,EAAvD,EAAsE;AACpE,UAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,MAAIC,SAAS,GAAGL,CAAC,CAACM,WAAlB;;AAEA,MAAIN,CAAC,CAACO,KAAF,MAAaN,CAAC,CAACM,KAAF,EAAjB,EAA4B;AAC1B,WAAO,IAAIF,SAAJ,CAAcG,GAAd,CAAP;AACD;;AAED,MAAIR,CAAC,CAACS,MAAF,MAAcR,CAAC,CAACS,EAAF,CAAK,CAAC,CAAN,CAAd,IAA0BV,CAAC,CAACU,EAAF,CAAKT,CAAL,CAA9B,EAAuC;AACrC,WAAOD,CAAP;AACD;;AAED,MAAIC,CAAC,CAACQ,MAAF,MAAcT,CAAC,CAACU,EAAF,CAAK,CAAC,CAAN,CAAlB,EAA4B;AAC1B,WAAOT,CAAP;AACD;;AAED,MAAI,CAACD,CAAC,CAACE,QAAF,EAAD,IAAiB,CAACD,CAAC,CAACC,QAAF,EAAtB,EAAoC;AAClC,QAAI,CAACF,CAAC,CAACE,QAAF,EAAD,IAAiB,CAACD,CAAC,CAACC,QAAF,EAAtB,EAAoC;AAClC,UAAIF,CAAC,CAACW,UAAF,OAAmBV,CAAC,CAACU,UAAF,EAAvB,EAAuC;AACrC,eAAOX,CAAP;AACD;;AAED,aAAO,IAAIK,SAAJ,CAAc,CAAd,CAAP;AACD;;AAED,QAAI,CAACL,CAAC,CAACE,QAAF,EAAL,EAAmB;AACjB,UAAID,CAAC,CAACU,UAAF,EAAJ,EAAoB;AAClB,eAAOX,CAAP;AACD;;AAED,UAAIA,CAAC,CAACW,UAAF,EAAJ,EAAoB;AAClB,eAAO,IAAIN,SAAJ,CAAc,CAAd,CAAP;AACD;;AAED,aAAOJ,CAAP;AACD;;AAED,QAAI,CAACA,CAAC,CAACC,QAAF,EAAL,EAAmB;AACjB,UAAIF,CAAC,CAACW,UAAF,EAAJ,EAAoB;AAClB,eAAOV,CAAP;AACD;;AAED,UAAIA,CAAC,CAACU,UAAF,EAAJ,EAAoB;AAClB,eAAO,IAAIN,SAAJ,CAAc,CAAd,CAAP;AACD;;AAED,aAAOL,CAAP;AACD;AACF;;AAED,SAAOY,OAAO,CAACZ,CAAD,EAAIC,CAAJ,EAAO,UAAUY,CAAV,EAAaC,CAAb,EAAgB;AACnC,WAAOD,CAAC,GAAGC,CAAX;AACD,GAFa,CAAd;AAGD;AACD;;;;;;;AAOA,OAAO,SAASC,eAAT,CAAyBf,CAAzB,EAA4B;AACjC,MAAIA,CAAC,CAACE,QAAF,MAAgB,CAACF,CAAC,CAACG,SAAF,EAArB,EAAoC;AAClC,UAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,MAAIC,SAAS,GAAGL,CAAC,CAACM,WAAlB;AACA,MAAIU,QAAQ,GAAGX,SAAS,CAACY,SAAzB;AACAZ,EAAAA,SAAS,CAACa,MAAV,CAAiB;AACfD,IAAAA,SAAS,EAAE;AADI,GAAjB;AAGA,MAAIE,MAAM,GAAGnB,CAAC,CAACoB,IAAF,CAAO,IAAIf,SAAJ,CAAc,CAAd,CAAP,CAAb;AACAc,EAAAA,MAAM,CAACE,CAAP,GAAW,CAACF,MAAM,CAACE,CAAR,IAAa,IAAxB;AACAhB,EAAAA,SAAS,CAACa,MAAV,CAAiB;AACfD,IAAAA,SAAS,EAAED;AADI,GAAjB;AAGA,SAAOG,MAAP;AACD;AACD;;;;;;;;;;;;;;;;;;;;;AAqBA,OAAO,SAASG,cAAT,CAAwBtB,CAAxB,EAA2BC,CAA3B,EAA8B;AACnC,MAAID,CAAC,CAACE,QAAF,MAAgB,CAACF,CAAC,CAACG,SAAF,EAAjB,IAAkCF,CAAC,CAACC,QAAF,MAAgB,CAACD,CAAC,CAACE,SAAF,EAAvD,EAAsE;AACpE,UAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,MAAIC,SAAS,GAAGL,CAAC,CAACM,WAAlB;;AAEA,MAAIN,CAAC,CAACO,KAAF,MAAaN,CAAC,CAACM,KAAF,EAAjB,EAA4B;AAC1B,WAAO,IAAIF,SAAJ,CAAcG,GAAd,CAAP;AACD;;AAED,MAAIe,MAAM,GAAG,IAAIlB,SAAJ,CAAc,CAAC,CAAf,CAAb;;AAEA,MAAIL,CAAC,CAACS,MAAF,MAAcR,CAAC,CAACS,EAAF,CAAKa,MAAL,CAAd,IAA8BvB,CAAC,CAACU,EAAF,CAAKT,CAAL,CAAlC,EAA2C;AACzC,WAAOA,CAAP;AACD;;AAED,MAAIA,CAAC,CAACQ,MAAF,MAAcT,CAAC,CAACU,EAAF,CAAKa,MAAL,CAAlB,EAAgC;AAC9B,WAAOvB,CAAP;AACD;;AAED,MAAI,CAACA,CAAC,CAACE,QAAF,EAAD,IAAiB,CAACD,CAAC,CAACC,QAAF,EAAtB,EAAoC;AAClC,QAAI,CAACF,CAAC,CAACE,QAAF,EAAD,IAAiB,CAACF,CAAC,CAACW,UAAF,EAAlB,IAAoCV,CAAC,CAACU,UAAF,EAApC,IAAsDX,CAAC,CAACW,UAAF,MAAkB,CAACV,CAAC,CAACU,UAAF,EAAnB,IAAqC,CAACV,CAAC,CAACC,QAAF,EAAhG,EAA8G;AAC5G,aAAOqB,MAAP;AACD;;AAED,QAAIvB,CAAC,CAACW,UAAF,MAAkBV,CAAC,CAACU,UAAF,EAAtB,EAAsC;AACpC,aAAOX,CAAC,CAACE,QAAF,KAAeF,CAAf,GAAmBC,CAA1B;AACD;;AAED,WAAOD,CAAC,CAACE,QAAF,KAAeD,CAAf,GAAmBD,CAA1B;AACD;;AAED,SAAOY,OAAO,CAACZ,CAAD,EAAIC,CAAJ,EAAO,UAAUY,CAAV,EAAaC,CAAb,EAAgB;AACnC,WAAOD,CAAC,GAAGC,CAAX;AACD,GAFa,CAAd;AAGD;AACD;;;;;;;;AAQA,OAAO,SAASF,OAAT,CAAiBZ,CAAjB,EAAoBC,CAApB,EAAuBuB,IAAvB,EAA6B;AAClC,MAAInB,SAAS,GAAGL,CAAC,CAACM,WAAlB;AACA,MAAImB,KAAJ,EAAWC,KAAX;AACA,MAAIC,KAAK,GAAG,EAAE3B,CAAC,CAACqB,CAAF,GAAM,CAAR,CAAZ;AACA,MAAIO,KAAK,GAAG,EAAE3B,CAAC,CAACoB,CAAF,GAAM,CAAR,CAAZ;;AAEA,MAAIM,KAAJ,EAAW;AACTF,IAAAA,KAAK,GAAGI,4BAA4B,CAACd,eAAe,CAACf,CAAD,CAAhB,CAApC;;AAEA,SAAK,IAAI8B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,EAAkC,EAAED,CAApC,EAAuC;AACrCL,MAAAA,KAAK,CAACK,CAAD,CAAL,IAAY,CAAZ;AACD;AACF,GAND,MAMO;AACLL,IAAAA,KAAK,GAAGI,4BAA4B,CAAC7B,CAAD,CAApC;AACD;;AAED,MAAI4B,KAAJ,EAAW;AACTF,IAAAA,KAAK,GAAGG,4BAA4B,CAACd,eAAe,CAACd,CAAD,CAAhB,CAApC;;AAEA,SAAK,IAAI+B,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGN,KAAK,CAACK,MAA5B,EAAoC,EAAEC,EAAtC,EAA0C;AACxCN,MAAAA,KAAK,CAACM,EAAD,CAAL,IAAa,CAAb;AACD;AACF,GAND,MAMO;AACLN,IAAAA,KAAK,GAAGG,4BAA4B,CAAC5B,CAAD,CAApC;AACD;;AAED,MAAIgC,OAAJ,EAAaC,OAAb,EAAsBC,OAAtB;;AAEA,MAAIV,KAAK,CAACM,MAAN,IAAgBL,KAAK,CAACK,MAA1B,EAAkC;AAChCE,IAAAA,OAAO,GAAGR,KAAV;AACAS,IAAAA,OAAO,GAAGR,KAAV;AACAS,IAAAA,OAAO,GAAGR,KAAV;AACD,GAJD,MAIO;AACLM,IAAAA,OAAO,GAAGP,KAAV;AACAQ,IAAAA,OAAO,GAAGT,KAAV;AACAU,IAAAA,OAAO,GAAGP,KAAV;AACD;;AAED,MAAIQ,QAAQ,GAAGH,OAAO,CAACF,MAAvB;AACA,MAAIM,OAAO,GAAGH,OAAO,CAACH,MAAtB;AACA,MAAIO,UAAU,GAAGd,IAAI,CAACG,KAAD,EAAQC,KAAR,CAAJ,GAAqB,CAAtC;AACA,MAAIW,MAAM,GAAG,IAAIlC,SAAJ,CAAciC,UAAU,GAAG,CAA3B,CAAb;AACA,MAAIE,QAAQ,GAAG,IAAInC,SAAJ,CAAc,CAAd,CAAf;AACA,MAAIoC,GAAG,GAAG,IAAIpC,SAAJ,CAAc,CAAd,CAAV;AACA,MAAIW,QAAQ,GAAGX,SAAS,CAACY,SAAzB;AACAZ,EAAAA,SAAS,CAACa,MAAV,CAAiB;AACfD,IAAAA,SAAS,EAAE;AADI,GAAjB;;AAIA,SAAOmB,QAAQ,GAAG,CAAlB,EAAqB;AACnB,QAAIZ,IAAI,CAACS,OAAO,CAAC,EAAEG,QAAH,CAAR,EAAsBF,OAAO,CAAC,EAAEG,OAAH,CAA7B,CAAJ,KAAkDC,UAAtD,EAAkE;AAChEC,MAAAA,MAAM,GAAGA,MAAM,CAACnB,IAAP,CAAYoB,QAAZ,CAAT;AACD;;AAEDA,IAAAA,QAAQ,GAAGA,QAAQ,CAACE,KAAT,CAAeD,GAAf,CAAX;AACD;;AAED,SAAOJ,OAAO,GAAG,CAAjB,EAAoB;AAClB,QAAIb,IAAI,CAACW,OAAD,EAAUD,OAAO,CAAC,EAAEG,OAAH,CAAjB,CAAJ,KAAsCC,UAA1C,EAAsD;AACpDC,MAAAA,MAAM,GAAGA,MAAM,CAACnB,IAAP,CAAYoB,QAAZ,CAAT;AACD;;AAEDA,IAAAA,QAAQ,GAAGA,QAAQ,CAACE,KAAT,CAAeD,GAAf,CAAX;AACD;;AAEDpC,EAAAA,SAAS,CAACa,MAAV,CAAiB;AACfD,IAAAA,SAAS,EAAED;AADI,GAAjB;;AAIA,MAAIsB,UAAU,KAAK,CAAnB,EAAsB;AACpBC,IAAAA,MAAM,CAAClB,CAAP,GAAW,CAACkB,MAAM,CAAClB,CAAnB;AACD;;AAED,SAAOkB,MAAP;AACD;AACD;;AAEA,SAASV,4BAAT,CAAsC7B,CAAtC,EAAyC;AACvC;AACA,MAAIa,CAAC,GAAGb,CAAC,CAAC2C,CAAV,CAFuC,CAE1B;;AAEb,MAAIC,CAAC,GAAG/B,CAAC,CAAC,CAAD,CAAD,GAAO,EAAf;;AAEA,OAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,CAAC,CAACkB,MAAtB,EAA8B,EAAED,CAAhC,EAAmC;AACjC,QAAIT,CAAC,GAAGR,CAAC,CAACiB,CAAD,CAAD,GAAO,EAAf;;AAEA,SAAK,IAAIe,CAAC,GAAG,IAAIxB,CAAC,CAACU,MAAnB,EAA2Bc,CAAC,EAA5B,GAAiC;AAC/BxB,MAAAA,CAAC,GAAG,MAAMA,CAAV;AACD;;AAEDuB,IAAAA,CAAC,IAAIvB,CAAL;AACD;;AAED,MAAIyB,CAAC,GAAGF,CAAC,CAACb,MAAV;;AAEA,SAAOa,CAAC,CAACG,MAAF,CAASD,CAAT,MAAgB,GAAvB,EAA4B;AAC1BA,IAAAA,CAAC;AACF;;AAED,MAAIE,EAAE,GAAGhD,CAAC,CAACiD,CAAX;AACA,MAAIC,GAAG,GAAGN,CAAC,CAACO,KAAF,CAAQ,CAAR,EAAWL,CAAC,GAAG,CAAJ,IAAS,CAApB,CAAV;AACA,MAAIM,IAAI,GAAGF,GAAG,CAACnB,MAAf;;AAEA,MAAIiB,EAAE,GAAG,CAAT,EAAY;AACV,QAAI,EAAEA,EAAF,GAAOI,IAAX,EAAiB;AACf;AACAJ,MAAAA,EAAE,IAAII,IAAN;;AAEA,aAAOJ,EAAE,EAAT,EAAa;AACXE,QAAAA,GAAG,IAAI,GAAP;AACD;AACF,KAPD,MAOO,IAAIF,EAAE,GAAGI,IAAT,EAAe;AACpBF,MAAAA,GAAG,GAAGA,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAaH,EAAb,IAAmB,GAAnB,GAAyBE,GAAG,CAACC,KAAJ,CAAUH,EAAV,CAA/B;AACD;AACF,GArCsC,CAqCrC;;;AAGF,MAAIK,GAAG,GAAG,CAAC,CAAD,CAAV;;AAEA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGJ,GAAG,CAACnB,MAA5B,GAAqC;AACnC,QAAIwB,IAAI,GAAGF,GAAG,CAACtB,MAAf;;AAEA,WAAOwB,IAAI,EAAX,EAAe;AACbF,MAAAA,GAAG,CAACE,IAAD,CAAH,IAAa,EAAb;AACD;;AAEDF,IAAAA,GAAG,CAAC,CAAD,CAAH,IAAUG,QAAQ,CAACN,GAAG,CAACH,MAAJ,CAAWO,GAAG,EAAd,CAAD,CAAlB,CAPmC,CAOI;;AAEvC,SAAK,IAAIG,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGJ,GAAG,CAACtB,MAA1B,EAAkC,EAAE0B,EAApC,EAAwC;AACtC,UAAIJ,GAAG,CAACI,EAAD,CAAH,GAAU,CAAd,EAAiB;AACf,YAAIJ,GAAG,CAACI,EAAE,GAAG,CAAN,CAAH,KAAgB,IAAhB,IAAwBJ,GAAG,CAACI,EAAE,GAAG,CAAN,CAAH,KAAgBC,SAA5C,EAAuD;AACrDL,UAAAA,GAAG,CAACI,EAAE,GAAG,CAAN,CAAH,GAAc,CAAd;AACD;;AAEDJ,QAAAA,GAAG,CAACI,EAAE,GAAG,CAAN,CAAH,IAAeJ,GAAG,CAACI,EAAD,CAAH,IAAW,CAA1B;AACAJ,QAAAA,GAAG,CAACI,EAAD,CAAH,IAAW,CAAX;AACD;AACF;AACF;;AAED,SAAOJ,GAAG,CAACM,OAAJ,EAAP;AACD;AACD;;;;;;;;;;;;;;;;;;;;;AAqBA,OAAO,SAASC,MAAT,CAAgB5D,CAAhB,EAAmBC,CAAnB,EAAsB;AAC3B,MAAID,CAAC,CAACE,QAAF,MAAgB,CAACF,CAAC,CAACG,SAAF,EAAjB,IAAkCF,CAAC,CAACC,QAAF,MAAgB,CAACD,CAAC,CAACE,SAAF,EAAvD,EAAsE;AACpE,UAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,MAAIC,SAAS,GAAGL,CAAC,CAACM,WAAlB;;AAEA,MAAIN,CAAC,CAACO,KAAF,MAAaN,CAAC,CAACM,KAAF,EAAjB,EAA4B;AAC1B,WAAO,IAAIF,SAAJ,CAAcG,GAAd,CAAP;AACD;;AAED,MAAIR,CAAC,CAACS,MAAF,EAAJ,EAAgB;AACd,WAAOR,CAAP;AACD;;AAED,MAAIA,CAAC,CAACQ,MAAF,EAAJ,EAAgB;AACd,WAAOT,CAAP;AACD;;AAED,MAAIA,CAAC,CAACU,EAAF,CAAKT,CAAL,CAAJ,EAAa;AACX,WAAO,IAAII,SAAJ,CAAc,CAAd,CAAP;AACD;;AAED,MAAIkB,MAAM,GAAG,IAAIlB,SAAJ,CAAc,CAAC,CAAf,CAAb;;AAEA,MAAIL,CAAC,CAACU,EAAF,CAAKa,MAAL,CAAJ,EAAkB;AAChB,WAAOR,eAAe,CAACd,CAAD,CAAtB;AACD;;AAED,MAAIA,CAAC,CAACS,EAAF,CAAKa,MAAL,CAAJ,EAAkB;AAChB,WAAOR,eAAe,CAACf,CAAD,CAAtB;AACD;;AAED,MAAI,CAACA,CAAC,CAACE,QAAF,EAAD,IAAiB,CAACD,CAAC,CAACC,QAAF,EAAtB,EAAoC;AAClC,QAAI,CAACF,CAAC,CAACE,QAAF,EAAD,IAAiB,CAACD,CAAC,CAACC,QAAF,EAAtB,EAAoC;AAClC,aAAOqB,MAAP;AACD;;AAED,WAAO,IAAIlB,SAAJ,CAAcL,CAAC,CAACW,UAAF,OAAmBV,CAAC,CAACU,UAAF,EAAnB,GAAoCkD,QAApC,GAA+C,CAACA,QAA9D,CAAP;AACD;;AAED,SAAOjD,OAAO,CAACZ,CAAD,EAAIC,CAAJ,EAAO,UAAUY,CAAV,EAAaC,CAAb,EAAgB;AACnC,WAAOD,CAAC,GAAGC,CAAX;AACD,GAFa,CAAd;AAGD;AACD;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,SAASgD,kBAAT,CAA4B9D,CAA5B,EAA+BC,CAA/B,EAAkC;AACvC,MAAID,CAAC,CAACE,QAAF,MAAgB,CAACF,CAAC,CAACG,SAAF,EAAjB,IAAkCF,CAAC,CAACC,QAAF,MAAgB,CAACD,CAAC,CAACE,SAAF,EAAvD,EAAsE;AACpE,UAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,MAAIC,SAAS,GAAGL,CAAC,CAACM,WAAlB;;AAEA,MAAIN,CAAC,CAACO,KAAF,MAAaN,CAAC,CAACM,KAAF,EAAb,IAA0BN,CAAC,CAACU,UAAF,MAAkB,CAACV,CAAC,CAACQ,MAAF,EAAjD,EAA6D;AAC3D,WAAO,IAAIJ,SAAJ,CAAcG,GAAd,CAAP;AACD;;AAED,MAAIR,CAAC,CAACS,MAAF,MAAcR,CAAC,CAACQ,MAAF,EAAlB,EAA8B;AAC5B,WAAOT,CAAP;AACD;;AAED,MAAI,CAACA,CAAC,CAACE,QAAF,EAAD,IAAiB,CAACD,CAAC,CAACC,QAAF,EAAtB,EAAoC;AAClC,WAAO,IAAIG,SAAJ,CAAcG,GAAd,CAAP;AACD,GAjBsC,CAiBrC;;;AAGF,MAAIP,CAAC,CAAC8D,EAAF,CAAK,EAAL,CAAJ,EAAc;AACZ,WAAO/D,CAAC,CAAC0C,KAAF,CAAQsB,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYhE,CAAC,CAACiE,QAAF,EAAZ,IAA4B,EAApC,CAAP;AACD;;AAED,SAAOlE,CAAC,CAAC0C,KAAF,CAAQ,IAAIrC,SAAJ,CAAc,CAAd,EAAiB4D,GAAjB,CAAqBhE,CAArB,CAAR,CAAP;AACD;AACD;;;;;;;;;;;;;;;;;;;;AAoBA,OAAO,SAASkE,wBAAT,CAAkCnE,CAAlC,EAAqCC,CAArC,EAAwC;AAC7C,MAAID,CAAC,CAACE,QAAF,MAAgB,CAACF,CAAC,CAACG,SAAF,EAAjB,IAAkCF,CAAC,CAACC,QAAF,MAAgB,CAACD,CAAC,CAACE,SAAF,EAAvD,EAAsE;AACpE,UAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACD;;AAED,MAAIC,SAAS,GAAGL,CAAC,CAACM,WAAlB;;AAEA,MAAIN,CAAC,CAACO,KAAF,MAAaN,CAAC,CAACM,KAAF,EAAb,IAA0BN,CAAC,CAACU,UAAF,MAAkB,CAACV,CAAC,CAACQ,MAAF,EAAjD,EAA6D;AAC3D,WAAO,IAAIJ,SAAJ,CAAcG,GAAd,CAAP;AACD;;AAED,MAAIR,CAAC,CAACS,MAAF,MAAcR,CAAC,CAACQ,MAAF,EAAlB,EAA8B;AAC5B,WAAOT,CAAP;AACD;;AAED,MAAI,CAACC,CAAC,CAACC,QAAF,EAAL,EAAmB;AACjB,QAAIF,CAAC,CAACW,UAAF,EAAJ,EAAoB;AAClB,aAAO,IAAIN,SAAJ,CAAc,CAAC,CAAf,CAAP;AACD;;AAED,QAAI,CAACL,CAAC,CAACE,QAAF,EAAL,EAAmB;AACjB,aAAO,IAAIG,SAAJ,CAAcG,GAAd,CAAP;AACD;;AAED,WAAO,IAAIH,SAAJ,CAAc,CAAd,CAAP;AACD,GAzB4C,CAyB3C;;;AAGF,MAAIJ,CAAC,CAAC8D,EAAF,CAAK,EAAL,CAAJ,EAAc;AACZ,WAAO/D,CAAC,CAACoE,GAAF,CAAMJ,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYhE,CAAC,CAACiE,QAAF,EAAZ,IAA4B,EAAlC,EAAsCG,KAAtC,EAAP;AACD;;AAED,SAAOrE,CAAC,CAACoE,GAAF,CAAM,IAAI/D,SAAJ,CAAc,CAAd,EAAiB4D,GAAjB,CAAqBhE,CAArB,CAAN,EAA+BoE,KAA/B,EAAP;AACD","sourcesContent":["/**\n * Bitwise and for Bignumbers\n *\n * Special Cases:\n *   N &  n =  N\n *   n &  0 =  0\n *   n & -1 =  n\n *   n &  n =  n\n *   I &  I =  I\n *  -I & -I = -I\n *   I & -I =  0\n *   I &  n =  n\n *   I & -n =  I\n *  -I &  n =  0\n *  -I & -n = -I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` & `y`, is fully precise\n * @private\n */\nexport function bitAndBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitAnd');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.eq(-1) || x.eq(y)) {\n    return x;\n  }\n\n  if (y.isZero() || x.eq(-1)) {\n    return y;\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      if (x.isNegative() === y.isNegative()) {\n        return x;\n      }\n\n      return new BigNumber(0);\n    }\n\n    if (!x.isFinite()) {\n      if (y.isNegative()) {\n        return x;\n      }\n\n      if (x.isNegative()) {\n        return new BigNumber(0);\n      }\n\n      return y;\n    }\n\n    if (!y.isFinite()) {\n      if (x.isNegative()) {\n        return y;\n      }\n\n      if (y.isNegative()) {\n        return new BigNumber(0);\n      }\n\n      return x;\n    }\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a & b;\n  });\n}\n/**\n * Bitwise not\n * @param {BigNumber} x\n * @return {BigNumber} Result of ~`x`, fully precise\n *\n */\n\nexport function bitNotBigNumber(x) {\n  if (x.isFinite() && !x.isInteger()) {\n    throw new Error('Integer expected in function bitNot');\n  }\n\n  var BigNumber = x.constructor;\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({\n    precision: 1E9\n  });\n  var result = x.plus(new BigNumber(1));\n  result.s = -result.s || null;\n  BigNumber.config({\n    precision: prevPrec\n  });\n  return result;\n}\n/**\n * Bitwise OR for BigNumbers\n *\n * Special Cases:\n *   N |  n =  N\n *   n |  0 =  n\n *   n | -1 = -1\n *   n |  n =  n\n *   I |  I =  I\n *  -I | -I = -I\n *   I | -n = -1\n *   I | -I = -1\n *   I |  n =  I\n *  -I |  n = -I\n *  -I | -n = -n\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` | `y`, fully precise\n */\n\nexport function bitOrBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitOr');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  var negOne = new BigNumber(-1);\n\n  if (x.isZero() || y.eq(negOne) || x.eq(y)) {\n    return y;\n  }\n\n  if (y.isZero() || x.eq(negOne)) {\n    return x;\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {\n      return negOne;\n    }\n\n    if (x.isNegative() && y.isNegative()) {\n      return x.isFinite() ? x : y;\n    }\n\n    return x.isFinite() ? y : x;\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a | b;\n  });\n}\n/**\n * Applies bitwise function to numbers\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @param {function (a, b)} func\n * @return {BigNumber}\n */\n\nexport function bitwise(x, y, func) {\n  var BigNumber = x.constructor;\n  var xBits, yBits;\n  var xSign = +(x.s < 0);\n  var ySign = +(y.s < 0);\n\n  if (xSign) {\n    xBits = decCoefficientToBinaryString(bitNotBigNumber(x));\n\n    for (var i = 0; i < xBits.length; ++i) {\n      xBits[i] ^= 1;\n    }\n  } else {\n    xBits = decCoefficientToBinaryString(x);\n  }\n\n  if (ySign) {\n    yBits = decCoefficientToBinaryString(bitNotBigNumber(y));\n\n    for (var _i = 0; _i < yBits.length; ++_i) {\n      yBits[_i] ^= 1;\n    }\n  } else {\n    yBits = decCoefficientToBinaryString(y);\n  }\n\n  var minBits, maxBits, minSign;\n\n  if (xBits.length <= yBits.length) {\n    minBits = xBits;\n    maxBits = yBits;\n    minSign = xSign;\n  } else {\n    minBits = yBits;\n    maxBits = xBits;\n    minSign = ySign;\n  }\n\n  var shortLen = minBits.length;\n  var longLen = maxBits.length;\n  var expFuncVal = func(xSign, ySign) ^ 1;\n  var outVal = new BigNumber(expFuncVal ^ 1);\n  var twoPower = new BigNumber(1);\n  var two = new BigNumber(2);\n  var prevPrec = BigNumber.precision;\n  BigNumber.config({\n    precision: 1E9\n  });\n\n  while (shortLen > 0) {\n    if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n\n    twoPower = twoPower.times(two);\n  }\n\n  while (longLen > 0) {\n    if (func(minSign, maxBits[--longLen]) === expFuncVal) {\n      outVal = outVal.plus(twoPower);\n    }\n\n    twoPower = twoPower.times(two);\n  }\n\n  BigNumber.config({\n    precision: prevPrec\n  });\n\n  if (expFuncVal === 0) {\n    outVal.s = -outVal.s;\n  }\n\n  return outVal;\n}\n/* Extracted from decimal.js, and edited to specialize. */\n\nfunction decCoefficientToBinaryString(x) {\n  // Convert to string\n  var a = x.d; // array with digits\n\n  var r = a[0] + '';\n\n  for (var i = 1; i < a.length; ++i) {\n    var s = a[i] + '';\n\n    for (var z = 7 - s.length; z--;) {\n      s = '0' + s;\n    }\n\n    r += s;\n  }\n\n  var j = r.length;\n\n  while (r.charAt(j) === '0') {\n    j--;\n  }\n\n  var xe = x.e;\n  var str = r.slice(0, j + 1 || 1);\n  var strL = str.length;\n\n  if (xe > 0) {\n    if (++xe > strL) {\n      // Append zeros.\n      xe -= strL;\n\n      while (xe--) {\n        str += '0';\n      }\n    } else if (xe < strL) {\n      str = str.slice(0, xe) + '.' + str.slice(xe);\n    }\n  } // Convert from base 10 (decimal) to base 2\n\n\n  var arr = [0];\n\n  for (var _i2 = 0; _i2 < str.length;) {\n    var arrL = arr.length;\n\n    while (arrL--) {\n      arr[arrL] *= 10;\n    }\n\n    arr[0] += parseInt(str.charAt(_i2++)); // convert to int\n\n    for (var _j = 0; _j < arr.length; ++_j) {\n      if (arr[_j] > 1) {\n        if (arr[_j + 1] === null || arr[_j + 1] === undefined) {\n          arr[_j + 1] = 0;\n        }\n\n        arr[_j + 1] += arr[_j] >> 1;\n        arr[_j] &= 1;\n      }\n    }\n  }\n\n  return arr.reverse();\n}\n/**\n * Bitwise XOR for BigNumbers\n *\n * Special Cases:\n *   N ^  n =  N\n *   n ^  0 =  n\n *   n ^  n =  0\n *   n ^ -1 = ~n\n *   I ^  n =  I\n *   I ^ -n = -I\n *   I ^ -I = -1\n *  -I ^  n = -I\n *  -I ^ -n =  I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` ^ `y`, fully precise\n *\n */\n\n\nexport function bitXor(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function bitXor');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero()) {\n    return y;\n  }\n\n  if (y.isZero()) {\n    return x;\n  }\n\n  if (x.eq(y)) {\n    return new BigNumber(0);\n  }\n\n  var negOne = new BigNumber(-1);\n\n  if (x.eq(negOne)) {\n    return bitNotBigNumber(y);\n  }\n\n  if (y.eq(negOne)) {\n    return bitNotBigNumber(x);\n  }\n\n  if (!x.isFinite() || !y.isFinite()) {\n    if (!x.isFinite() && !y.isFinite()) {\n      return negOne;\n    }\n\n    return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);\n  }\n\n  return bitwise(x, y, function (a, b) {\n    return a ^ b;\n  });\n}\n/**\n * Bitwise left shift\n *\n * Special Cases:\n *  n << -n = N\n *  n <<  N = N\n *  N <<  n = N\n *  n <<  0 = n\n *  0 <<  n = 0\n *  I <<  I = N\n *  I <<  n = I\n *  n <<  I = I\n *\n * @param {BigNumber} x\n * @param {BigNumber} y\n * @return {BigNumber} Result of `x` << `y`\n *\n */\n\nexport function leftShiftBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function leftShift');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n\n  if (!x.isFinite() && !y.isFinite()) {\n    return new BigNumber(NaN);\n  } // Math.pow(2, y) is fully precise for y < 55, and fast\n\n\n  if (y.lt(55)) {\n    return x.times(Math.pow(2, y.toNumber()) + '');\n  }\n\n  return x.times(new BigNumber(2).pow(y));\n}\n/*\n * Special Cases:\n *   n >> -n =  N\n *   n >>  N =  N\n *   N >>  n =  N\n *   I >>  I =  N\n *   n >>  0 =  n\n *   I >>  n =  I\n *  -I >>  n = -I\n *  -I >>  I = -I\n *   n >>  I =  I\n *  -n >>  I = -1\n *   0 >>  n =  0\n *\n * @param {BigNumber} value\n * @param {BigNumber} value\n * @return {BigNumber} Result of `x` >> `y`\n *\n */\n\nexport function rightArithShiftBigNumber(x, y) {\n  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {\n    throw new Error('Integers expected in function rightArithShift');\n  }\n\n  var BigNumber = x.constructor;\n\n  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {\n    return new BigNumber(NaN);\n  }\n\n  if (x.isZero() || y.isZero()) {\n    return x;\n  }\n\n  if (!y.isFinite()) {\n    if (x.isNegative()) {\n      return new BigNumber(-1);\n    }\n\n    if (!x.isFinite()) {\n      return new BigNumber(NaN);\n    }\n\n    return new BigNumber(0);\n  } // Math.pow(2, y) is fully precise for y < 55, and fast\n\n\n  if (y.lt(55)) {\n    return x.div(Math.pow(2, y.toNumber()) + '').floor();\n  }\n\n  return x.div(new BigNumber(2).pow(y)).floor();\n}"]},"metadata":{},"sourceType":"module"}