{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm06 } from '../../type/matrix/utils/algorithm06';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { lcmNumber } from '../../plain/number';\nvar name = 'lcm';\nvar dependencies = ['typed', 'matrix', 'equalScalar'];\nexport var createLcm = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar;\n  var algorithm02 = createAlgorithm02({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm06 = createAlgorithm06({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Calculate the least common multiple for two or more values or arrays.\n   *\n   * lcm is defined as:\n   *\n   *     lcm(a, b) = abs(a * b) / gcd(a, b)\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.lcm(a, b)\n   *    math.lcm(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.lcm(4, 6)               // returns 12\n   *    math.lcm(6, 21)              // returns 42\n   *    math.lcm(6, 21, 5)           // returns 210\n   *\n   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Array | Matrix}                           The least common multiple\n   */\n\n  var lcm = typed(name, {\n    'number, number': lcmNumber,\n    'BigNumber, BigNumber': _lcmBigNumber,\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.lcm(y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm06(x, y, lcm);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, lcm, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm02(x, y, lcm, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, lcm);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return lcm(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return lcm(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return lcm(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, lcm, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, lcm, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      return algorithm11(y, x, lcm, true);\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      return algorithm14(y, x, lcm, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, lcm, false).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, lcm, true).valueOf();\n    },\n    // TODO: need a smarter notation here\n    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {\n      var res = lcm(a, b);\n\n      for (var i = 0; i < args.length; i++) {\n        res = lcm(res, args[i]);\n      }\n\n      return res;\n    }\n  });\n  return lcm;\n  /**\n   * Calculate lcm for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns the least common multiple of a and b\n   * @private\n   */\n\n  function _lcmBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function lcm must be integer numbers');\n    }\n\n    if (a.isZero()) {\n      return a;\n    }\n\n    if (b.isZero()) {\n      return b;\n    } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    // evaluate lcm here inline to reduce overhead\n\n\n    var prod = a.times(b);\n\n    while (!b.isZero()) {\n      var t = b;\n      b = a.mod(t);\n      a = t;\n    }\n\n    return prod.div(a).abs();\n  }\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/arithmetic/lcm.js"],"names":["factory","createAlgorithm02","createAlgorithm06","createAlgorithm11","createAlgorithm13","createAlgorithm14","lcmNumber","name","dependencies","createLcm","_ref","typed","matrix","equalScalar","algorithm02","algorithm06","algorithm11","algorithm13","algorithm14","lcm","_lcmBigNumber","FractionFraction","x","y","SparseMatrixSparseMatrix","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixNumberBigNumber","DenseMatrixNumberBigNumber","numberBigNumberSparseMatrix","numberBigNumberDenseMatrix","ArrayNumberBigNumber","numberBigNumberArray","ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber","a","b","args","res","i","length","isInt","Error","isZero","prod","times","t","mod","div","abs"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm06 } from '../../type/matrix/utils/algorithm06';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { lcmNumber } from '../../plain/number';\nvar name = 'lcm';\nvar dependencies = ['typed', 'matrix', 'equalScalar'];\nexport var createLcm = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar;\n  var algorithm02 = createAlgorithm02({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm06 = createAlgorithm06({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Calculate the least common multiple for two or more values or arrays.\n   *\n   * lcm is defined as:\n   *\n   *     lcm(a, b) = abs(a * b) / gcd(a, b)\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.lcm(a, b)\n   *    math.lcm(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.lcm(4, 6)               // returns 12\n   *    math.lcm(6, 21)              // returns 42\n   *    math.lcm(6, 21, 5)           // returns 210\n   *\n   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Array | Matrix}                           The least common multiple\n   */\n\n  var lcm = typed(name, {\n    'number, number': lcmNumber,\n    'BigNumber, BigNumber': _lcmBigNumber,\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.lcm(y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm06(x, y, lcm);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, lcm, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm02(x, y, lcm, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, lcm);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return lcm(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return lcm(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return lcm(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, lcm, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, lcm, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      return algorithm11(y, x, lcm, true);\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      return algorithm14(y, x, lcm, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, lcm, false).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, lcm, true).valueOf();\n    },\n    // TODO: need a smarter notation here\n    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {\n      var res = lcm(a, b);\n\n      for (var i = 0; i < args.length; i++) {\n        res = lcm(res, args[i]);\n      }\n\n      return res;\n    }\n  });\n  return lcm;\n  /**\n   * Calculate lcm for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns the least common multiple of a and b\n   * @private\n   */\n\n  function _lcmBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function lcm must be integer numbers');\n    }\n\n    if (a.isZero()) {\n      return a;\n    }\n\n    if (b.isZero()) {\n      return b;\n    } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    // evaluate lcm here inline to reduce overhead\n\n\n    var prod = a.times(b);\n\n    while (!b.isZero()) {\n      var t = b;\n      b = a.mod(t);\n      a = t;\n    }\n\n    return prod.div(a).abs();\n  }\n});"]},"metadata":{},"sourceType":"module"}