{"ast":null,"code":"import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual';\nimport { nearlyEqual } from '../../utils/number';\nimport { factory } from '../../utils/factory';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm05 } from '../../type/matrix/utils/algorithm05';\nvar name = 'compare';\nvar dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix'];\nexport var createCompare = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      equalScalar = _ref.equalScalar,\n      matrix = _ref.matrix,\n      BigNumber = _ref.BigNumber,\n      Fraction = _ref.Fraction,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm03 = createAlgorithm03({\n    typed: typed\n  });\n  var algorithm05 = createAlgorithm05({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm12 = createAlgorithm12({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * x and y are considered equal when the relative difference between x and y\n   * is smaller than the configured epsilon. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.compare(x, y)\n   *\n   * Examples:\n   *\n   *    math.compare(6, 1)           // returns 1\n   *    math.compare(2, 3)           // returns -1\n   *    math.compare(7, 7)           // returns 0\n   *    math.compare('10', '2')      // returns 1\n   *    math.compare('1000', '1e3')  // returns 0\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('40 mm')\n   *    math.compare(a, b)           // returns 1\n   *\n   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText\n   *\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:\n   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n\n  var compare = typed(name, {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y ? 0 : x > y ? 1 : -1;\n    },\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return bigNearlyEqual(x, y, config.epsilon) ? new BigNumber(0) : new BigNumber(x.cmp(y));\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return new Fraction(x.compare(y));\n    },\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return compare(x.value, y.value);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm05(x, y, compare);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, compare, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, compare, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, compare);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return compare(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return compare(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return compare(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, compare, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, compare, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, compare, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, compare, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, compare, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, compare, true).valueOf();\n    }\n  });\n  return compare;\n});\nexport var createCompareNumber = /* #__PURE__ */factory(name, ['typed', 'config'], function (_ref2) {\n  var typed = _ref2.typed,\n      config = _ref2.config;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;\n    }\n  });\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/relational/compare.js"],"names":["nearlyEqual","bigNearlyEqual","factory","createAlgorithm03","createAlgorithm12","createAlgorithm14","createAlgorithm13","createAlgorithm05","name","dependencies","createCompare","_ref","typed","config","equalScalar","matrix","BigNumber","Fraction","DenseMatrix","algorithm03","algorithm05","algorithm12","algorithm13","algorithm14","compare","booleanBoolean","x","y","numberNumber","epsilon","BigNumberBigNumber","cmp","FractionFraction","ComplexComplex","TypeError","UnitUnit","equalBase","Error","value","SparseMatrixSparseMatrix","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixAny","DenseMatrixAny","anySparseMatrix","anyDenseMatrix","ArrayAny","anyArray","createCompareNumber","_ref2"],"mappings":"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","sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual';\nimport { nearlyEqual } from '../../utils/number';\nimport { factory } from '../../utils/factory';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm05 } from '../../type/matrix/utils/algorithm05';\nvar name = 'compare';\nvar dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix'];\nexport var createCompare = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      equalScalar = _ref.equalScalar,\n      matrix = _ref.matrix,\n      BigNumber = _ref.BigNumber,\n      Fraction = _ref.Fraction,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm03 = createAlgorithm03({\n    typed: typed\n  });\n  var algorithm05 = createAlgorithm05({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm12 = createAlgorithm12({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * x and y are considered equal when the relative difference between x and y\n   * is smaller than the configured epsilon. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.compare(x, y)\n   *\n   * Examples:\n   *\n   *    math.compare(6, 1)           // returns 1\n   *    math.compare(2, 3)           // returns -1\n   *    math.compare(7, 7)           // returns 0\n   *    math.compare('10', '2')      // returns 1\n   *    math.compare('1000', '1e3')  // returns 0\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('40 mm')\n   *    math.compare(a, b)           // returns 1\n   *\n   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText\n   *\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:\n   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n\n  var compare = typed(name, {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y ? 0 : x > y ? 1 : -1;\n    },\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return bigNearlyEqual(x, y, config.epsilon) ? new BigNumber(0) : new BigNumber(x.cmp(y));\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return new Fraction(x.compare(y));\n    },\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n    'Unit, Unit': function UnitUnit(x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return compare(x.value, y.value);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm05(x, y, compare);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm03(y, x, compare, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, compare, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, compare);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return compare(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return compare(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return compare(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm12(x, y, compare, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, compare, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm12(y, x, compare, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, compare, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, compare, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, compare, true).valueOf();\n    }\n  });\n  return compare;\n});\nexport var createCompareNumber = /* #__PURE__ */factory(name, ['typed', 'config'], function (_ref2) {\n  var typed = _ref2.typed,\n      config = _ref2.config;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}