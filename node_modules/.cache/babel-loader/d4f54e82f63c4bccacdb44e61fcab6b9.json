{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { nearlyEqual } from '../../utils/number';\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual';\nimport { ceilNumber } from '../../plain/number';\nvar name = 'ceil';\nvar dependencies = ['typed', 'config', 'round'];\nexport var createCeil = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      round = _ref.round;\n  /**\n   * Round a value towards plus infinity\n   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.ceil(x)\n   *\n   * Examples:\n   *\n   *    math.ceil(3.2)               // returns number 4\n   *    math.ceil(3.8)               // returns number 4\n   *    math.ceil(-4.2)              // returns number -4\n   *    math.ceil(-4.7)              // returns number -4\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.ceil(c)                 // returns Complex 4 - 2i\n   *\n   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]\n   *\n   * See also:\n   *\n   *    floor, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  var ceil = typed('ceil', {\n    number: function number(x) {\n      if (nearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return ceilNumber(x);\n      }\n    },\n    Complex: function Complex(x) {\n      return x.ceil();\n    },\n    BigNumber: function BigNumber(x) {\n      if (bigNearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return x.ceil();\n      }\n    },\n    Fraction: function Fraction(x) {\n      return x.ceil();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, ceil, true);\n    }\n  });\n  return ceil;\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/arithmetic/ceil.js"],"names":["factory","deepMap","nearlyEqual","bigNearlyEqual","ceilNumber","name","dependencies","createCeil","_ref","typed","config","round","ceil","number","x","epsilon","Complex","BigNumber","Fraction","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASA,WAAW,IAAIC,cAAxB,QAA8C,mCAA9C;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,OAApB,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeP,OAAO,CAACK,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACjF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAAA,MAEIC,KAAK,GAAGH,IAAI,CAACG,KAFjB;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,MAAIC,IAAI,GAAGH,KAAK,CAAC,MAAD,EAAS;AACvBI,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB,UAAIZ,WAAW,CAACY,CAAD,EAAIH,KAAK,CAACG,CAAD,CAAT,EAAcJ,MAAM,CAACK,OAArB,CAAf,EAA8C;AAC5C,eAAOJ,KAAK,CAACG,CAAD,CAAZ;AACD,OAFD,MAEO;AACL,eAAOV,UAAU,CAACU,CAAD,CAAjB;AACD;AACF,KAPsB;AAQvBE,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBF,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACF,IAAF,EAAP;AACD,KAVsB;AAWvBK,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBH,CAAnB,EAAsB;AAC/B,UAAIX,cAAc,CAACW,CAAD,EAAIH,KAAK,CAACG,CAAD,CAAT,EAAcJ,MAAM,CAACK,OAArB,CAAlB,EAAiD;AAC/C,eAAOJ,KAAK,CAACG,CAAD,CAAZ;AACD,OAFD,MAEO;AACL,eAAOA,CAAC,CAACF,IAAF,EAAP;AACD;AACF,KAjBsB;AAkBvBM,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBJ,CAAlB,EAAqB;AAC7B,aAAOA,CAAC,CAACF,IAAF,EAAP;AACD,KApBsB;AAqBvB,sBAAkB,SAASO,WAAT,CAAqBL,CAArB,EAAwB;AACxC;AACA,aAAOb,OAAO,CAACa,CAAD,EAAIF,IAAJ,EAAU,IAAV,CAAd;AACD;AAxBsB,GAAT,CAAhB;AA0BA,SAAOA,IAAP;AACD,CA5D6C,CAAvC","sourcesContent":["import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { nearlyEqual } from '../../utils/number';\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual';\nimport { ceilNumber } from '../../plain/number';\nvar name = 'ceil';\nvar dependencies = ['typed', 'config', 'round'];\nexport var createCeil = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      round = _ref.round;\n\n  /**\n   * Round a value towards plus infinity\n   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.ceil(x)\n   *\n   * Examples:\n   *\n   *    math.ceil(3.2)               // returns number 4\n   *    math.ceil(3.8)               // returns number 4\n   *    math.ceil(-4.2)              // returns number -4\n   *    math.ceil(-4.7)              // returns number -4\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.ceil(c)                 // returns Complex 4 - 2i\n   *\n   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]\n   *\n   * See also:\n   *\n   *    floor, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  var ceil = typed('ceil', {\n    number: function number(x) {\n      if (nearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return ceilNumber(x);\n      }\n    },\n    Complex: function Complex(x) {\n      return x.ceil();\n    },\n    BigNumber: function BigNumber(x) {\n      if (bigNearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return x.ceil();\n      }\n    },\n    Fraction: function Fraction(x) {\n      return x.ceil();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, ceil, true);\n    }\n  });\n  return ceil;\n});"]},"metadata":{},"sourceType":"module"}