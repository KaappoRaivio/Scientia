{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { clone } from '../../utils/object';\nimport { validateIndex } from '../../utils/array';\nvar name = 'row';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\nexport var createRow = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Index = _ref.Index,\n      matrix = _ref.matrix,\n      range = _ref.range;\n  /**\n   * Return a row from a Matrix.\n   *\n   * Syntax:\n   *\n   *     math.row(value, index)\n   *\n   * Example:\n   *\n   *     // get a row\n   *     const d = [[1, 2], [3, 4]]\n   *     math.row(d, 1) // returns [[3, 4]]\n   *\n   * See also:\n   *\n   *     column\n   *\n   * @param {Array | Matrix } value   An array or matrix\n   * @param {number} row              The index of the row\n   * @return {Array | Matrix}         The retrieved row\n   */\n\n  var row = typed(name, {\n    'Matrix, number': _row,\n    'Array, number': function ArrayNumber(value, row) {\n      return _row(matrix(clone(value)), row).valueOf();\n    }\n  });\n  return row;\n  /**\n   * Retrieve a row of a matrix\n   * @param {Matrix } value  A matrix\n   * @param {number} row     The index of the row\n   * @return {Matrix}        The retrieved row\n   */\n\n  function _row(value, row) {\n    // check dimensions\n    if (value.size().length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n\n    validateIndex(row, value.size()[0]);\n    var columnRange = range(0, value.size()[1]);\n    var index = new Index(row, columnRange);\n    return value.subset(index);\n  }\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/matrix/row.js"],"names":["factory","clone","validateIndex","name","dependencies","createRow","_ref","typed","Index","matrix","range","row","_row","ArrayNumber","value","valueOf","size","length","Error","columnRange","index","subset"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,QAAnB,EAA6B,OAA7B,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAChF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,KAAK,GAAGF,IAAI,CAACE,KADjB;AAAA,MAEIC,MAAM,GAAGH,IAAI,CAACG,MAFlB;AAAA,MAGIC,KAAK,GAAGJ,IAAI,CAACI,KAHjB;AAKA;;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAIC,GAAG,GAAGJ,KAAK,CAACJ,IAAD,EAAO;AACpB,sBAAkBS,IADE;AAEpB,qBAAiB,SAASC,WAAT,CAAqBC,KAArB,EAA4BH,GAA5B,EAAiC;AAChD,aAAOC,IAAI,CAACH,MAAM,CAACR,KAAK,CAACa,KAAD,CAAN,CAAP,EAAuBH,GAAvB,CAAJ,CAAgCI,OAAhC,EAAP;AACD;AAJmB,GAAP,CAAf;AAMA,SAAOJ,GAAP;AACA;;;;;;;AAOA,WAASC,IAAT,CAAcE,KAAd,EAAqBH,GAArB,EAA0B;AACxB;AACA,QAAIG,KAAK,CAACE,IAAN,GAAaC,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,YAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAEDhB,IAAAA,aAAa,CAACS,GAAD,EAAMG,KAAK,CAACE,IAAN,GAAa,CAAb,CAAN,CAAb;AACA,QAAIG,WAAW,GAAGT,KAAK,CAAC,CAAD,EAAII,KAAK,CAACE,IAAN,GAAa,CAAb,CAAJ,CAAvB;AACA,QAAII,KAAK,GAAG,IAAIZ,KAAJ,CAAUG,GAAV,EAAeQ,WAAf,CAAZ;AACA,WAAOL,KAAK,CAACO,MAAN,CAAaD,KAAb,CAAP;AACD;AACF,CApD4C,CAAtC","sourcesContent":["import { factory } from '../../utils/factory';\nimport { clone } from '../../utils/object';\nimport { validateIndex } from '../../utils/array';\nvar name = 'row';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\nexport var createRow = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Index = _ref.Index,\n      matrix = _ref.matrix,\n      range = _ref.range;\n\n  /**\n   * Return a row from a Matrix.\n   *\n   * Syntax:\n   *\n   *     math.row(value, index)\n   *\n   * Example:\n   *\n   *     // get a row\n   *     const d = [[1, 2], [3, 4]]\n   *     math.row(d, 1) // returns [[3, 4]]\n   *\n   * See also:\n   *\n   *     column\n   *\n   * @param {Array | Matrix } value   An array or matrix\n   * @param {number} row              The index of the row\n   * @return {Array | Matrix}         The retrieved row\n   */\n  var row = typed(name, {\n    'Matrix, number': _row,\n    'Array, number': function ArrayNumber(value, row) {\n      return _row(matrix(clone(value)), row).valueOf();\n    }\n  });\n  return row;\n  /**\n   * Retrieve a row of a matrix\n   * @param {Matrix } value  A matrix\n   * @param {number} row     The index of the row\n   * @return {Matrix}        The retrieved row\n   */\n\n  function _row(value, row) {\n    // check dimensions\n    if (value.size().length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n\n    validateIndex(row, value.size()[0]);\n    var columnRange = range(0, value.size()[1]);\n    var index = new Index(row, columnRange);\n    return value.subset(index);\n  }\n});"]},"metadata":{},"sourceType":"module"}