{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { sinhNumber } from '../../plain/number';\nvar name = 'sinh';\nvar dependencies = ['typed'];\nexport var createSinh = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Calculate the hyperbolic sine of a value,\n   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sinh(x)\n   *\n   * Examples:\n   *\n   *    math.sinh(0.5)       // returns number 0.5210953054937474\n   *\n   * See also:\n   *\n   *    cosh, tanh\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x\n   */\n\n  var sinh = typed(name, {\n    number: sinhNumber,\n    Complex: function Complex(x) {\n      return x.sinh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.sinh();\n    },\n    Unit: function Unit(x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function sinh is no angle');\n      }\n\n      return sinh(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since sinh(0) = 0\n      return deepMap(x, sinh, true);\n    }\n  });\n  return sinh;\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/trigonometry/sinh.js"],"names":["factory","deepMap","sinhNumber","name","dependencies","createSinh","_ref","typed","sinh","number","Complex","x","BigNumber","Unit","hasBase","constructor","BASE_UNITS","ANGLE","TypeError","value","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACjF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAIC,IAAI,GAAGD,KAAK,CAACJ,IAAD,EAAO;AACrBM,IAAAA,MAAM,EAAEP,UADa;AAErBQ,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACH,IAAF,EAAP;AACD,KAJoB;AAKrBI,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBD,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACH,IAAF,EAAP;AACD,KAPoB;AAQrBK,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAcF,CAAd,EAAiB;AACrB,UAAI,CAACA,CAAC,CAACG,OAAF,CAAUH,CAAC,CAACI,WAAF,CAAcC,UAAd,CAAyBC,KAAnC,CAAL,EAAgD;AAC9C,cAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AACD;;AAED,aAAOV,IAAI,CAACG,CAAC,CAACQ,KAAH,CAAX;AACD,KAdoB;AAerB,sBAAkB,SAASC,WAAT,CAAqBT,CAArB,EAAwB;AACxC;AACA,aAAOV,OAAO,CAACU,CAAD,EAAIH,IAAJ,EAAU,IAAV,CAAd;AACD;AAlBoB,GAAP,CAAhB;AAoBA,SAAOA,IAAP;AACD,CA7C6C,CAAvC","sourcesContent":["import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { sinhNumber } from '../../plain/number';\nvar name = 'sinh';\nvar dependencies = ['typed'];\nexport var createSinh = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Calculate the hyperbolic sine of a value,\n   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sinh(x)\n   *\n   * Examples:\n   *\n   *    math.sinh(0.5)       // returns number 0.5210953054937474\n   *\n   * See also:\n   *\n   *    cosh, tanh\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x\n   */\n  var sinh = typed(name, {\n    number: sinhNumber,\n    Complex: function Complex(x) {\n      return x.sinh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.sinh();\n    },\n    Unit: function Unit(x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function sinh is no angle');\n      }\n\n      return sinh(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since sinh(0) = 0\n      return deepMap(x, sinh, true);\n    }\n  });\n  return sinh;\n});"]},"metadata":{},"sourceType":"module"}