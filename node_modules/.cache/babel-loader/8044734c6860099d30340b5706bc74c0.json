{"ast":null,"code":"import { factory } from '../../../utils/factory';\nimport { DimensionError } from '../../../error/DimensionError';\nvar name = 'algorithm03';\nvar dependencies = ['typed'];\nexport var createAlgorithm03 = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked M*N times.\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(Dij, 0)    ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n\n  return function algorithm03(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype; // sparse matrix arrays\n\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // sparse matrix cannot be a Pattern matrix\n\n\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result (DenseMatrix)\n\n\n    var cdata = []; // initialize dense matrix\n\n    for (var z = 0; z < rows; z++) {\n      // initialize row\n      cdata[z] = [];\n    } // workspace\n\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns in b\n\n    for (var j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1; // values in column j\n\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k]; // update workspace\n\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        w[i] = mark;\n      } // process workspace\n\n\n      for (var y = 0; y < rows; y++) {\n        // check we have a calculated value for current row\n        if (w[y] === mark) {\n          // use calculated value\n          cdata[y][j] = x[y];\n        } else {\n          // calculate value\n          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);\n        }\n      }\n    } // return dense matrix\n\n\n    return denseMatrix.createDenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/type/matrix/utils/algorithm03.js"],"names":["factory","DimensionError","name","dependencies","createAlgorithm03","_ref","typed","algorithm03","denseMatrix","sparseMatrix","callback","inverse","adata","_data","asize","_size","adt","_datatype","bvalues","_values","bindex","_index","bptr","_ptr","bsize","bdt","length","RangeError","Error","rows","columns","dt","zero","cf","convert","find","cdata","z","x","w","j","mark","k0","k1","k","i","y","createDenseMatrix","data","size","datatype"],"mappings":"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","sourcesContent":["import { factory } from '../../../utils/factory';\nimport { DimensionError } from '../../../error/DimensionError';\nvar name = 'algorithm03';\nvar dependencies = ['typed'];\nexport var createAlgorithm03 = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked M*N times.\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  f(Dij, 0)    ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  return function algorithm03(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype; // sparse matrix arrays\n\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // sparse matrix cannot be a Pattern matrix\n\n\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result (DenseMatrix)\n\n\n    var cdata = []; // initialize dense matrix\n\n    for (var z = 0; z < rows; z++) {\n      // initialize row\n      cdata[z] = [];\n    } // workspace\n\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // loop columns in b\n\n    for (var j = 0; j < columns; j++) {\n      // column mark\n      var mark = j + 1; // values in column j\n\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k]; // update workspace\n\n        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        w[i] = mark;\n      } // process workspace\n\n\n      for (var y = 0; y < rows; y++) {\n        // check we have a calculated value for current row\n        if (w[y] === mark) {\n          // use calculated value\n          cdata[y][j] = x[y];\n        } else {\n          // calculate value\n          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);\n        }\n      }\n    } // return dense matrix\n\n\n    return denseMatrix.createDenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});"]},"metadata":{},"sourceType":"module"}