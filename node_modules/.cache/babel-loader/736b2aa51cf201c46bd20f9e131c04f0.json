{"ast":null,"code":"var _jsxFileName = \"/home/kaappo/testit/canvas/src/components/compass.js\";\nimport React from 'react';\nimport { mod } from \"mathjs\";\nimport \"/home/kaappo/testit/canvas/src/components/compass.css\";\nimport NumberDisplay from \"/home/kaappo/testit/canvas/src/components/numberdisplay.js\";\nimport DrawHelper from \"./helpers.js\";\n\nclass Compass extends React.Component {\n  constructor(ownProps) {\n    super(ownProps);\n    this.ownProps = {\n      width: ownProps.width,\n      height: ownProps.height,\n      heading: ownProps.heading\n    };\n    this.arcCenterOffsetY = this.ownProps.height / 2.6;\n    this.radius = this.getCircleRadius();\n    this.numberDisplay = React.createRef();\n  }\n\n  getCircleRadius() {\n    return Math.sqrt((this.ownProps.width / 2) ** 2 + this.arcCenterOffsetY ** 2);\n  }\n\n  componentDidMount() {\n    this.canvas = this.refs.canvas;\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.drawHelper = new DrawHelper(this.canvas, this.ctx, this.arcCenterOffsetY); // }\n  } // drawAngleText (ctx, angle, text) {\n  //     let pos = this.getPosFromAngle(angle, 0)\n  //     let x = pos[0];\n  //     let y = pos[1];\n  //     ctx.save();\n  //     ctx.translate(x + 40 * Math.sin(angle - Math.PI), y + 40 * Math.cos(angle - Math.PI));\n  //     ctx.rotate(-angle + Math.PI);\n  //     ctx.textAlign = 'center';\n  //     ctx.fillText(text, 0, 10);\n  //     ctx.restore();\n  // }\n\n\n  componentDidUpdate() {\n    const ctx = this.ctx;\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // img.onload = () => {\n    // ctx.drawImage(img, 0, 0);\n\n    ctx.font = \"40px Courier\";\n    ctx.textAlign = \"center\";\n    ctx.beginPath();\n    ctx.arc(this.ownProps.width / 2, this.canvas.height + this.arcCenterOffsetY, this.radius, 0, 2 * Math.PI);\n    ctx.fillRect(this.ownProps.width / 2 - 1, this.canvas.height - this.radius + this.arcCenterOffsetY - 10, 2, 10);\n    let divisions = [12, 36, 72];\n    ctx.font = \"20px Courier\";\n\n    for (let index = 0; index < divisions.length; index++) {\n      let division = divisions[index];\n\n      for (let i = 0; i < division; i++) {\n        let baseAngle = 2 * Math.PI / division * i;\n        let angleOffset = this.ownProps.heading * Math.PI / 180; // ctx.fillText(this.ownProps.heading.toFixed(2), start[0] + 5, start[1] + 5)\n\n        this.drawHelper.drawCompassLine(ctx, baseAngle + angleOffset, ((divisions.length - index + 1) / divisions.length) ** 2 * 15);\n\n        if (index === 0) {\n          let angleText = mod(180 - baseAngle / Math.PI * 180, 360);\n          this.drawHelper.drawAngleText(ctx, baseAngle + angleOffset, angleText.toFixed(0));\n        }\n      }\n    }\n\n    ctx.closePath();\n    ctx.stroke();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      style: {\n        width: this.ownProps.width + \"px\",\n        height: this.ownProps.height + \"px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(NumberDisplay, {\n      className: \"number\",\n      value: this.ownProps.heading,\n      suffix: \"\\xB0\",\n      unit: \"T\",\n      width: this.ownProps.width,\n      height: this.ownProps.height / 3 * 2,\n      upperBound: 360,\n      decimalPlaces: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      className: \"compassRose\",\n      width: this.ownProps.width,\n      height: this.ownProps.height / 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default Compass;","map":{"version":3,"sources":["/home/kaappo/testit/canvas/src/components/compass.js"],"names":["React","mod","NumberDisplay","DrawHelper","Compass","Component","constructor","ownProps","width","height","heading","arcCenterOffsetY","radius","getCircleRadius","numberDisplay","createRef","Math","sqrt","componentDidMount","canvas","refs","ctx","getContext","drawHelper","componentDidUpdate","clearRect","font","textAlign","beginPath","arc","PI","fillRect","divisions","index","length","division","i","baseAngle","angleOffset","drawCompassLine","angleText","drawAngleText","toFixed","closePath","stroke","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { mod } from \"mathjs\";\nimport \"/home/kaappo/testit/canvas/src/components/compass.css\"\nimport NumberDisplay from \"/home/kaappo/testit/canvas/src/components/numberdisplay.js\"\n\nimport DrawHelper from \"./helpers.js\"\n\nclass Compass extends React.Component {\n    constructor(ownProps) {\n        super(ownProps);\n\n        this.ownProps = {\n            width: ownProps.width,\n            height: ownProps.height,\n            heading: ownProps.heading,\n        };\n\n        this.arcCenterOffsetY = this.ownProps.height / 2.6;\n        this.radius = this.getCircleRadius();\n\n        this.numberDisplay = React.createRef();\n\n    \n    }\n\n    getCircleRadius () {\n        return Math.sqrt((this.ownProps.width / 2) ** 2 + this.arcCenterOffsetY ** 2)\n    }\n\n    componentDidMount() {\n        this.canvas = this.refs.canvas;\n        this.ctx = this.canvas.getContext(\"2d\");\n\n        this.drawHelper = new DrawHelper(this.canvas, this.ctx, this.arcCenterOffsetY);\n        \n        // }\n    }\n\n\n    // drawAngleText (ctx, angle, text) {\n    //     let pos = this.getPosFromAngle(angle, 0)\n    //     let x = pos[0];\n    //     let y = pos[1];\n\n    //     ctx.save();\n    //     ctx.translate(x + 40 * Math.sin(angle - Math.PI), y + 40 * Math.cos(angle - Math.PI));\n    //     ctx.rotate(-angle + Math.PI);\n\n    //     ctx.textAlign = 'center';\n    //     ctx.fillText(text, 0, 10);\n\n    //     ctx.restore();\n\n    // }\n\n    componentDidUpdate () {\n        const ctx = this.ctx;\n\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        // img.onload = () => {\n        // ctx.drawImage(img, 0, 0);\n        ctx.font = \"40px Courier\";\n        ctx.textAlign = \"center\";\n\n        ctx.beginPath();\n        ctx.arc(this.ownProps.width / 2, this.canvas.height + this.arcCenterOffsetY, this.radius, 0, 2 * Math.PI);\n        ctx.fillRect(this.ownProps.width / 2 - 1, this.canvas.height - this.radius + this.arcCenterOffsetY - 10, 2, 10)\n\n        let divisions = [12, 36, 72];\n        ctx.font = \"20px Courier\";\n        for (let index = 0; index < divisions.length; index++) {\n            let division = divisions[index]\n            for (let i = 0; i < division; i++) {\n                let baseAngle = 2 * Math.PI / division * i;\n                let angleOffset = this.ownProps.heading * Math.PI / 180;\n\n\n                // ctx.fillText(this.ownProps.heading.toFixed(2), start[0] + 5, start[1] + 5)\n                this.drawHelper.drawCompassLine(ctx, baseAngle + angleOffset, ((divisions.length - index + 1) / divisions.length) ** 2 * 15)\n                if (index === 0) {\n                    let angleText = mod(180 - baseAngle / Math.PI * 180, 360);\n                    this.drawHelper.drawAngleText(ctx, baseAngle + angleOffset, angleText.toFixed(0))\n                }\n            }\n        }\n\n        ctx.closePath();\n        ctx.stroke();\n    }\n\n    render () {\n        return <div className=\"container\" style={{width: this.ownProps.width + \"px\", height: this.ownProps.height + \"px\"}}>\n            <NumberDisplay className=\"number\" value={this.ownProps.heading} suffix=\"°\" unit=\"T\" width={this.ownProps.width} height={this.ownProps.height / 3 * 2} upperBound={360} decimalPlaces={1} />            \n            <canvas ref=\"canvas\" className=\"compassRose\" width={this.ownProps.width} height={this.ownProps.height / 3} />\n        </div>\n    }\n}\n\nexport default Compass"]},"metadata":{},"sourceType":"module"}