{"ast":null,"code":"class DrawHelper {\n  constructor(canvas, ctx, arcCenterOffsetY, radius) {\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.arcCenterOffsetY = arcCenterOffsetY;\n    this.radius = radius;\n  }\n\n  drawAngleText(origin, angle, text) {\n    let pos = this.getPosFromAngle(angle, 0);\n    let x = pos[0];\n    let y = pos[1];\n    this.ctx.save();\n    this.ctx.translate(x + 40 * Math.sin(angle - Math.PI), y + 40 * Math.cos(angle - Math.PI));\n    this.ctx.rotate(-angle + Math.PI);\n    this.ctx.textAlign = 'center';\n    this.ctx.fillText(text, 0, 10);\n    this.ctx.restore();\n  }\n\n  getPosFromAngle(origin, angle, radius) {\n    let x = origin[0];\n    let y = origin[1]; //this.canvas.height + this.arcCenterOffsetY\n\n    return [x + Math.sin(angle) * radius, y + Math.cos(angle) * radius];\n  }\n\n  drawCompassLine(angle, length) {\n    let end = this.getPosFromAngle(angle, 0);\n    let start = this.getPosFromAngle(angle, length);\n    this.ctx.moveTo(start[0], start[1]);\n    this.ctx.lineTo(end[0], end[1]);\n  }\n\n}\n\nexport default DrawHelper;","map":{"version":3,"sources":["/home/kaappo/testit/canvas/src/components/helpers.js"],"names":["DrawHelper","constructor","canvas","ctx","arcCenterOffsetY","radius","drawAngleText","origin","angle","text","pos","getPosFromAngle","x","y","save","translate","Math","sin","PI","cos","rotate","textAlign","fillText","restore","drawCompassLine","length","end","start","moveTo","lineTo"],"mappings":"AAAA,MAAMA,UAAN,CAAiB;AACbC,EAAAA,WAAW,CAAEC,MAAF,EAAUC,GAAV,EAAeC,gBAAf,EAAiCC,MAAjC,EAAyC;AAChD,SAAKH,MAAL,GAAcA,MAAd;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AAEDC,EAAAA,aAAa,CAAEC,MAAF,EAAUC,KAAV,EAAiBC,IAAjB,EAAuB;AAChC,QAAIC,GAAG,GAAG,KAAKC,eAAL,CAAqBH,KAArB,EAA4B,CAA5B,CAAV;AACA,QAAII,CAAC,GAAGF,GAAG,CAAC,CAAD,CAAX;AACA,QAAIG,CAAC,GAAGH,GAAG,CAAC,CAAD,CAAX;AAEA,SAAKP,GAAL,CAASW,IAAT;AACA,SAAKX,GAAL,CAASY,SAAT,CAAmBH,CAAC,GAAG,KAAKI,IAAI,CAACC,GAAL,CAAST,KAAK,GAAGQ,IAAI,CAACE,EAAtB,CAA5B,EAAuDL,CAAC,GAAG,KAAKG,IAAI,CAACG,GAAL,CAASX,KAAK,GAAGQ,IAAI,CAACE,EAAtB,CAAhE;AACA,SAAKf,GAAL,CAASiB,MAAT,CAAgB,CAACZ,KAAD,GAASQ,IAAI,CAACE,EAA9B;AAEA,SAAKf,GAAL,CAASkB,SAAT,GAAqB,QAArB;AACA,SAAKlB,GAAL,CAASmB,QAAT,CAAkBb,IAAlB,EAAwB,CAAxB,EAA2B,EAA3B;AAEA,SAAKN,GAAL,CAASoB,OAAT;AAEH;;AAEDZ,EAAAA,eAAe,CAACJ,MAAD,EAASC,KAAT,EAAgBH,MAAhB,EAAwB;AACnC,QAAIO,CAAC,GAAGL,MAAM,CAAC,CAAD,CAAd;AACA,QAAIM,CAAC,GAAGN,MAAM,CAAC,CAAD,CAAd,CAFmC,CAGnC;;AACA,WAAO,CAACK,CAAC,GAAGI,IAAI,CAACC,GAAL,CAAST,KAAT,IAAkBH,MAAvB,EAA+BQ,CAAC,GAAGG,IAAI,CAACG,GAAL,CAASX,KAAT,IAAkBH,MAArD,CAAP;AACH;;AAEDmB,EAAAA,eAAe,CAAChB,KAAD,EAAQiB,MAAR,EAAgB;AAC3B,QAAIC,GAAG,GAAG,KAAKf,eAAL,CAAqBH,KAArB,EAA4B,CAA5B,CAAV;AACA,QAAImB,KAAK,GAAG,KAAKhB,eAAL,CAAqBH,KAArB,EAA4BiB,MAA5B,CAAZ;AAEA,SAAKtB,GAAL,CAASyB,MAAT,CAAgBD,KAAK,CAAC,CAAD,CAArB,EAA0BA,KAAK,CAAC,CAAD,CAA/B;AACA,SAAKxB,GAAL,CAAS0B,MAAT,CAAgBH,GAAG,CAAC,CAAD,CAAnB,EAAwBA,GAAG,CAAC,CAAD,CAA3B;AACH;;AArCY;;AAyCjB,eAAe1B,UAAf","sourcesContent":["class DrawHelper {\n    constructor (canvas, ctx, arcCenterOffsetY, radius) {\n        this.canvas = canvas;\n        this.ctx = ctx;\n        this.arcCenterOffsetY = arcCenterOffsetY;\n        this.radius = radius;\n    }\n    \n    drawAngleText (origin, angle, text) {\n        let pos = this.getPosFromAngle(angle, 0)\n        let x = pos[0];\n        let y = pos[1];\n    \n        this.ctx.save();\n        this.ctx.translate(x + 40 * Math.sin(angle - Math.PI), y + 40 * Math.cos(angle - Math.PI));\n        this.ctx.rotate(-angle + Math.PI);\n    \n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(text, 0, 10);\n    \n        this.ctx.restore();\n    \n    }\n    \n    getPosFromAngle(origin, angle, radius) {\n        let x = origin[0]\n        let y = origin[1]\n        //this.canvas.height + this.arcCenterOffsetY\n        return [x + Math.sin(angle) * radius, y + Math.cos(angle) * radius]\n    }\n\n    drawCompassLine(angle, length) {\n        let end = this.getPosFromAngle(angle, 0)\n        let start = this.getPosFromAngle(angle, length)\n\n        this.ctx.moveTo(start[0], start[1]);\n        this.ctx.lineTo(end[0], end[1]);\n    }\n}\n\n\nexport default DrawHelper"]},"metadata":{},"sourceType":"module"}