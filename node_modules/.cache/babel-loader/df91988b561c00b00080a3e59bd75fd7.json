{"ast":null,"code":"import { flatten } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nimport { improveErrorMessage } from './utils/improveErrorMessage';\nvar name = 'mad';\nvar dependencies = ['typed', 'abs', 'map', 'median', 'subtract'];\nexport var createMad = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      abs = _ref.abs,\n      map = _ref.map,\n      median = _ref.median,\n      subtract = _ref.subtract;\n  /**\n   * Compute the median absolute deviation of a matrix or a list with values.\n   * The median absolute deviation is defined as the median of the absolute\n   * deviations from the median.\n   *\n   * Syntax:\n   *\n   *     math.mad(a, b, c, ...)\n   *     math.mad(A)\n   *\n   * Examples:\n   *\n   *     math.mad(10, 20, 30)             // returns 10\n   *     math.mad([1, 2, 3])              // returns 1\n   *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5\n   *\n   * See also:\n   *\n   *     median, mean, std, abs\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or multiple scalar values.\n   * @return {*} The median absolute deviation.\n   */\n\n  return typed(name, {\n    // mad([a, b, c, d, ...])\n    'Array | Matrix': _mad,\n    // mad(a, b, c, d, ...)\n    '...': function _(args) {\n      return _mad(args);\n    }\n  });\n\n  function _mad(array) {\n    array = flatten(array.valueOf());\n\n    if (array.length === 0) {\n      throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');\n    }\n\n    try {\n      var med = median(array);\n      return median(map(array, function (value) {\n        return abs(subtract(value, med));\n      }));\n    } catch (err) {\n      if (err instanceof TypeError && err.message.indexOf('median') !== -1) {\n        throw new TypeError(err.message.replace('median', 'mad'));\n      } else {\n        throw improveErrorMessage(err, 'mad');\n      }\n    }\n  }\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/statistics/mad.js"],"names":["flatten","factory","improveErrorMessage","name","dependencies","createMad","_ref","typed","abs","map","median","subtract","_mad","_","args","array","valueOf","length","Error","med","value","err","TypeError","message","indexOf","replace"],"mappings":"AAAA,SAASA,OAAT,QAAwB,mBAAxB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,mBAAT,QAAoC,6BAApC;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,KAAjB,EAAwB,QAAxB,EAAkC,UAAlC,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAChF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,GAAG,GAAGF,IAAI,CAACE,GADf;AAAA,MAEIC,GAAG,GAAGH,IAAI,CAACG,GAFf;AAAA,MAGIC,MAAM,GAAGJ,IAAI,CAACI,MAHlB;AAAA,MAIIC,QAAQ,GAAGL,IAAI,CAACK,QAJpB;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAAOJ,KAAK,CAACJ,IAAD,EAAO;AACjB;AACA,sBAAkBS,IAFD;AAGjB;AACA,WAAO,SAASC,CAAT,CAAWC,IAAX,EAAiB;AACtB,aAAOF,IAAI,CAACE,IAAD,CAAX;AACD;AANgB,GAAP,CAAZ;;AASA,WAASF,IAAT,CAAcG,KAAd,EAAqB;AACnBA,IAAAA,KAAK,GAAGf,OAAO,CAACe,KAAK,CAACC,OAAN,EAAD,CAAf;;AAEA,QAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACtB,YAAM,IAAIC,KAAJ,CAAU,oEAAV,CAAN;AACD;;AAED,QAAI;AACF,UAAIC,GAAG,GAAGT,MAAM,CAACK,KAAD,CAAhB;AACA,aAAOL,MAAM,CAACD,GAAG,CAACM,KAAD,EAAQ,UAAUK,KAAV,EAAiB;AACxC,eAAOZ,GAAG,CAACG,QAAQ,CAACS,KAAD,EAAQD,GAAR,CAAT,CAAV;AACD,OAFgB,CAAJ,CAAb;AAGD,KALD,CAKE,OAAOE,GAAP,EAAY;AACZ,UAAIA,GAAG,YAAYC,SAAf,IAA4BD,GAAG,CAACE,OAAJ,CAAYC,OAAZ,CAAoB,QAApB,MAAkC,CAAC,CAAnE,EAAsE;AACpE,cAAM,IAAIF,SAAJ,CAAcD,GAAG,CAACE,OAAJ,CAAYE,OAAZ,CAAoB,QAApB,EAA8B,KAA9B,CAAd,CAAN;AACD,OAFD,MAEO;AACL,cAAMvB,mBAAmB,CAACmB,GAAD,EAAM,KAAN,CAAzB;AACD;AACF;AACF;AACF,CA5D4C,CAAtC","sourcesContent":["import { flatten } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nimport { improveErrorMessage } from './utils/improveErrorMessage';\nvar name = 'mad';\nvar dependencies = ['typed', 'abs', 'map', 'median', 'subtract'];\nexport var createMad = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      abs = _ref.abs,\n      map = _ref.map,\n      median = _ref.median,\n      subtract = _ref.subtract;\n\n  /**\n   * Compute the median absolute deviation of a matrix or a list with values.\n   * The median absolute deviation is defined as the median of the absolute\n   * deviations from the median.\n   *\n   * Syntax:\n   *\n   *     math.mad(a, b, c, ...)\n   *     math.mad(A)\n   *\n   * Examples:\n   *\n   *     math.mad(10, 20, 30)             // returns 10\n   *     math.mad([1, 2, 3])              // returns 1\n   *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5\n   *\n   * See also:\n   *\n   *     median, mean, std, abs\n   *\n   * @param {Array | Matrix} array\n   *                        A single matrix or multiple scalar values.\n   * @return {*} The median absolute deviation.\n   */\n  return typed(name, {\n    // mad([a, b, c, d, ...])\n    'Array | Matrix': _mad,\n    // mad(a, b, c, d, ...)\n    '...': function _(args) {\n      return _mad(args);\n    }\n  });\n\n  function _mad(array) {\n    array = flatten(array.valueOf());\n\n    if (array.length === 0) {\n      throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');\n    }\n\n    try {\n      var med = median(array);\n      return median(map(array, function (value) {\n        return abs(subtract(value, med));\n      }));\n    } catch (err) {\n      if (err instanceof TypeError && err.message.indexOf('median') !== -1) {\n        throw new TypeError(err.message.replace('median', 'mad'));\n      } else {\n        throw improveErrorMessage(err, 'mad');\n      }\n    }\n  }\n});"]},"metadata":{},"sourceType":"module"}