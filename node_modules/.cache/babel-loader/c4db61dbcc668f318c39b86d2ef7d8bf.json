{"ast":null,"code":"import { compareText as _compareText } from '../../utils/string';\nimport { factory } from '../../utils/factory';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nvar name = 'compareText';\nvar dependencies = ['typed', 'matrix'];\nexport var createCompareText = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix;\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Compare two strings lexically. Comparison is case sensitive.\n   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.compareText(x, y)\n   *\n   * Examples:\n   *\n   *    math.compareText('B', 'A')     // returns 1\n   *    math.compareText('2', '10')    // returns 1\n   *    math.compare('2', '10')        // returns -1\n   *    math.compareNatural('2', '10') // returns -1\n   *\n   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, equalText, compare, compareNatural\n   *\n   * @param  {string | Array | DenseMatrix} x First string to compare\n   * @param  {string | Array | DenseMatrix} y Second string to compare\n   * @return {number | Array | DenseMatrix} Returns the result of the comparison:\n   *                                        1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n\n  var compareText = typed(name, {\n    'any, any': _compareText,\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, _compareText);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return compareText(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return compareText(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return compareText(x, matrix(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, _compareText, false);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, _compareText, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, _compareText, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, _compareText, true).valueOf();\n    }\n  });\n  return compareText;\n});\nexport var createCompareTextNumber = /* #__PURE__ */factory(name, ['typed'], function (_ref2) {\n  var typed = _ref2.typed;\n  return typed(name, {\n    'any, any': _compareText\n  });\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/relational/compareText.js"],"names":["compareText","_compareText","factory","createAlgorithm14","createAlgorithm13","name","dependencies","createCompareText","_ref","typed","matrix","algorithm13","algorithm14","DenseMatrixDenseMatrix","x","y","ArrayArray","valueOf","ArrayMatrix","MatrixArray","DenseMatrixAny","anyDenseMatrix","ArrayAny","anyArray","createCompareTextNumber","_ref2"],"mappings":"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","sourcesContent":["import { compareText as _compareText } from '../../utils/string';\nimport { factory } from '../../utils/factory';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nvar name = 'compareText';\nvar dependencies = ['typed', 'matrix'];\nexport var createCompareText = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix;\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Compare two strings lexically. Comparison is case sensitive.\n   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.compareText(x, y)\n   *\n   * Examples:\n   *\n   *    math.compareText('B', 'A')     // returns 1\n   *    math.compareText('2', '10')    // returns 1\n   *    math.compare('2', '10')        // returns -1\n   *    math.compareNatural('2', '10') // returns -1\n   *\n   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, equalText, compare, compareNatural\n   *\n   * @param  {string | Array | DenseMatrix} x First string to compare\n   * @param  {string | Array | DenseMatrix} y Second string to compare\n   * @return {number | Array | DenseMatrix} Returns the result of the comparison:\n   *                                        1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n\n  var compareText = typed(name, {\n    'any, any': _compareText,\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, _compareText);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return compareText(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return compareText(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return compareText(x, matrix(y));\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, _compareText, false);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, _compareText, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, _compareText, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, _compareText, true).valueOf();\n    }\n  });\n  return compareText;\n});\nexport var createCompareTextNumber = /* #__PURE__ */factory(name, ['typed'], function (_ref2) {\n  var typed = _ref2.typed;\n  return typed(name, {\n    'any, any': _compareText\n  });\n});"]},"metadata":{},"sourceType":"module"}