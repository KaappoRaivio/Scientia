{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01';\nimport { createAlgorithm04 } from '../../type/matrix/utils/algorithm04';\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { gcdNumber } from '../../plain/number';\nvar name = 'gcd';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\nexport var createGcd = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      BigNumber = _ref.BigNumber,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm01 = createAlgorithm01({\n    typed: typed\n  });\n  var algorithm04 = createAlgorithm04({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm10 = createAlgorithm10({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12)              // returns 4\n   *    math.gcd(-4, 6)              // returns 2\n   *    math.gcd(25, 15, -10)        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n\n  var gcd = typed(name, {\n    'number, number': gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.gcd(y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm04(x, y, gcd);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm01(y, x, gcd, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm01(x, y, gcd, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, gcd);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return gcd(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return gcd(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return gcd(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm10(x, y, gcd, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, gcd, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      return algorithm10(y, x, gcd, true);\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      return algorithm14(y, x, gcd, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, gcd, false).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, gcd, true).valueOf();\n    },\n    // TODO: need a smarter notation here\n    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {\n      var res = gcd(a, b);\n\n      for (var i = 0; i < args.length; i++) {\n        res = gcd(res, args[i]);\n      }\n\n      return res;\n    }\n  });\n  return gcd;\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\n\n    var zero = new BigNumber(0);\n\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n\n    return a.lt(zero) ? a.neg() : a;\n  }\n});","map":{"version":3,"sources":["/home/kaappo/git/kments/node_modules/mathjs/es/function/arithmetic/gcd.js"],"names":["factory","createAlgorithm01","createAlgorithm04","createAlgorithm10","createAlgorithm13","createAlgorithm14","gcdNumber","name","dependencies","createGcd","_ref","typed","matrix","equalScalar","BigNumber","DenseMatrix","algorithm01","algorithm04","algorithm10","algorithm13","algorithm14","gcd","_gcdBigNumber","FractionFraction","x","y","SparseMatrixSparseMatrix","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixNumberBigNumber","DenseMatrixNumberBigNumber","numberBigNumberSparseMatrix","numberBigNumberDenseMatrix","ArrayNumberBigNumber","numberBigNumberArray","ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber","a","b","args","res","i","length","isInt","Error","zero","isZero","r","mod","lt","neg"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01';\nimport { createAlgorithm04 } from '../../type/matrix/utils/algorithm04';\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { gcdNumber } from '../../plain/number';\nvar name = 'gcd';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\nexport var createGcd = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      BigNumber = _ref.BigNumber,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm01 = createAlgorithm01({\n    typed: typed\n  });\n  var algorithm04 = createAlgorithm04({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm10 = createAlgorithm10({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12)              // returns 4\n   *    math.gcd(-4, 6)              // returns 2\n   *    math.gcd(25, 15, -10)        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n\n  var gcd = typed(name, {\n    'number, number': gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.gcd(y);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm04(x, y, gcd);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm01(y, x, gcd, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm01(x, y, gcd, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, gcd);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return gcd(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return gcd(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return gcd(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm10(x, y, gcd, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, gcd, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      return algorithm10(y, x, gcd, true);\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      return algorithm14(y, x, gcd, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, gcd, false).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, gcd, true).valueOf();\n    },\n    // TODO: need a smarter notation here\n    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {\n      var res = gcd(a, b);\n\n      for (var i = 0; i < args.length; i++) {\n        res = gcd(res, args[i]);\n      }\n\n      return res;\n    }\n  });\n  return gcd;\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\n\n    var zero = new BigNumber(0);\n\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n\n    return a.lt(zero) ? a.neg() : a;\n  }\n});"]},"metadata":{},"sourceType":"module"}