{"ast":null,"code":"class Interpolator {\n  constructor() {\n    this.previousData = 0;\n    this.currentData = 0;\n    this.dataPoints = [[new Date().getTime(), 0]];\n  }\n\n  addDataPoint(data) {\n    // console.log(this.dataPoints)\n    console.log(this.dataPoints);\n    this.dataPoints.push([new Date().getTime(), data]);\n\n    while (this.dataPoints.length > 20) {\n      this.dataPoints.shift();\n    }\n  }\n\n  interpolate(timeStamp) {\n    // let latest = this.dataPoints[this.dataPoints.length - 1][0];\n    // let diff = timeStamp - latest;\n    let averageDiff = this.getAverageDeltaTime(); // let progress = diff / averageDiff;\n\n    return this.getLatestPairSlope()(timeStamp - averageDiff);\n  }\n\n  getAverageDeltaTime() {\n    let previous = this.dataPoints[0][0];\n    let diffs = [];\n\n    for (let i = 1; i < this.dataPoints.length; i++) {\n      let current = this.dataPoints[i][0];\n      let diff = current - previous;\n      diffs.push(diff);\n      previous = current;\n    }\n\n    return diffs.reduce((a, b) => a + b, 0) / diffs.length;\n  }\n\n  getLatestPairSlope() {\n    let latest = this.dataPoints[this.dataPoints.length - 1];\n    let other = this.dataPoints[this.dataPoints.length - 2];\n    return x => {\n      let yDiffs = latest[1].map((item, index) => item - other[1][index]); // let k = (latest[1] - other[1]) / (latest[0] - other[0]);\n\n      let slopes = yDiffs.map(item => item / (latest[0] - other[0]));\n      let constants = other[1];\n      return slopes.map((item, index) => item * x + constants[index]);\n    };\n  }\n\n}\n\nexport default Interpolator;","map":{"version":3,"sources":["/home/kaappo/git/kments/src/components/misc/interpolate.js"],"names":["Interpolator","constructor","previousData","currentData","dataPoints","Date","getTime","addDataPoint","data","console","log","push","length","shift","interpolate","timeStamp","averageDiff","getAverageDeltaTime","getLatestPairSlope","previous","diffs","i","current","diff","reduce","a","b","latest","other","x","yDiffs","map","item","index","slopes","constants"],"mappings":"AAAA,MAAMA,YAAN,CAAmB;AACfC,EAAAA,WAAW,GAAI;AACX,SAAKC,YAAL,GAAoB,CAApB;AACA,SAAKC,WAAL,GAAmB,CAAnB;AAGA,SAAKC,UAAL,GAAkB,CAAC,CAAC,IAAIC,IAAJ,GAAWC,OAAX,EAAD,EAAuB,CAAvB,CAAD,CAAlB;AACH;;AAEDC,EAAAA,YAAY,CAAEC,IAAF,EAAQ;AAChB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,UAAjB;AACA,SAAKA,UAAL,CAAgBO,IAAhB,CAAqB,CAAC,IAAIN,IAAJ,GAAWC,OAAX,EAAD,EAAuBE,IAAvB,CAArB;;AACA,WAAO,KAAKJ,UAAL,CAAgBQ,MAAhB,GAAyB,EAAhC,EAAoC;AAChC,WAAKR,UAAL,CAAgBS,KAAhB;AACH;AAEJ;;AAEDC,EAAAA,WAAW,CAAEC,SAAF,EAAa;AACpB;AACA;AAEA,QAAIC,WAAW,GAAG,KAAKC,mBAAL,EAAlB,CAJoB,CAMpB;;AAEA,WAAO,KAAKC,kBAAL,GAA0BH,SAAS,GAAGC,WAAtC,CAAP;AACH;;AAEDC,EAAAA,mBAAmB,GAAI;AACnB,QAAIE,QAAQ,GAAG,KAAKf,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,CAAf;AACA,QAAIgB,KAAK,GAAG,EAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKjB,UAAL,CAAgBQ,MAApC,EAA4CS,CAAC,EAA7C,EAAiD;AAC7C,UAAIC,OAAO,GAAG,KAAKlB,UAAL,CAAgBiB,CAAhB,EAAmB,CAAnB,CAAd;AAEA,UAAIE,IAAI,GAAGD,OAAO,GAAGH,QAArB;AACAC,MAAAA,KAAK,CAACT,IAAN,CAAWY,IAAX;AAEAJ,MAAAA,QAAQ,GAAGG,OAAX;AACH;;AAED,WAAOF,KAAK,CAACI,MAAN,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAA3B,EAA8B,CAA9B,IAAmCN,KAAK,CAACR,MAAhD;AACH;;AAEDM,EAAAA,kBAAkB,GAAI;AAClB,QAAIS,MAAM,GAAG,KAAKvB,UAAL,CAAgB,KAAKA,UAAL,CAAgBQ,MAAhB,GAAyB,CAAzC,CAAb;AACA,QAAIgB,KAAK,GAAG,KAAKxB,UAAL,CAAgB,KAAKA,UAAL,CAAgBQ,MAAhB,GAAyB,CAAzC,CAAZ;AAEA,WAAQiB,CAAD,IAAO;AACV,UAAIC,MAAM,GAAGH,MAAM,CAAC,CAAD,CAAN,CAAUI,GAAV,CAAc,CAACC,IAAD,EAAOC,KAAP,KAAiBD,IAAI,GAAGJ,KAAK,CAAC,CAAD,CAAL,CAASK,KAAT,CAAtC,CAAb,CADU,CAEV;;AACA,UAAIC,MAAM,GAAGJ,MAAM,CAACC,GAAP,CAAWC,IAAI,IAAIA,IAAI,IAAIL,MAAM,CAAC,CAAD,CAAN,GAAYC,KAAK,CAAC,CAAD,CAArB,CAAvB,CAAb;AACA,UAAIO,SAAS,GAAGP,KAAK,CAAC,CAAD,CAArB;AAEA,aAAOM,MAAM,CAACH,GAAP,CAAW,CAACC,IAAD,EAAOC,KAAP,KAAiBD,IAAI,GAAGH,CAAP,GAAWM,SAAS,CAACF,KAAD,CAAhD,CAAP;AACH,KAPD;AAQH;;AA1Dc;;AA6DnB,eAAejC,YAAf","sourcesContent":["class Interpolator {\n    constructor () {\n        this.previousData = 0;\n        this.currentData = 0;\n\n\n        this.dataPoints = [[new Date().getTime(), 0]];\n    }\n\n    addDataPoint (data) {\n        // console.log(this.dataPoints)\n        console.log(this.dataPoints)\n        this.dataPoints.push([new Date().getTime(), data]);\n        while (this.dataPoints.length > 20) {\n            this.dataPoints.shift();\n        }\n        \n    }\n\n    interpolate (timeStamp) {\n        // let latest = this.dataPoints[this.dataPoints.length - 1][0];\n        // let diff = timeStamp - latest;\n\n        let averageDiff = this.getAverageDeltaTime();\n\n        // let progress = diff / averageDiff;\n\n        return this.getLatestPairSlope()(timeStamp - averageDiff)\n    }\n\n    getAverageDeltaTime () {\n        let previous = this.dataPoints[0][0];\n        let diffs = [];\n\n        for (let i = 1; i < this.dataPoints.length; i++) {\n            let current = this.dataPoints[i][0];\n            \n            let diff = current - previous;\n            diffs.push(diff);\n\n            previous = current;\n        }\n\n        return diffs.reduce((a, b) => a + b, 0) / diffs.length;\n    }\n\n    getLatestPairSlope () {\n        let latest = this.dataPoints[this.dataPoints.length - 1]\n        let other = this.dataPoints[this.dataPoints.length - 2]\n\n        return (x) => {\n            let yDiffs = latest[1].map((item, index) => item - other[1][index]);\n            // let k = (latest[1] - other[1]) / (latest[0] - other[0]);\n            let slopes = yDiffs.map(item => item / (latest[0] - other[0]))\n            let constants = other[1];\n\n            return slopes.map((item, index) => item * x + constants[index]);\n        }\n    }\n}\n\nexport default Interpolator;"]},"metadata":{},"sourceType":"module"}