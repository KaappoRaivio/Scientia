{"ast":null,"code":"import { containsCollections, deepForEach, reduce } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nimport { improveErrorMessage } from './utils/improveErrorMessage';\nvar name = 'min';\nvar dependencies = ['typed', 'smaller'];\nexport var createMin = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      smaller = _ref.smaller;\n  /**\n   * Compute the minimum value of a matrix or a  list of values.\n   * In case of a multi dimensional array, the minimum of the flattened array\n   * will be calculated. When `dim` is provided, the minimum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.min(a, b, c, ...)\n   *     math.min(A)\n   *     math.min(A, dim)\n   *\n   * Examples:\n   *\n   *     math.min(2, 1, 4, 3)                  // returns 1\n   *     math.min([2, 1, 4, 3])                // returns 1\n   *\n   *     // minimum over a specified dimension (zero-based)\n   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]\n   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, max, prod, std, sum, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The minimum value\n   */\n\n  return typed(name, {\n    // min([a, b, c, d, ...])\n    'Array | Matrix': _min,\n    // min([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _smallest);\n    },\n    // min(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function min');\n      }\n\n      return _min(args);\n    }\n  });\n  /**\n   * Return the smallest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is smallest, or y when y is smallest\n   * @private\n   */\n\n  function _smallest(x, y) {\n    try {\n      return smaller(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'min', y);\n    }\n  }\n  /**\n   * Recursively calculate the minimum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} min\n   * @private\n   */\n\n\n  function _min(array) {\n    var min;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          min = NaN;\n        } else if (min === undefined || smaller(value, min)) {\n          min = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'min', value);\n      }\n    });\n\n    if (min === undefined) {\n      throw new Error('Cannot calculate min of an empty array');\n    }\n\n    return min;\n  }\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/statistics/min.js"],"names":["containsCollections","deepForEach","reduce","factory","improveErrorMessage","name","dependencies","createMin","_ref","typed","smaller","_min","ArrayMatrixNumberBigNumber","array","dim","valueOf","_smallest","_","args","TypeError","x","y","err","min","value","isNaN","NaN","undefined","Error"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,WAA9B,EAA2CC,MAA3C,QAAyD,wBAAzD;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,mBAAT,QAAoC,6BAApC;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,SAAV,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAChF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,OAAO,GAAGF,IAAI,CAACE,OADnB;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,SAAOD,KAAK,CAACJ,IAAD,EAAO;AACjB;AACA,sBAAkBM,IAFD;AAGjB;AACA,0CAAsC,SAASC,0BAAT,CAAoCC,KAApC,EAA2CC,GAA3C,EAAgD;AACpF,aAAOZ,MAAM,CAACW,KAAD,EAAQC,GAAG,CAACC,OAAJ,EAAR,EAAuBC,SAAvB,CAAb;AACD,KANgB;AAOjB;AACA,WAAO,SAASC,CAAT,CAAWC,IAAX,EAAiB;AACtB,UAAIlB,mBAAmB,CAACkB,IAAD,CAAvB,EAA+B;AAC7B,cAAM,IAAIC,SAAJ,CAAc,wCAAd,CAAN;AACD;;AAED,aAAOR,IAAI,CAACO,IAAD,CAAX;AACD;AAdgB,GAAP,CAAZ;AAgBA;;;;;;;;AAQA,WAASF,SAAT,CAAmBI,CAAnB,EAAsBC,CAAtB,EAAyB;AACvB,QAAI;AACF,aAAOX,OAAO,CAACU,CAAD,EAAIC,CAAJ,CAAP,GAAgBD,CAAhB,GAAoBC,CAA3B;AACD,KAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,YAAMlB,mBAAmB,CAACkB,GAAD,EAAM,KAAN,EAAaD,CAAb,CAAzB;AACD;AACF;AACD;;;;;;;;AAQA,WAASV,IAAT,CAAcE,KAAd,EAAqB;AACnB,QAAIU,GAAJ;AACAtB,IAAAA,WAAW,CAACY,KAAD,EAAQ,UAAUW,KAAV,EAAiB;AAClC,UAAI;AACF,YAAIC,KAAK,CAACD,KAAD,CAAL,IAAgB,OAAOA,KAAP,KAAiB,QAArC,EAA+C;AAC7CD,UAAAA,GAAG,GAAGG,GAAN;AACD,SAFD,MAEO,IAAIH,GAAG,KAAKI,SAAR,IAAqBjB,OAAO,CAACc,KAAD,EAAQD,GAAR,CAAhC,EAA8C;AACnDA,UAAAA,GAAG,GAAGC,KAAN;AACD;AACF,OAND,CAME,OAAOF,GAAP,EAAY;AACZ,cAAMlB,mBAAmB,CAACkB,GAAD,EAAM,KAAN,EAAaE,KAAb,CAAzB;AACD;AACF,KAVU,CAAX;;AAYA,QAAID,GAAG,KAAKI,SAAZ,EAAuB;AACrB,YAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAED,WAAOL,GAAP;AACD;AACF,CA9F4C,CAAtC","sourcesContent":["import { containsCollections, deepForEach, reduce } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nimport { improveErrorMessage } from './utils/improveErrorMessage';\nvar name = 'min';\nvar dependencies = ['typed', 'smaller'];\nexport var createMin = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      smaller = _ref.smaller;\n\n  /**\n   * Compute the minimum value of a matrix or a  list of values.\n   * In case of a multi dimensional array, the minimum of the flattened array\n   * will be calculated. When `dim` is provided, the minimum over the selected\n   * dimension will be calculated. Parameter `dim` is zero-based.\n   *\n   * Syntax:\n   *\n   *     math.min(a, b, c, ...)\n   *     math.min(A)\n   *     math.min(A, dim)\n   *\n   * Examples:\n   *\n   *     math.min(2, 1, 4, 3)                  // returns 1\n   *     math.min([2, 1, 4, 3])                // returns 1\n   *\n   *     // minimum over a specified dimension (zero-based)\n   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]\n   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]\n   *\n   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1\n   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5\n   *\n   * See also:\n   *\n   *    mean, median, max, prod, std, sum, variance\n   *\n   * @param {... *} args  A single matrix or or multiple scalar values\n   * @return {*} The minimum value\n   */\n  return typed(name, {\n    // min([a, b, c, d, ...])\n    'Array | Matrix': _min,\n    // min([a, b, c, d, ...], dim)\n    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {\n      return reduce(array, dim.valueOf(), _smallest);\n    },\n    // min(a, b, c, d, ...)\n    '...': function _(args) {\n      if (containsCollections(args)) {\n        throw new TypeError('Scalar values expected in function min');\n      }\n\n      return _min(args);\n    }\n  });\n  /**\n   * Return the smallest of two values\n   * @param {*} x\n   * @param {*} y\n   * @returns {*} Returns x when x is smallest, or y when y is smallest\n   * @private\n   */\n\n  function _smallest(x, y) {\n    try {\n      return smaller(x, y) ? x : y;\n    } catch (err) {\n      throw improveErrorMessage(err, 'min', y);\n    }\n  }\n  /**\n   * Recursively calculate the minimum value in an n-dimensional array\n   * @param {Array} array\n   * @return {number} min\n   * @private\n   */\n\n\n  function _min(array) {\n    var min;\n    deepForEach(array, function (value) {\n      try {\n        if (isNaN(value) && typeof value === 'number') {\n          min = NaN;\n        } else if (min === undefined || smaller(value, min)) {\n          min = value;\n        }\n      } catch (err) {\n        throw improveErrorMessage(err, 'min', value);\n      }\n    });\n\n    if (min === undefined) {\n      throw new Error('Cannot calculate min of an empty array');\n    }\n\n    return min;\n  }\n});"]},"metadata":{},"sourceType":"module"}