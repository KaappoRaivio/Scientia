{"ast":null,"code":"import { isSparseMatrix } from '../../utils/is';\nimport { format } from '../../utils/string';\nimport { factory } from '../../utils/factory';\nvar name = 'expm';\nvar dependencies = ['typed', 'abs', 'add', 'identity', 'inv', 'multiply'];\nexport var createExpm = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      abs = _ref.abs,\n      add = _ref.add,\n      identity = _ref.identity,\n      inv = _ref.inv,\n      multiply = _ref.multiply;\n  /**\n   * Compute the matrix exponential, expm(A) = e^A. The matrix must be square.\n   * Not to be confused with exp(a), which performs element-wise\n   * exponentiation.\n   *\n   * The exponential is calculated using the Padé approximant with scaling and\n   * squaring; see \"Nineteen Dubious Ways to Compute the Exponential of a\n   * Matrix,\" by Moler and Van Loan.\n   *\n   * Syntax:\n   *\n   *     math.expm(x)\n   *\n   * Examples:\n   *\n   *     const A = [[0,2],[0,0]]\n   *     math.expm(A)        // returns [[1,2],[0,1]]\n   *\n   * See also:\n   *\n   *     exp\n   *\n   * @param {Matrix} x  A square Matrix\n   * @return {Matrix}   The exponential of x\n   */\n\n  return typed(name, {\n    Matrix: function Matrix(A) {\n      // Check matrix size\n      var size = A.size();\n\n      if (size.length !== 2 || size[0] !== size[1]) {\n        throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n      }\n\n      var n = size[0]; // Desired accuracy of the approximant (The actual accuracy\n      // will be affected by round-off error)\n\n      var eps = 1e-15; // The Padé approximant is not so accurate when the values of A\n      // are \"large\", so scale A by powers of two. Then compute the\n      // exponential, and square the result repeatedly according to\n      // the identity e^A = (e^(A/m))^m\n      // Compute infinity-norm of A, ||A||, to see how \"big\" it is\n\n      var infNorm = infinityNorm(A); // Find the optimal scaling factor and number of terms in the\n      // Padé approximant to reach the desired accuracy\n\n      var params = findParams(infNorm, eps);\n      var q = params.q;\n      var j = params.j; // The Pade approximation to e^A is:\n      // Rqq(A) = Dqq(A) ^ -1 * Nqq(A)\n      // where\n      // Nqq(A) = sum(i=0, q, (2q-i)!p! / [ (2q)!i!(q-i)! ] A^i\n      // Dqq(A) = sum(i=0, q, (2q-i)!q! / [ (2q)!i!(q-i)! ] (-A)^i\n      // Scale A by 1 / 2^j\n\n      var Apos = multiply(A, Math.pow(2, -j)); // The i=0 term is just the identity matrix\n\n      var N = identity(n);\n      var D = identity(n); // Initialization (i=0)\n\n      var factor = 1; // Initialization (i=1)\n\n      var AposToI = Apos; // Cloning not necessary\n\n      var alternate = -1;\n\n      for (var i = 1; i <= q; i++) {\n        if (i > 1) {\n          AposToI = multiply(AposToI, Apos);\n          alternate = -alternate;\n        }\n\n        factor = factor * (q - i + 1) / ((2 * q - i + 1) * i);\n        N = add(N, multiply(factor, AposToI));\n        D = add(D, multiply(factor * alternate, AposToI));\n      }\n\n      var R = multiply(inv(D), N); // Square j times\n\n      for (var _i = 0; _i < j; _i++) {\n        R = multiply(R, R);\n      }\n\n      return isSparseMatrix(A) ? A.createSparseMatrix(R) : R;\n    }\n  });\n\n  function infinityNorm(A) {\n    var n = A.size()[0];\n    var infNorm = 0;\n\n    for (var i = 0; i < n; i++) {\n      var rowSum = 0;\n\n      for (var j = 0; j < n; j++) {\n        rowSum += abs(A.get([i, j]));\n      }\n\n      infNorm = Math.max(rowSum, infNorm);\n    }\n\n    return infNorm;\n  }\n  /**\n   * Find the best parameters for the Pade approximant given\n   * the matrix norm and desired accuracy. Returns the first acceptable\n   * combination in order of increasing computational load.\n   */\n\n\n  function findParams(infNorm, eps) {\n    var maxSearchSize = 30;\n\n    for (var k = 0; k < maxSearchSize; k++) {\n      for (var q = 0; q <= k; q++) {\n        var j = k - q;\n\n        if (errorEstimate(infNorm, q, j) < eps) {\n          return {\n            q: q,\n            j: j\n          };\n        }\n      }\n    }\n\n    throw new Error('Could not find acceptable parameters to compute the matrix exponential (try increasing maxSearchSize in expm.js)');\n  }\n  /**\n   * Returns the estimated error of the Pade approximant for the given\n   * parameters.\n   */\n\n\n  function errorEstimate(infNorm, q, j) {\n    var qfac = 1;\n\n    for (var i = 2; i <= q; i++) {\n      qfac *= i;\n    }\n\n    var twoqfac = qfac;\n\n    for (var _i2 = q + 1; _i2 <= 2 * q; _i2++) {\n      twoqfac *= _i2;\n    }\n\n    var twoqp1fac = twoqfac * (2 * q + 1);\n    return 8.0 * Math.pow(infNorm / Math.pow(2, j), 2 * q) * qfac * qfac / (twoqfac * twoqp1fac);\n  }\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/matrix/expm.js"],"names":["isSparseMatrix","format","factory","name","dependencies","createExpm","_ref","typed","abs","add","identity","inv","multiply","Matrix","A","size","length","RangeError","n","eps","infNorm","infinityNorm","params","findParams","q","j","Apos","Math","pow","N","D","factor","AposToI","alternate","i","R","_i","createSparseMatrix","rowSum","get","max","maxSearchSize","k","errorEstimate","Error","qfac","twoqfac","_i2","twoqp1fac"],"mappings":"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","sourcesContent":["import { isSparseMatrix } from '../../utils/is';\nimport { format } from '../../utils/string';\nimport { factory } from '../../utils/factory';\nvar name = 'expm';\nvar dependencies = ['typed', 'abs', 'add', 'identity', 'inv', 'multiply'];\nexport var createExpm = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      abs = _ref.abs,\n      add = _ref.add,\n      identity = _ref.identity,\n      inv = _ref.inv,\n      multiply = _ref.multiply;\n\n  /**\n   * Compute the matrix exponential, expm(A) = e^A. The matrix must be square.\n   * Not to be confused with exp(a), which performs element-wise\n   * exponentiation.\n   *\n   * The exponential is calculated using the Padé approximant with scaling and\n   * squaring; see \"Nineteen Dubious Ways to Compute the Exponential of a\n   * Matrix,\" by Moler and Van Loan.\n   *\n   * Syntax:\n   *\n   *     math.expm(x)\n   *\n   * Examples:\n   *\n   *     const A = [[0,2],[0,0]]\n   *     math.expm(A)        // returns [[1,2],[0,1]]\n   *\n   * See also:\n   *\n   *     exp\n   *\n   * @param {Matrix} x  A square Matrix\n   * @return {Matrix}   The exponential of x\n   */\n  return typed(name, {\n    Matrix: function Matrix(A) {\n      // Check matrix size\n      var size = A.size();\n\n      if (size.length !== 2 || size[0] !== size[1]) {\n        throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n      }\n\n      var n = size[0]; // Desired accuracy of the approximant (The actual accuracy\n      // will be affected by round-off error)\n\n      var eps = 1e-15; // The Padé approximant is not so accurate when the values of A\n      // are \"large\", so scale A by powers of two. Then compute the\n      // exponential, and square the result repeatedly according to\n      // the identity e^A = (e^(A/m))^m\n      // Compute infinity-norm of A, ||A||, to see how \"big\" it is\n\n      var infNorm = infinityNorm(A); // Find the optimal scaling factor and number of terms in the\n      // Padé approximant to reach the desired accuracy\n\n      var params = findParams(infNorm, eps);\n      var q = params.q;\n      var j = params.j; // The Pade approximation to e^A is:\n      // Rqq(A) = Dqq(A) ^ -1 * Nqq(A)\n      // where\n      // Nqq(A) = sum(i=0, q, (2q-i)!p! / [ (2q)!i!(q-i)! ] A^i\n      // Dqq(A) = sum(i=0, q, (2q-i)!q! / [ (2q)!i!(q-i)! ] (-A)^i\n      // Scale A by 1 / 2^j\n\n      var Apos = multiply(A, Math.pow(2, -j)); // The i=0 term is just the identity matrix\n\n      var N = identity(n);\n      var D = identity(n); // Initialization (i=0)\n\n      var factor = 1; // Initialization (i=1)\n\n      var AposToI = Apos; // Cloning not necessary\n\n      var alternate = -1;\n\n      for (var i = 1; i <= q; i++) {\n        if (i > 1) {\n          AposToI = multiply(AposToI, Apos);\n          alternate = -alternate;\n        }\n\n        factor = factor * (q - i + 1) / ((2 * q - i + 1) * i);\n        N = add(N, multiply(factor, AposToI));\n        D = add(D, multiply(factor * alternate, AposToI));\n      }\n\n      var R = multiply(inv(D), N); // Square j times\n\n      for (var _i = 0; _i < j; _i++) {\n        R = multiply(R, R);\n      }\n\n      return isSparseMatrix(A) ? A.createSparseMatrix(R) : R;\n    }\n  });\n\n  function infinityNorm(A) {\n    var n = A.size()[0];\n    var infNorm = 0;\n\n    for (var i = 0; i < n; i++) {\n      var rowSum = 0;\n\n      for (var j = 0; j < n; j++) {\n        rowSum += abs(A.get([i, j]));\n      }\n\n      infNorm = Math.max(rowSum, infNorm);\n    }\n\n    return infNorm;\n  }\n  /**\n   * Find the best parameters for the Pade approximant given\n   * the matrix norm and desired accuracy. Returns the first acceptable\n   * combination in order of increasing computational load.\n   */\n\n\n  function findParams(infNorm, eps) {\n    var maxSearchSize = 30;\n\n    for (var k = 0; k < maxSearchSize; k++) {\n      for (var q = 0; q <= k; q++) {\n        var j = k - q;\n\n        if (errorEstimate(infNorm, q, j) < eps) {\n          return {\n            q: q,\n            j: j\n          };\n        }\n      }\n    }\n\n    throw new Error('Could not find acceptable parameters to compute the matrix exponential (try increasing maxSearchSize in expm.js)');\n  }\n  /**\n   * Returns the estimated error of the Pade approximant for the given\n   * parameters.\n   */\n\n\n  function errorEstimate(infNorm, q, j) {\n    var qfac = 1;\n\n    for (var i = 2; i <= q; i++) {\n      qfac *= i;\n    }\n\n    var twoqfac = qfac;\n\n    for (var _i2 = q + 1; _i2 <= 2 * q; _i2++) {\n      twoqfac *= _i2;\n    }\n\n    var twoqp1fac = twoqfac * (2 * q + 1);\n    return 8.0 * Math.pow(infNorm / Math.pow(2, j), 2 * q) * qfac * qfac / (twoqfac * twoqp1fac);\n  }\n});"]},"metadata":{},"sourceType":"module"}