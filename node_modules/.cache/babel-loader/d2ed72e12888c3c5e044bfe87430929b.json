{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { cotNumber } from '../../plain/number';\nvar name = 'cot';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCot = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      _BigNumber = _ref.BigNumber;\n  /**\n   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cot(x)\n   *\n   * Examples:\n   *\n   *    math.cot(2)      // returns number -0.45765755436028577\n   *    1 / math.tan(2)  // returns number -0.45765755436028577\n   *\n   * See also:\n   *\n   *    tan, sec, csc\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Cotangent of x\n   */\n\n  var cot = typed(name, {\n    number: cotNumber,\n    Complex: function Complex(x) {\n      return x.cot();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x.tan());\n    },\n    Unit: function Unit(x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function cot is no angle');\n      }\n\n      return cot(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, cot);\n    }\n  });\n  return cot;\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/trigonometry/cot.js"],"names":["factory","deepMap","cotNumber","name","dependencies","createCot","_ref","typed","_BigNumber","BigNumber","cot","number","Complex","x","div","tan","Unit","hasBase","constructor","BASE_UNITS","ANGLE","TypeError","value","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAChF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,UAAU,GAAGF,IAAI,CAACG,SADtB;AAGA;;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAIC,GAAG,GAAGH,KAAK,CAACJ,IAAD,EAAO;AACpBQ,IAAAA,MAAM,EAAET,SADY;AAEpBU,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACH,GAAF,EAAP;AACD,KAJmB;AAKpBD,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBI,CAAnB,EAAsB;AAC/B,aAAO,IAAIL,UAAJ,CAAe,CAAf,EAAkBM,GAAlB,CAAsBD,CAAC,CAACE,GAAF,EAAtB,CAAP;AACD,KAPmB;AAQpBC,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAcH,CAAd,EAAiB;AACrB,UAAI,CAACA,CAAC,CAACI,OAAF,CAAUJ,CAAC,CAACK,WAAF,CAAcC,UAAd,CAAyBC,KAAnC,CAAL,EAAgD;AAC9C,cAAM,IAAIC,SAAJ,CAAc,kCAAd,CAAN;AACD;;AAED,aAAOX,GAAG,CAACG,CAAC,CAACS,KAAH,CAAV;AACD,KAdmB;AAepB,sBAAkB,SAASC,WAAT,CAAqBV,CAArB,EAAwB;AACxC,aAAOZ,OAAO,CAACY,CAAD,EAAIH,GAAJ,CAAd;AACD;AAjBmB,GAAP,CAAf;AAmBA,SAAOA,GAAP;AACD,CA7C4C,CAAtC","sourcesContent":["import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { cotNumber } from '../../plain/number';\nvar name = 'cot';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCot = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      _BigNumber = _ref.BigNumber;\n\n  /**\n   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cot(x)\n   *\n   * Examples:\n   *\n   *    math.cot(2)      // returns number -0.45765755436028577\n   *    1 / math.tan(2)  // returns number -0.45765755436028577\n   *\n   * See also:\n   *\n   *    tan, sec, csc\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Cotangent of x\n   */\n  var cot = typed(name, {\n    number: cotNumber,\n    Complex: function Complex(x) {\n      return x.cot();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x.tan());\n    },\n    Unit: function Unit(x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function cot is no angle');\n      }\n\n      return cot(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, cot);\n    }\n  });\n  return cot;\n});"]},"metadata":{},"sourceType":"module"}