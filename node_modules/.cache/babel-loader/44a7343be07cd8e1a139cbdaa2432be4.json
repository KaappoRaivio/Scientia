{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nvar name = 'to';\nvar dependencies = ['typed', 'matrix'];\nexport var createTo = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix;\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Change the unit of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.to(x, unit)\n   *\n   * Examples:\n   *\n   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm\n   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm\n   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits\n   *\n   * See also:\n   *\n   *    unit\n   *\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n   *                                      or a unit without value.\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\n   */\n\n  var to = typed(name, {\n    'Unit, Unit | string': function UnitUnitString(x, unit) {\n      return x.to(unit);\n    },\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm13(x, y, to);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return to(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return to(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return to(x, matrix(y));\n    },\n    'Matrix, any': function MatrixAny(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(x, y, to, false);\n    },\n    'any, Matrix': function anyMatrix(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(y, x, to, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, to, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, to, true).valueOf();\n    }\n  });\n  return to;\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/unit/to.js"],"names":["factory","createAlgorithm13","createAlgorithm14","name","dependencies","createTo","_ref","typed","matrix","algorithm13","algorithm14","to","UnitUnitString","x","unit","MatrixMatrix","y","ArrayArray","valueOf","ArrayMatrix","MatrixArray","MatrixAny","anyMatrix","ArrayAny","anyArray"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AACA,IAAIC,IAAI,GAAG,IAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,CAAnB;AACA,OAAO,IAAIC,QAAQ,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AAC/E,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAEA,MAAIC,WAAW,GAAGR,iBAAiB,CAAC;AAClCM,IAAAA,KAAK,EAAEA;AAD2B,GAAD,CAAnC;AAGA,MAAIG,WAAW,GAAGR,iBAAiB,CAAC;AAClCK,IAAAA,KAAK,EAAEA;AAD2B,GAAD,CAAnC;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,MAAII,EAAE,GAAGJ,KAAK,CAACJ,IAAD,EAAO;AACnB,2BAAuB,SAASS,cAAT,CAAwBC,CAAxB,EAA2BC,IAA3B,EAAiC;AACtD,aAAOD,CAAC,CAACF,EAAF,CAAKG,IAAL,CAAP;AACD,KAHkB;AAInB,sBAAkB,SAASC,YAAT,CAAsBF,CAAtB,EAAyBG,CAAzB,EAA4B;AAC5C;AACA,aAAOP,WAAW,CAACI,CAAD,EAAIG,CAAJ,EAAOL,EAAP,CAAlB;AACD,KAPkB;AAQnB,oBAAgB,SAASM,UAAT,CAAoBJ,CAApB,EAAuBG,CAAvB,EAA0B;AACxC;AACA,aAAOL,EAAE,CAACH,MAAM,CAACK,CAAD,CAAP,EAAYL,MAAM,CAACQ,CAAD,CAAlB,CAAF,CAAyBE,OAAzB,EAAP;AACD,KAXkB;AAYnB,qBAAiB,SAASC,WAAT,CAAqBN,CAArB,EAAwBG,CAAxB,EAA2B;AAC1C;AACA,aAAOL,EAAE,CAACH,MAAM,CAACK,CAAD,CAAP,EAAYG,CAAZ,CAAT;AACD,KAfkB;AAgBnB,qBAAiB,SAASI,WAAT,CAAqBP,CAArB,EAAwBG,CAAxB,EAA2B;AAC1C;AACA,aAAOL,EAAE,CAACE,CAAD,EAAIL,MAAM,CAACQ,CAAD,CAAV,CAAT;AACD,KAnBkB;AAoBnB,mBAAe,SAASK,SAAT,CAAmBR,CAAnB,EAAsBG,CAAtB,EAAyB;AACtC;AACA,aAAON,WAAW,CAACG,CAAD,EAAIG,CAAJ,EAAOL,EAAP,EAAW,KAAX,CAAlB;AACD,KAvBkB;AAwBnB,mBAAe,SAASW,SAAT,CAAmBT,CAAnB,EAAsBG,CAAtB,EAAyB;AACtC;AACA,aAAON,WAAW,CAACM,CAAD,EAAIH,CAAJ,EAAOF,EAAP,EAAW,IAAX,CAAlB;AACD,KA3BkB;AA4BnB,kBAAc,SAASY,QAAT,CAAkBV,CAAlB,EAAqBG,CAArB,EAAwB;AACpC;AACA,aAAON,WAAW,CAACF,MAAM,CAACK,CAAD,CAAP,EAAYG,CAAZ,EAAeL,EAAf,EAAmB,KAAnB,CAAX,CAAqCO,OAArC,EAAP;AACD,KA/BkB;AAgCnB,kBAAc,SAASM,QAAT,CAAkBX,CAAlB,EAAqBG,CAArB,EAAwB;AACpC;AACA,aAAON,WAAW,CAACF,MAAM,CAACQ,CAAD,CAAP,EAAYH,CAAZ,EAAeF,EAAf,EAAmB,IAAnB,CAAX,CAAoCO,OAApC,EAAP;AACD;AAnCkB,GAAP,CAAd;AAqCA,SAAOP,EAAP;AACD,CAxE2C,CAArC","sourcesContent":["import { factory } from '../../utils/factory';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nvar name = 'to';\nvar dependencies = ['typed', 'matrix'];\nexport var createTo = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix;\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Change the unit of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.to(x, unit)\n   *\n   * Examples:\n   *\n   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm\n   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm\n   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits\n   *\n   * See also:\n   *\n   *    unit\n   *\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n   *                                      or a unit without value.\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\n   */\n\n  var to = typed(name, {\n    'Unit, Unit | string': function UnitUnitString(x, unit) {\n      return x.to(unit);\n    },\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm13(x, y, to);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return to(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return to(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return to(x, matrix(y));\n    },\n    'Matrix, any': function MatrixAny(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(x, y, to, false);\n    },\n    'any, Matrix': function anyMatrix(x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(y, x, to, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, to, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, to, true).valueOf();\n    }\n  });\n  return to;\n});"]},"metadata":{},"sourceType":"module"}