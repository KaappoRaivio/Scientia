{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm09 } from '../../type/matrix/utils/algorithm09';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nvar name = 'atan2';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\nexport var createAtan2 = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      BigNumber = _ref.BigNumber,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm02 = createAlgorithm02({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm03 = createAlgorithm03({\n    typed: typed\n  });\n  var algorithm09 = createAlgorithm09({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm12 = createAlgorithm12({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Calculate the inverse tangent function with two arguments, y/x.\n   * By providing two arguments, the right quadrant of the computed angle can be\n   * determined.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.atan2(y, x)\n   *\n   * Examples:\n   *\n   *    math.atan2(2, 2) / math.pi       // returns number 0.25\n   *\n   *    const angle = math.unit(60, 'deg') // returns Unit 60 deg\n   *    const x = math.cos(angle)\n   *    const y = math.sin(angle)\n   *\n   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    tan, atan, sin, cos\n   *\n   * @param {number | Array | Matrix} y  Second dimension\n   * @param {number | Array | Matrix} x  First dimension\n   * @return {number | Array | Matrix} Four-quadrant inverse tangent\n   */\n\n  var atan2 = typed(name, {\n    'number, number': Math.atan2,\n    // Complex numbers doesn't seem to have a reasonable implementation of\n    // atan2(). Even Matlab removed the support, after they only calculated\n    // the atan only on base of the real part of the numbers and ignored the imaginary.\n    'BigNumber, BigNumber': function BigNumberBigNumber(y, x) {\n      return BigNumber.atan2(y, x);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm09(x, y, atan2, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      // mind the order of y and x!\n      return algorithm02(y, x, atan2, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, atan2, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, atan2);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      return atan2(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      return atan2(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      return atan2(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, atan2, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, atan2, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      // mind the order of y and x\n      return algorithm12(y, x, atan2, true);\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      // mind the order of y and x\n      return algorithm14(y, x, atan2, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      return algorithm14(matrix(x), y, atan2, false).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      return algorithm14(matrix(y), x, atan2, true).valueOf();\n    }\n  });\n  return atan2;\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/trigonometry/atan2.js"],"names":["factory","createAlgorithm02","createAlgorithm03","createAlgorithm09","createAlgorithm11","createAlgorithm12","createAlgorithm13","createAlgorithm14","name","dependencies","createAtan2","_ref","typed","matrix","equalScalar","BigNumber","DenseMatrix","algorithm02","algorithm03","algorithm09","algorithm11","algorithm12","algorithm13","algorithm14","atan2","Math","BigNumberBigNumber","y","x","SparseMatrixSparseMatrix","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixNumberBigNumber","DenseMatrixNumberBigNumber","numberBigNumberSparseMatrix","numberBigNumberDenseMatrix","ArrayNumberBigNumber","numberBigNumberArray"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm09 } from '../../type/matrix/utils/algorithm09';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nvar name = 'atan2';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\nexport var createAtan2 = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      BigNumber = _ref.BigNumber,\n      DenseMatrix = _ref.DenseMatrix;\n  var algorithm02 = createAlgorithm02({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm03 = createAlgorithm03({\n    typed: typed\n  });\n  var algorithm09 = createAlgorithm09({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm12 = createAlgorithm12({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Calculate the inverse tangent function with two arguments, y/x.\n   * By providing two arguments, the right quadrant of the computed angle can be\n   * determined.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.atan2(y, x)\n   *\n   * Examples:\n   *\n   *    math.atan2(2, 2) / math.pi       // returns number 0.25\n   *\n   *    const angle = math.unit(60, 'deg') // returns Unit 60 deg\n   *    const x = math.cos(angle)\n   *    const y = math.sin(angle)\n   *\n   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    tan, atan, sin, cos\n   *\n   * @param {number | Array | Matrix} y  Second dimension\n   * @param {number | Array | Matrix} x  First dimension\n   * @return {number | Array | Matrix} Four-quadrant inverse tangent\n   */\n\n  var atan2 = typed(name, {\n    'number, number': Math.atan2,\n    // Complex numbers doesn't seem to have a reasonable implementation of\n    // atan2(). Even Matlab removed the support, after they only calculated\n    // the atan only on base of the real part of the numbers and ignored the imaginary.\n    'BigNumber, BigNumber': function BigNumberBigNumber(y, x) {\n      return BigNumber.atan2(y, x);\n    },\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm09(x, y, atan2, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      // mind the order of y and x!\n      return algorithm02(y, x, atan2, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm03(x, y, atan2, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, atan2);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      return atan2(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      return atan2(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      return atan2(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, atan2, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, atan2, false);\n    },\n    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {\n      // mind the order of y and x\n      return algorithm12(y, x, atan2, true);\n    },\n    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {\n      // mind the order of y and x\n      return algorithm14(y, x, atan2, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      return algorithm14(matrix(x), y, atan2, false).valueOf();\n    },\n    'number | BigNumber, Array': function numberBigNumberArray(x, y) {\n      return algorithm14(matrix(y), x, atan2, true).valueOf();\n    }\n  });\n  return atan2;\n});"]},"metadata":{},"sourceType":"module"}