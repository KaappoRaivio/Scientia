{"ast":null,"code":"import { flatten, identify } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nvar name = 'setIsSubset';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nexport var createSetIsSubset = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index;\n  /**\n   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIsSubset(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false\n   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {boolean}            true | false\n   */\n\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty is a subset of anything\n        return true;\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything is not a subset of empty\n        return false;\n      }\n\n      var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n      var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n      var inb2;\n\n      for (var i = 0; i < b1.length; i++) {\n        inb2 = false;\n\n        for (var j = 0; j < b2.length; j++) {\n          if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n            // the identifier is always a decimal int\n            inb2 = true;\n            break;\n          }\n        }\n\n        if (inb2 === false) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  });\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/set/setIsSubset.js"],"names":["flatten","identify","factory","name","dependencies","createSetIsSubset","_ref","typed","size","subset","compareNatural","Index","ArrayMatrixArrayMatrix","a1","a2","b1","Array","isArray","toArray","sort","b2","inb2","i","length","j","value","identifier"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,mBAAlC;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,aAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,EAA4B,gBAA5B,EAA8C,OAA9C,CAAnB;AACA,OAAO,IAAIC,iBAAiB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACxF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,IAAI,GAAGF,IAAI,CAACE,IADhB;AAAA,MAEIC,MAAM,GAAGH,IAAI,CAACG,MAFlB;AAAA,MAGIC,cAAc,GAAGJ,IAAI,CAACI,cAH1B;AAAA,MAIIC,KAAK,GAAGL,IAAI,CAACK,KAJjB;AAMA;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAAOJ,KAAK,CAACJ,IAAD,EAAO;AACjB,sCAAkC,SAASS,sBAAT,CAAgCC,EAAhC,EAAoCC,EAApC,EAAwC;AACxE,UAAIL,MAAM,CAACD,IAAI,CAACK,EAAD,CAAL,EAAW,IAAIF,KAAJ,CAAU,CAAV,CAAX,CAAN,KAAmC,CAAvC,EAA0C;AACxC;AACA,eAAO,IAAP;AACD,OAHD,MAGO,IAAIF,MAAM,CAACD,IAAI,CAACM,EAAD,CAAL,EAAW,IAAIH,KAAJ,CAAU,CAAV,CAAX,CAAN,KAAmC,CAAvC,EAA0C;AAC/C;AACA,eAAO,KAAP;AACD;;AAED,UAAII,EAAE,GAAGd,QAAQ,CAACD,OAAO,CAACgB,KAAK,CAACC,OAAN,CAAcJ,EAAd,IAAoBA,EAApB,GAAyBA,EAAE,CAACK,OAAH,EAA1B,CAAP,CAA+CC,IAA/C,CAAoDT,cAApD,CAAD,CAAjB;AACA,UAAIU,EAAE,GAAGnB,QAAQ,CAACD,OAAO,CAACgB,KAAK,CAACC,OAAN,CAAcH,EAAd,IAAoBA,EAApB,GAAyBA,EAAE,CAACI,OAAH,EAA1B,CAAP,CAA+CC,IAA/C,CAAoDT,cAApD,CAAD,CAAjB;AACA,UAAIW,IAAJ;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,EAAE,CAACQ,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAClCD,QAAAA,IAAI,GAAG,KAAP;;AAEA,aAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,EAAE,CAACG,MAAvB,EAA+BC,CAAC,EAAhC,EAAoC;AAClC,cAAId,cAAc,CAACK,EAAE,CAACO,CAAD,CAAF,CAAMG,KAAP,EAAcL,EAAE,CAACI,CAAD,CAAF,CAAMC,KAApB,CAAd,KAA6C,CAA7C,IAAkDV,EAAE,CAACO,CAAD,CAAF,CAAMI,UAAN,KAAqBN,EAAE,CAACI,CAAD,CAAF,CAAME,UAAjF,EAA6F;AAC3F;AACAL,YAAAA,IAAI,GAAG,IAAP;AACA;AACD;AACF;;AAED,YAAIA,IAAI,KAAK,KAAb,EAAoB;AAClB,iBAAO,KAAP;AACD;AACF;;AAED,aAAO,IAAP;AACD;AA/BgB,GAAP,CAAZ;AAiCD,CA7DoD,CAA9C","sourcesContent":["import { flatten, identify } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nvar name = 'setIsSubset';\nvar dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nexport var createSetIsSubset = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      size = _ref.size,\n      subset = _ref.subset,\n      compareNatural = _ref.compareNatural,\n      Index = _ref.Index;\n\n  /**\n   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIsSubset(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false\n   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {boolean}            true | false\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty is a subset of anything\n        return true;\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything is not a subset of empty\n        return false;\n      }\n\n      var b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n      var b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n      var inb2;\n\n      for (var i = 0; i < b1.length; i++) {\n        inb2 = false;\n\n        for (var j = 0; j < b2.length; j++) {\n          if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n            // the identifier is always a decimal int\n            inb2 = true;\n            break;\n          }\n        }\n\n        if (inb2 === false) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}