{"ast":null,"code":"import { factory } from '../utils/factory';\nimport { deepMap } from '../utils/collection';\nvar name = 'number';\nvar dependencies = ['typed'];\nexport var createNumber = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    number: function number(x) {\n      return x;\n    },\n    string: function string(x) {\n      if (x === 'NaN') return NaN;\n      var num = Number(x);\n\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n\n      return num;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toNumber();\n    },\n    Fraction: function Fraction(x) {\n      return x.valueOf();\n    },\n    Unit: function Unit(x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n    \"null\": function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, number);\n    }\n  });\n  return number;\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/type/number.js"],"names":["factory","deepMap","name","dependencies","createNumber","_ref","typed","number","_","x","string","NaN","num","Number","isNaN","SyntaxError","BigNumber","toNumber","Fraction","valueOf","Unit","Error","_null","UnitStringUnit","unit","valuelessUnit","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,kBAAxB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACnF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,MAAIC,MAAM,GAAGD,KAAK,CAAC,QAAD,EAAW;AAC3B,QAAI,SAASE,CAAT,GAAa;AACf,aAAO,CAAP;AACD,KAH0B;AAI3BD,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBE,CAAhB,EAAmB;AACzB,aAAOA,CAAP;AACD,KAN0B;AAO3BC,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBD,CAAhB,EAAmB;AACzB,UAAIA,CAAC,KAAK,KAAV,EAAiB,OAAOE,GAAP;AACjB,UAAIC,GAAG,GAAGC,MAAM,CAACJ,CAAD,CAAhB;;AAEA,UAAIK,KAAK,CAACF,GAAD,CAAT,EAAgB;AACd,cAAM,IAAIG,WAAJ,CAAgB,aAAaN,CAAb,GAAiB,sBAAjC,CAAN;AACD;;AAED,aAAOG,GAAP;AACD,KAhB0B;AAiB3BI,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBP,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACQ,QAAF,EAAP;AACD,KAnB0B;AAoB3BC,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBT,CAAlB,EAAqB;AAC7B,aAAOA,CAAC,CAACU,OAAF,EAAP;AACD,KAtB0B;AAuB3BC,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAcX,CAAd,EAAiB;AACrB,YAAM,IAAIY,KAAJ,CAAU,8CAAV,CAAN;AACD,KAzB0B;AA0B3B,YAAQ,SAASC,KAAT,CAAeb,CAAf,EAAkB;AACxB,aAAO,CAAP;AACD,KA5B0B;AA6B3B,2BAAuB,SAASc,cAAT,CAAwBC,IAAxB,EAA8BC,aAA9B,EAA6C;AAClE,aAAOD,IAAI,CAACP,QAAL,CAAcQ,aAAd,CAAP;AACD,KA/B0B;AAgC3B,sBAAkB,SAASC,WAAT,CAAqBjB,CAArB,EAAwB;AACxC,aAAOR,OAAO,CAACQ,CAAD,EAAIF,MAAJ,CAAd;AACD;AAlC0B,GAAX,CAAlB;AAoCA,SAAOA,MAAP;AACD,CAjE+C,CAAzC","sourcesContent":["import { factory } from '../utils/factory';\nimport { deepMap } from '../utils/collection';\nvar name = 'number';\nvar dependencies = ['typed'];\nexport var createNumber = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    number: function number(x) {\n      return x;\n    },\n    string: function string(x) {\n      if (x === 'NaN') return NaN;\n      var num = Number(x);\n\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n\n      return num;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toNumber();\n    },\n    Fraction: function Fraction(x) {\n      return x.valueOf();\n    },\n    Unit: function Unit(x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n    \"null\": function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, number);\n    }\n  });\n  return number;\n});"]},"metadata":{},"sourceType":"module"}