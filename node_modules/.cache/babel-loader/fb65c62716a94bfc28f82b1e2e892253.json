{"ast":null,"code":"import { deepMap } from '../../utils/collection';\nimport { isInteger as isIntegerNumber } from '../../utils/number';\nimport { factory } from '../../utils/factory';\nvar name = 'isInteger';\nvar dependencies = ['typed'];\nexport var createIsInteger = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Test whether a value is an integer number.\n   * The function supports `number`, `BigNumber`, and `Fraction`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isInteger(x)\n   *\n   * Examples:\n   *\n   *    math.isInteger(2)                     // returns true\n   *    math.isInteger(0)                     // returns true\n   *    math.isInteger(0.5)                   // returns false\n   *    math.isInteger(math.bignumber(500))   // returns true\n   *    math.isInteger(math.fraction(4))      // returns true\n   *    math.isInteger('3')                   // returns true\n   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]\n   *    math.isInteger(math.complex('2-4i')   // throws an error\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isZero\n   *\n   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\n   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n   *                    Throws an error in case of an unknown data type.\n   */\n\n  var isInteger = typed(name, {\n    number: isIntegerNumber,\n    // TODO: what to do with isInteger(add(0.1, 0.2))  ?\n    BigNumber: function BigNumber(x) {\n      return x.isInt();\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && isFinite(x.n);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, isInteger);\n    }\n  });\n  return isInteger;\n});","map":{"version":3,"sources":["/home/kaappo/testit/canvas/node_modules/mathjs/es/function/utils/isInteger.js"],"names":["deepMap","isInteger","isIntegerNumber","factory","name","dependencies","createIsInteger","_ref","typed","number","BigNumber","x","isInt","Fraction","d","isFinite","n","ArrayMatrix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,SAAS,IAAIC,eAAtB,QAA6C,oBAA7C;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,eAAe,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqB,UAAUE,IAAV,EAAgB;AACtF,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,MAAIP,SAAS,GAAGO,KAAK,CAACJ,IAAD,EAAO;AAC1BK,IAAAA,MAAM,EAAEP,eADkB;AAE1B;AACAQ,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACC,KAAF,EAAP;AACD,KALyB;AAM1BC,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBF,CAAlB,EAAqB;AAC7B,aAAOA,CAAC,CAACG,CAAF,KAAQ,CAAR,IAAaC,QAAQ,CAACJ,CAAC,CAACK,CAAH,CAA5B;AACD,KARyB;AAS1B,sBAAkB,SAASC,WAAT,CAAqBN,CAArB,EAAwB;AACxC,aAAOX,OAAO,CAACW,CAAD,EAAIV,SAAJ,CAAd;AACD;AAXyB,GAAP,CAArB;AAaA,SAAOA,SAAP;AACD,CA9CkD,CAA5C","sourcesContent":["import { deepMap } from '../../utils/collection';\nimport { isInteger as isIntegerNumber } from '../../utils/number';\nimport { factory } from '../../utils/factory';\nvar name = 'isInteger';\nvar dependencies = ['typed'];\nexport var createIsInteger = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Test whether a value is an integer number.\n   * The function supports `number`, `BigNumber`, and `Fraction`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isInteger(x)\n   *\n   * Examples:\n   *\n   *    math.isInteger(2)                     // returns true\n   *    math.isInteger(0)                     // returns true\n   *    math.isInteger(0.5)                   // returns false\n   *    math.isInteger(math.bignumber(500))   // returns true\n   *    math.isInteger(math.fraction(4))      // returns true\n   *    math.isInteger('3')                   // returns true\n   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]\n   *    math.isInteger(math.complex('2-4i')   // throws an error\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isZero\n   *\n   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\n   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n   *                    Throws an error in case of an unknown data type.\n   */\n  var isInteger = typed(name, {\n    number: isIntegerNumber,\n    // TODO: what to do with isInteger(add(0.1, 0.2))  ?\n    BigNumber: function BigNumber(x) {\n      return x.isInt();\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && isFinite(x.n);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, isInteger);\n    }\n  });\n  return isInteger;\n});"]},"metadata":{},"sourceType":"module"}